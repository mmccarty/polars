Search.setIndex({"alltitles": {"ABS": [[1423, "abs"]], "ACOS": [[1426, "acos"]], "ACOSD": [[1426, "acosd"]], "ARRAY_AGG": [[1419, "array-agg"]], "ARRAY_CONTAINS": [[1419, "array-contains"]], "ARRAY_GET": [[1419, "array-get"]], "ARRAY_LENGTH": [[1419, "array-length"]], "ARRAY_LOWER": [[1419, "array-lower"]], "ARRAY_MEAN": [[1419, "array-mean"]], "ARRAY_REVERSE": [[1419, "array-reverse"]], "ARRAY_SUM": [[1419, "array-sum"]], "ARRAY_TO_STRING": [[1419, "array-to-string"]], "ARRAY_UNIQUE": [[1419, "array-unique"]], "ARRAY_UPPER": [[1419, "array-upper"]], "ASIN": [[1426, "asin"]], "ASIND": [[1426, "asind"]], "ATAN": [[1426, "atan"]], "ATAN2": [[1426, "atan2"]], "ATAN2D": [[1426, "atan2d"]], "ATAND": [[1426, "atand"]], "AVG": [[1418, "avg"]], "Aggregate": [[1418, null]], "Aggregation": [[207, null], [377, null], [882, null], [995, null]], "Aliases": [[1418, null], [1418, null], [1418, null], [1423, null], [1423, null], [1424, null], [1424, null]], "Array": [[370, null], [860, null], [1393, null], [1419, null]], "Asserts": [[1432, "asserts"]], "Attributes": [[351, null], [983, null], [1394, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[881, "avro"]], "BIT_AND": [[1420, "bit-and"]], "BIT_COUNT": [[1420, "bit-count"]], "BIT_LENGTH": [[1424, "bit-length"]], "BIT_OR": [[1420, "bit-or"]], "BIT_XOR": [[1420, "bit-xor"]], "Binary": [[861, null], [874, "binary"], [1395, null]], "Bitwise": [[1420, null]], "Boolean": [[862, null], [1396, null]], "CAST": [[1427, "cast"]], "CBRT": [[1423, "cbrt"]], "CEIL": [[1423, "ceil"]], "COALESCE": [[1421, "coalesce"]], "CONCAT": [[1424, "concat"]], "CONCAT_WS": [[1424, "concat-ws"]], "CORR": [[1418, "corr"]], "COS": [[1426, "cos"]], "COSD": [[1426, "cosd"]], "COT": [[1426, "cot"]], "COTD": [[1426, "cotd"]], "COUNT": [[1418, "count"]], "CREATE TABLE": [[1431, "create-table"]], "CSV": [[881, "csv"]], "Catalog": [[204, null]], "Categories": [[863, null], [1397, null]], "Clipboard": [[881, "clipboard"]], "Cloud Credentials": [[881, "cloud-credentials"]], "Columns / names": [[865, null]], "Comparison": [[874, "comparison"], [1405, "comparison"]], "Computation": [[352, null], [866, null], [1398, null]], "Conditional": [[1421, null]], "Config": [[206, null]], "Config load, save, state": [[206, "config-load-save-state"]], "Config options": [[206, "config-options"]], "Conjunction": [[874, "conjunction"]], "Conversion": [[879, "conversion"]], "DATE": [[1424, "date"]], "DATE_PART": [[1425, "date-part"]], "DEGREES": [[1426, "degrees"]], "DELETE": [[1431, "delete"]], "DISTINCT": [[1417, "distinct"]], "DIV": [[1423, "div"]], "DROP TABLES": [[1431, "drop-tables"]], "Data types": [[375, null]], "DataFrame": [[356, null]], "DataType": [[375, "datatype"]], "DataType expressions": [[374, null]], "Database": [[881, "database"]], "Delta Lake": [[881, "delta-lake"]], "Descriptive": [[353, null], [984, null], [1399, null]], "Documentation": [[1429, null], [1429, null], [1429, null]], "ENDS_WITH": [[1424, "ends-with"]], "EXCEPT": [[1430, "except"]], "EXP": [[1423, "exp"]], "EXPLAIN": [[1431, "explain"]], "EXTRACT": [[1425, "extract"]], "Errors": [[376, "errors"]], "Examples": [[1, "examples"], [994, "examples"], [1432, "examples"]], "Excel / ODS": [[881, "excel-ods"]], "Exceptions": [[376, null]], "Export": [[354, null], [1400, null]], "Expression SQL": [[1429, "expression-sql"]], "Expression plugins": [[992, "expression-plugins"]], "Expressions": [[868, null]], "Extending the API": [[1, null]], "FIRST": [[1418, "first"]], "FLOOR": [[1423, "floor"]], "FROM": [[1417, "from"]], "Feather / IPC": [[881, "feather-ipc"]], "Frame SQL": [[1429, "frame-sql"]], "Functions": [[371, null], [867, null], [879, null], [994, "functions"]], "GPUEngine": [[985, null]], "GREATEST": [[1421, "greatest"]], "GROUP BY": [[1417, "group-by"]], "Global SQL": [[1429, "global-sql"]], "GroupBy": [[355, null], [986, null]], "HAVING": [[1417, "having"]], "IF": [[1421, "if"]], "IFNULL": [[1421, "ifnull"]], "INITCAP": [[1424, "initcap"]], "INTERSECT": [[1430, "intersect"]], "IO plugins": [[992, "io-plugins"]], "Iceberg": [[881, "iceberg"]], "Importing": [[994, "importing"]], "InProcessQuery": [[987, null]], "Index": [[0, null]], "Input/output": [[881, null]], "Introduction": [[1429, "introduction"]], "JOIN": [[1417, "join"]], "JSON": [[881, "json"]], "LAST": [[1418, "last"]], "LEAST": [[1421, "least"]], "LEFT": [[1424, "left"]], "LENGTH": [[1424, "length"]], "LIMIT": [[1417, "limit"]], "LN": [[1423, "ln"]], "LOG": [[1423, "log"]], "LOG10": [[1423, "log10"]], "LOG1P": [[1423, "log1p"]], "LOG2": [[1423, "log2"]], "LOWER": [[1424, "lower"]], "LTRIM": [[1424, "ltrim"]], "LazyFrame": [[988, null]], "List": [[372, null], [869, null], [1402, null]], "MAX": [[1418, "max"]], "MEDIAN": [[1418, "median"]], "MIN": [[1418, "min"]], "MOD": [[1423, "mod"]], "Manipulation/selection": [[358, null], [872, null], [990, null], [1404, null]], "Math": [[1423, null]], "Meta": [[870, null]], "Metadata": [[991, null]], "Methods": [[1429, "methods"]], "Miscellaneous": [[357, null], [871, null], [879, "miscellaneous"], [989, null], [1403, null]], "Multiple Config instances": [[206, "multiple-config-instances"]], "Multiple queries": [[879, "multiple-queries"]], "NORMALIZE": [[1424, "normalize"]], "NULLIF": [[1421, "nullif"]], "Name": [[873, null]], "Nested": [[375, "nested"]], "Numeric": [[375, "numeric"], [874, "numeric"], [1405, "numeric"]], "OCTET_LENGTH": [[1424, "octet-length"]], "OFFSET": [[1417, "offset"]], "ORDER BY": [[1417, "order-by"]], "Operators": [[874, null], [1405, null]], "Other": [[375, "other"]], "PI": [[1423, "pi"]], "POW": [[1423, "pow"]], "Panic": [[376, "panic"]], "Parametric testing": [[1432, "parametric-testing"]], "Parquet": [[881, "parquet"]], "Partition": [[881, "partition"]], "Plot": [[359, null], [1406, null]], "Plugins": [[992, null]], "Polars strategies": [[1432, "polars-strategies"]], "Profiles": [[1432, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[881, "pyarrow-datasets"]], "Python API": [[1429, null]], "Python API reference": [[880, null]], "QUANTILE_CONT": [[1418, "quantile-cont"]], "QUANTILE_DISC": [[1418, "quantile-disc"]], "Querying": [[1429, "querying"]], "RADIANS": [[1426, "radians"]], "REGEXP_LIKE": [[1424, "regexp-like"]], "REPLACE": [[1424, "replace"]], "REVERSE": [[1424, "reverse"]], "RIGHT": [[1424, "right"]], "ROUND": [[1423, "round"]], "RTRIM": [[1424, "rtrim"]], "Random": [[879, "random"]], "SELECT": [[1417, "select"]], "SHOW TABLES": [[1431, "show-tables"]], "SIGN": [[1423, "sign"]], "SIN": [[1426, "sin"]], "SIND": [[1426, "sind"]], "SPLIT_PART": [[1424, "split-part"]], "SQL Clauses": [[1417, null]], "SQL Functions": [[1422, null]], "SQL Interface": [[1428, null]], "SQLContext": [[1429, "sqlcontext"]], "SQRT": [[1423, "sqrt"]], "STARTS_WITH": [[1424, "starts-with"]], "STDDEV": [[1418, "stddev"]], "STRFTIME": [[1425, "strftime"]], "STRING_TO_ARRAY": [[1424, "string-to-array"]], "STRPOS": [[1424, "strpos"]], "STRPTIME": [[1424, "strptime"]], "SUBSTR": [[1424, "substr"]], "SUM": [[1418, "sum"]], "Scan Cast Options": [[881, "scan-cast-options"]], "Schema": [[993, null]], "Selectors": [[994, null]], "Serialization": [[357, "serialization"], [989, "serialization"]], "Series": [[1401, null]], "Set Operations": [[1430, null]], "Set operations": [[994, "set-operations"]], "Strategy helpers": [[1432, "strategy-helpers"]], "String": [[375, "string"], [875, null], [1407, null], [1424, null]], "StringCache": [[879, "stringcache"]], "Struct": [[373, null], [876, null], [1408, null]], "Style": [[360, null]], "TAN": [[1426, "tan"]], "TAND": [[1426, "tand"]], "TIMESTAMP": [[1424, "timestamp"]], "TRUNCATE": [[1431, "truncate"]], "TRY_CAST": [[1427, "try-cast"]], "Table Operations": [[1431, null]], "Temporal": [[375, "temporal"], [877, null], [1409, null], [1425, null]], "Testing": [[1432, null]], "Trigonometry": [[1426, null]], "Types": [[1427, null]], "UNION": [[1430, "union"]], "UNION ALL": [[1430, "union-all"]], "UNION BY NAME": [[1430, "union-by-name"]], "UNNEST": [[1419, "unnest"], [1431, "unnest"]], "UPPER": [[1424, "upper"]], "Unity Catalog": [[205, null]], "Use as a context manager": [[206, "use-as-a-context-manager"]], "Use as a decorator": [[206, "use-as-a-decorator"]], "VARIANCE": [[1418, "variance"]], "WHERE": [[1417, "where"]], "Warnings": [[376, "warnings"]], "Window": [[878, null]], "polars.Catalog": [[191, null]], "polars.Catalog.get_table_info": [[192, null]], "polars.Catalog.list_catalogs": [[193, null]], "polars.Catalog.list_namespaces": [[194, null]], "polars.Catalog.list_tables": [[195, null]], "polars.Catalog.scan_table": [[196, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_default_credential_provider": [[10, null]], "polars.Config.set_engine_affinity": [[11, null]], "polars.Config.set_float_precision": [[12, null]], "polars.Config.set_fmt_float": [[13, null]], "polars.Config.set_fmt_str_lengths": [[14, null]], "polars.Config.set_fmt_table_cell_list_len": [[15, null]], "polars.Config.set_streaming_chunk_size": [[16, null]], "polars.Config.set_tbl_cell_alignment": [[17, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[18, null]], "polars.Config.set_tbl_cols": [[19, null]], "polars.Config.set_tbl_column_data_type_inline": [[20, null]], "polars.Config.set_tbl_dataframe_shape_below": [[21, null]], "polars.Config.set_tbl_formatting": [[22, null]], "polars.Config.set_tbl_hide_column_data_types": [[23, null]], "polars.Config.set_tbl_hide_column_names": [[24, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[25, null]], "polars.Config.set_tbl_hide_dtype_separator": [[26, null]], "polars.Config.set_tbl_rows": [[27, null]], "polars.Config.set_tbl_width_chars": [[28, null]], "polars.Config.set_thousands_separator": [[29, null]], "polars.Config.set_trim_decimal_zeros": [[30, null]], "polars.Config.set_verbose": [[31, null]], "polars.Config.state": [[32, null]], "polars.CredentialProvider": [[33, null]], "polars.CredentialProviderAWS": [[34, null]], "polars.CredentialProviderAzure": [[35, null]], "polars.CredentialProviderGCP": [[36, null]], "polars.DataFrame.__array__": [[208, null]], "polars.DataFrame.__arrow_c_stream__": [[209, null]], "polars.DataFrame.__dataframe__": [[210, null]], "polars.DataFrame.__getitem__": [[211, null]], "polars.DataFrame.__setitem__": [[212, null]], "polars.DataFrame.approx_n_unique": [[213, null]], "polars.DataFrame.bottom_k": [[214, null]], "polars.DataFrame.cast": [[215, null]], "polars.DataFrame.clear": [[216, null]], "polars.DataFrame.clone": [[217, null]], "polars.DataFrame.collect_schema": [[218, null]], "polars.DataFrame.columns": [[219, null]], "polars.DataFrame.corr": [[220, null]], "polars.DataFrame.count": [[221, null]], "polars.DataFrame.describe": [[222, null]], "polars.DataFrame.deserialize": [[223, null]], "polars.DataFrame.drop": [[224, null]], "polars.DataFrame.drop_in_place": [[225, null]], "polars.DataFrame.drop_nans": [[226, null]], "polars.DataFrame.drop_nulls": [[227, null]], "polars.DataFrame.dtypes": [[228, null]], "polars.DataFrame.equals": [[229, null]], "polars.DataFrame.estimated_size": [[230, null]], "polars.DataFrame.explode": [[231, null]], "polars.DataFrame.extend": [[232, null]], "polars.DataFrame.fill_nan": [[233, null]], "polars.DataFrame.fill_null": [[234, null]], "polars.DataFrame.filter": [[235, null]], "polars.DataFrame.flags": [[236, null]], "polars.DataFrame.fold": [[237, null]], "polars.DataFrame.gather_every": [[238, null]], "polars.DataFrame.get_column": [[239, null]], "polars.DataFrame.get_column_index": [[240, null]], "polars.DataFrame.get_columns": [[241, null]], "polars.DataFrame.glimpse": [[242, null]], "polars.DataFrame.group_by": [[243, null]], "polars.DataFrame.group_by_dynamic": [[244, null]], "polars.DataFrame.hash_rows": [[245, null]], "polars.DataFrame.head": [[246, null]], "polars.DataFrame.height": [[247, null]], "polars.DataFrame.hstack": [[248, null]], "polars.DataFrame.insert_column": [[249, null]], "polars.DataFrame.interpolate": [[250, null]], "polars.DataFrame.is_duplicated": [[251, null]], "polars.DataFrame.is_empty": [[252, null]], "polars.DataFrame.is_unique": [[253, null]], "polars.DataFrame.item": [[254, null]], "polars.DataFrame.iter_columns": [[255, null]], "polars.DataFrame.iter_rows": [[256, null]], "polars.DataFrame.iter_slices": [[257, null]], "polars.DataFrame.join": [[258, null]], "polars.DataFrame.join_asof": [[259, null]], "polars.DataFrame.join_where": [[260, null]], "polars.DataFrame.lazy": [[261, null]], "polars.DataFrame.limit": [[262, null]], "polars.DataFrame.map_columns": [[263, null]], "polars.DataFrame.map_rows": [[264, null]], "polars.DataFrame.match_to_schema": [[265, null]], "polars.DataFrame.max": [[266, null]], "polars.DataFrame.max_horizontal": [[267, null]], "polars.DataFrame.mean": [[268, null]], "polars.DataFrame.mean_horizontal": [[269, null]], "polars.DataFrame.median": [[270, null]], "polars.DataFrame.melt": [[271, null]], "polars.DataFrame.merge_sorted": [[272, null]], "polars.DataFrame.min": [[273, null]], "polars.DataFrame.min_horizontal": [[274, null]], "polars.DataFrame.n_chunks": [[275, null]], "polars.DataFrame.n_unique": [[276, null]], "polars.DataFrame.null_count": [[277, null]], "polars.DataFrame.partition_by": [[278, null]], "polars.DataFrame.pipe": [[279, null]], "polars.DataFrame.pivot": [[280, null]], "polars.DataFrame.product": [[281, null]], "polars.DataFrame.quantile": [[282, null]], "polars.DataFrame.rechunk": [[283, null]], "polars.DataFrame.remove": [[284, null]], "polars.DataFrame.rename": [[285, null]], "polars.DataFrame.replace_column": [[286, null]], "polars.DataFrame.reverse": [[287, null]], "polars.DataFrame.rolling": [[288, null]], "polars.DataFrame.row": [[289, null]], "polars.DataFrame.rows": [[290, null]], "polars.DataFrame.rows_by_key": [[291, null]], "polars.DataFrame.sample": [[292, null]], "polars.DataFrame.schema": [[293, null]], "polars.DataFrame.select": [[294, null]], "polars.DataFrame.select_seq": [[295, null]], "polars.DataFrame.serialize": [[296, null]], "polars.DataFrame.set_sorted": [[297, null]], "polars.DataFrame.shape": [[298, null]], "polars.DataFrame.shift": [[299, null]], "polars.DataFrame.shrink_to_fit": [[300, null]], "polars.DataFrame.slice": [[301, null]], "polars.DataFrame.sort": [[302, null]], "polars.DataFrame.sql": [[303, null]], "polars.DataFrame.std": [[304, null]], "polars.DataFrame.sum": [[305, null]], "polars.DataFrame.sum_horizontal": [[306, null]], "polars.DataFrame.tail": [[307, null]], "polars.DataFrame.to_arrow": [[308, null]], "polars.DataFrame.to_dict": [[309, null]], "polars.DataFrame.to_dicts": [[310, null]], "polars.DataFrame.to_dummies": [[311, null]], "polars.DataFrame.to_init_repr": [[312, null]], "polars.DataFrame.to_jax": [[313, null]], "polars.DataFrame.to_numpy": [[314, null]], "polars.DataFrame.to_pandas": [[315, null]], "polars.DataFrame.to_series": [[316, null]], "polars.DataFrame.to_struct": [[317, null]], "polars.DataFrame.to_torch": [[318, null]], "polars.DataFrame.top_k": [[319, null]], "polars.DataFrame.transpose": [[320, null]], "polars.DataFrame.unique": [[321, null]], "polars.DataFrame.unnest": [[322, null]], "polars.DataFrame.unpivot": [[323, null]], "polars.DataFrame.unstack": [[324, null]], "polars.DataFrame.update": [[325, null]], "polars.DataFrame.upsample": [[326, null]], "polars.DataFrame.var": [[327, null]], "polars.DataFrame.vstack": [[328, null]], "polars.DataFrame.width": [[329, null]], "polars.DataFrame.with_columns": [[330, null]], "polars.DataFrame.with_columns_seq": [[331, null]], "polars.DataFrame.with_row_count": [[332, null]], "polars.DataFrame.with_row_index": [[333, null]], "polars.DataFrame.write_avro": [[37, null]], "polars.DataFrame.write_clipboard": [[38, null]], "polars.DataFrame.write_csv": [[39, null]], "polars.DataFrame.write_database": [[40, null]], "polars.DataFrame.write_delta": [[41, null]], "polars.DataFrame.write_excel": [[42, null]], "polars.DataFrame.write_iceberg": [[43, null]], "polars.DataFrame.write_ipc": [[44, null]], "polars.DataFrame.write_ipc_stream": [[45, null]], "polars.DataFrame.write_json": [[46, null]], "polars.DataFrame.write_ndjson": [[47, null]], "polars.DataFrame.write_parquet": [[48, null]], "polars.DataType.to_dtype_expr": [[361, null]], "polars.DataTypeExpr.arr.inner_dtype": [[362, null]], "polars.DataTypeExpr.arr.shape": [[363, null]], "polars.DataTypeExpr.arr.width": [[364, null]], "polars.DataTypeExpr.list.inner_dtype": [[365, null]], "polars.DataTypeExpr.struct.field_dtype": [[366, null]], "polars.DataTypeExpr.struct.field_names": [[367, null]], "polars.Expr.abs": [[378, null]], "polars.Expr.add": [[379, null]], "polars.Expr.agg_groups": [[380, null]], "polars.Expr.alias": [[381, null]], "polars.Expr.all": [[382, null]], "polars.Expr.and_": [[383, null]], "polars.Expr.any": [[384, null]], "polars.Expr.append": [[385, null]], "polars.Expr.approx_n_unique": [[386, null]], "polars.Expr.arccos": [[387, null]], "polars.Expr.arccosh": [[388, null]], "polars.Expr.arcsin": [[389, null]], "polars.Expr.arcsinh": [[390, null]], "polars.Expr.arctan": [[391, null]], "polars.Expr.arctanh": [[392, null]], "polars.Expr.arg_max": [[393, null]], "polars.Expr.arg_min": [[394, null]], "polars.Expr.arg_sort": [[395, null]], "polars.Expr.arg_true": [[396, null]], "polars.Expr.arg_unique": [[397, null]], "polars.Expr.arr.all": [[398, null]], "polars.Expr.arr.any": [[399, null]], "polars.Expr.arr.arg_max": [[400, null]], "polars.Expr.arr.arg_min": [[401, null]], "polars.Expr.arr.contains": [[402, null]], "polars.Expr.arr.count_matches": [[403, null]], "polars.Expr.arr.explode": [[404, null]], "polars.Expr.arr.first": [[405, null]], "polars.Expr.arr.get": [[406, null]], "polars.Expr.arr.join": [[407, null]], "polars.Expr.arr.last": [[408, null]], "polars.Expr.arr.len": [[409, null]], "polars.Expr.arr.max": [[410, null]], "polars.Expr.arr.mean": [[411, null]], "polars.Expr.arr.median": [[412, null]], "polars.Expr.arr.min": [[413, null]], "polars.Expr.arr.n_unique": [[414, null]], "polars.Expr.arr.reverse": [[415, null]], "polars.Expr.arr.shift": [[416, null]], "polars.Expr.arr.sort": [[417, null]], "polars.Expr.arr.std": [[418, null]], "polars.Expr.arr.sum": [[419, null]], "polars.Expr.arr.to_list": [[420, null]], "polars.Expr.arr.to_struct": [[421, null]], "polars.Expr.arr.unique": [[422, null]], "polars.Expr.arr.var": [[423, null]], "polars.Expr.backward_fill": [[424, null]], "polars.Expr.bin.contains": [[425, null]], "polars.Expr.bin.decode": [[426, null]], "polars.Expr.bin.encode": [[427, null]], "polars.Expr.bin.ends_with": [[428, null]], "polars.Expr.bin.reinterpret": [[429, null]], "polars.Expr.bin.size": [[430, null]], "polars.Expr.bin.starts_with": [[431, null]], "polars.Expr.bitwise_and": [[432, null]], "polars.Expr.bitwise_count_ones": [[433, null]], "polars.Expr.bitwise_count_zeros": [[434, null]], "polars.Expr.bitwise_leading_ones": [[435, null]], "polars.Expr.bitwise_leading_zeros": [[436, null]], "polars.Expr.bitwise_or": [[437, null]], "polars.Expr.bitwise_trailing_ones": [[438, null]], "polars.Expr.bitwise_trailing_zeros": [[439, null]], "polars.Expr.bitwise_xor": [[440, null]], "polars.Expr.bottom_k": [[441, null]], "polars.Expr.bottom_k_by": [[442, null]], "polars.Expr.cast": [[443, null]], "polars.Expr.cat.ends_with": [[444, null]], "polars.Expr.cat.get_categories": [[445, null]], "polars.Expr.cat.len_bytes": [[446, null]], "polars.Expr.cat.len_chars": [[447, null]], "polars.Expr.cat.starts_with": [[448, null]], "polars.Expr.cbrt": [[449, null]], "polars.Expr.ceil": [[450, null]], "polars.Expr.clip": [[451, null]], "polars.Expr.cos": [[452, null]], "polars.Expr.cosh": [[453, null]], "polars.Expr.cot": [[454, null]], "polars.Expr.count": [[455, null]], "polars.Expr.cum_count": [[456, null]], "polars.Expr.cum_max": [[457, null]], "polars.Expr.cum_min": [[458, null]], "polars.Expr.cum_prod": [[459, null]], "polars.Expr.cum_sum": [[460, null]], "polars.Expr.cumulative_eval": [[461, null]], "polars.Expr.cut": [[462, null]], "polars.Expr.degrees": [[463, null]], "polars.Expr.deserialize": [[464, null]], "polars.Expr.diff": [[465, null]], "polars.Expr.dot": [[466, null]], "polars.Expr.drop_nans": [[467, null]], "polars.Expr.drop_nulls": [[468, null]], "polars.Expr.dt.add_business_days": [[469, null]], "polars.Expr.dt.base_utc_offset": [[470, null]], "polars.Expr.dt.cast_time_unit": [[471, null]], "polars.Expr.dt.century": [[472, null]], "polars.Expr.dt.combine": [[473, null]], "polars.Expr.dt.convert_time_zone": [[474, null]], "polars.Expr.dt.date": [[475, null]], "polars.Expr.dt.datetime": [[476, null]], "polars.Expr.dt.day": [[477, null]], "polars.Expr.dt.dst_offset": [[478, null]], "polars.Expr.dt.epoch": [[479, null]], "polars.Expr.dt.hour": [[480, null]], "polars.Expr.dt.is_business_day": [[481, null]], "polars.Expr.dt.is_leap_year": [[482, null]], "polars.Expr.dt.iso_year": [[483, null]], "polars.Expr.dt.microsecond": [[484, null]], "polars.Expr.dt.millennium": [[485, null]], "polars.Expr.dt.millisecond": [[486, null]], "polars.Expr.dt.minute": [[487, null]], "polars.Expr.dt.month": [[488, null]], "polars.Expr.dt.month_end": [[489, null]], "polars.Expr.dt.month_start": [[490, null]], "polars.Expr.dt.nanosecond": [[491, null]], "polars.Expr.dt.offset_by": [[492, null]], "polars.Expr.dt.ordinal_day": [[493, null]], "polars.Expr.dt.quarter": [[494, null]], "polars.Expr.dt.replace": [[495, null]], "polars.Expr.dt.replace_time_zone": [[496, null]], "polars.Expr.dt.round": [[497, null]], "polars.Expr.dt.second": [[498, null]], "polars.Expr.dt.strftime": [[499, null]], "polars.Expr.dt.time": [[500, null]], "polars.Expr.dt.timestamp": [[501, null]], "polars.Expr.dt.to_string": [[502, null]], "polars.Expr.dt.total_days": [[503, null]], "polars.Expr.dt.total_hours": [[504, null]], "polars.Expr.dt.total_microseconds": [[505, null]], "polars.Expr.dt.total_milliseconds": [[506, null]], "polars.Expr.dt.total_minutes": [[507, null]], "polars.Expr.dt.total_nanoseconds": [[508, null]], "polars.Expr.dt.total_seconds": [[509, null]], "polars.Expr.dt.truncate": [[510, null]], "polars.Expr.dt.week": [[511, null]], "polars.Expr.dt.weekday": [[512, null]], "polars.Expr.dt.with_time_unit": [[513, null]], "polars.Expr.dt.year": [[514, null]], "polars.Expr.entropy": [[515, null]], "polars.Expr.eq": [[516, null]], "polars.Expr.eq_missing": [[517, null]], "polars.Expr.ewm_mean": [[518, null]], "polars.Expr.ewm_mean_by": [[519, null]], "polars.Expr.ewm_std": [[520, null]], "polars.Expr.ewm_var": [[521, null]], "polars.Expr.exclude": [[522, null]], "polars.Expr.exp": [[523, null]], "polars.Expr.explode": [[524, null]], "polars.Expr.extend_constant": [[525, null]], "polars.Expr.fill_nan": [[526, null]], "polars.Expr.fill_null": [[527, null]], "polars.Expr.filter": [[528, null]], "polars.Expr.first": [[529, null]], "polars.Expr.flatten": [[530, null]], "polars.Expr.floor": [[531, null]], "polars.Expr.floordiv": [[532, null]], "polars.Expr.forward_fill": [[533, null]], "polars.Expr.from_json": [[534, null]], "polars.Expr.gather": [[535, null]], "polars.Expr.gather_every": [[536, null]], "polars.Expr.ge": [[537, null]], "polars.Expr.get": [[538, null]], "polars.Expr.gt": [[539, null]], "polars.Expr.has_nulls": [[540, null]], "polars.Expr.hash": [[541, null]], "polars.Expr.head": [[542, null]], "polars.Expr.hist": [[543, null]], "polars.Expr.implode": [[544, null]], "polars.Expr.index_of": [[545, null]], "polars.Expr.inspect": [[546, null]], "polars.Expr.interpolate": [[547, null]], "polars.Expr.interpolate_by": [[548, null]], "polars.Expr.is_between": [[549, null]], "polars.Expr.is_close": [[550, null]], "polars.Expr.is_duplicated": [[551, null]], "polars.Expr.is_finite": [[552, null]], "polars.Expr.is_first_distinct": [[553, null]], "polars.Expr.is_in": [[554, null]], "polars.Expr.is_infinite": [[555, null]], "polars.Expr.is_last_distinct": [[556, null]], "polars.Expr.is_nan": [[557, null]], "polars.Expr.is_not_nan": [[558, null]], "polars.Expr.is_not_null": [[559, null]], "polars.Expr.is_null": [[560, null]], "polars.Expr.is_unique": [[561, null]], "polars.Expr.kurtosis": [[562, null]], "polars.Expr.last": [[563, null]], "polars.Expr.le": [[564, null]], "polars.Expr.len": [[565, null]], "polars.Expr.limit": [[566, null]], "polars.Expr.list.all": [[567, null]], "polars.Expr.list.any": [[568, null]], "polars.Expr.list.arg_max": [[569, null]], "polars.Expr.list.arg_min": [[570, null]], "polars.Expr.list.concat": [[571, null]], "polars.Expr.list.contains": [[572, null]], "polars.Expr.list.count_matches": [[573, null]], "polars.Expr.list.diff": [[574, null]], "polars.Expr.list.drop_nulls": [[575, null]], "polars.Expr.list.eval": [[576, null]], "polars.Expr.list.explode": [[577, null]], "polars.Expr.list.filter": [[578, null]], "polars.Expr.list.first": [[579, null]], "polars.Expr.list.gather": [[580, null]], "polars.Expr.list.gather_every": [[581, null]], "polars.Expr.list.get": [[582, null]], "polars.Expr.list.head": [[583, null]], "polars.Expr.list.join": [[584, null]], "polars.Expr.list.last": [[585, null]], "polars.Expr.list.len": [[586, null]], "polars.Expr.list.max": [[587, null]], "polars.Expr.list.mean": [[588, null]], "polars.Expr.list.median": [[589, null]], "polars.Expr.list.min": [[590, null]], "polars.Expr.list.n_unique": [[591, null]], "polars.Expr.list.reverse": [[592, null]], "polars.Expr.list.sample": [[593, null]], "polars.Expr.list.set_difference": [[594, null]], "polars.Expr.list.set_intersection": [[595, null]], "polars.Expr.list.set_symmetric_difference": [[596, null]], "polars.Expr.list.set_union": [[597, null]], "polars.Expr.list.shift": [[598, null]], "polars.Expr.list.slice": [[599, null]], "polars.Expr.list.sort": [[600, null]], "polars.Expr.list.std": [[601, null]], "polars.Expr.list.sum": [[602, null]], "polars.Expr.list.tail": [[603, null]], "polars.Expr.list.to_array": [[604, null]], "polars.Expr.list.to_struct": [[605, null]], "polars.Expr.list.unique": [[606, null]], "polars.Expr.list.var": [[607, null]], "polars.Expr.log": [[608, null]], "polars.Expr.log10": [[609, null]], "polars.Expr.log1p": [[610, null]], "polars.Expr.lower_bound": [[611, null]], "polars.Expr.lt": [[612, null]], "polars.Expr.map_batches": [[613, null]], "polars.Expr.map_elements": [[614, null]], "polars.Expr.max": [[615, null]], "polars.Expr.mean": [[616, null]], "polars.Expr.median": [[617, null]], "polars.Expr.meta.eq": [[618, null]], "polars.Expr.meta.has_multiple_outputs": [[619, null]], "polars.Expr.meta.is_column": [[620, null]], "polars.Expr.meta.is_column_selection": [[621, null]], "polars.Expr.meta.is_literal": [[622, null]], "polars.Expr.meta.is_regex_projection": [[623, null]], "polars.Expr.meta.ne": [[624, null]], "polars.Expr.meta.output_name": [[625, null]], "polars.Expr.meta.pop": [[626, null]], "polars.Expr.meta.root_names": [[627, null]], "polars.Expr.meta.serialize": [[628, null]], "polars.Expr.meta.show_graph": [[629, null]], "polars.Expr.meta.tree_format": [[630, null]], "polars.Expr.meta.undo_aliases": [[631, null]], "polars.Expr.meta.write_json": [[632, null]], "polars.Expr.min": [[633, null]], "polars.Expr.mod": [[634, null]], "polars.Expr.mode": [[635, null]], "polars.Expr.mul": [[636, null]], "polars.Expr.n_unique": [[637, null]], "polars.Expr.name.keep": [[638, null]], "polars.Expr.name.map": [[639, null]], "polars.Expr.name.map_fields": [[640, null]], "polars.Expr.name.prefix": [[641, null]], "polars.Expr.name.prefix_fields": [[642, null]], "polars.Expr.name.suffix": [[643, null]], "polars.Expr.name.suffix_fields": [[644, null]], "polars.Expr.name.to_lowercase": [[645, null]], "polars.Expr.name.to_uppercase": [[646, null]], "polars.Expr.nan_max": [[647, null]], "polars.Expr.nan_min": [[648, null]], "polars.Expr.ne": [[649, null]], "polars.Expr.ne_missing": [[650, null]], "polars.Expr.neg": [[651, null]], "polars.Expr.not_": [[652, null]], "polars.Expr.null_count": [[653, null]], "polars.Expr.or_": [[654, null]], "polars.Expr.over": [[655, null]], "polars.Expr.pct_change": [[656, null]], "polars.Expr.peak_max": [[657, null]], "polars.Expr.peak_min": [[658, null]], "polars.Expr.pipe": [[659, null]], "polars.Expr.pow": [[660, null]], "polars.Expr.product": [[661, null]], "polars.Expr.qcut": [[662, null]], "polars.Expr.quantile": [[663, null]], "polars.Expr.radians": [[664, null]], "polars.Expr.rank": [[665, null]], "polars.Expr.rechunk": [[666, null]], "polars.Expr.reinterpret": [[667, null]], "polars.Expr.repeat_by": [[668, null]], "polars.Expr.replace": [[669, null]], "polars.Expr.replace_strict": [[670, null]], "polars.Expr.reshape": [[671, null]], "polars.Expr.reverse": [[672, null]], "polars.Expr.rle": [[673, null]], "polars.Expr.rle_id": [[674, null]], "polars.Expr.rolling": [[675, null]], "polars.Expr.rolling_kurtosis": [[676, null]], "polars.Expr.rolling_map": [[677, null]], "polars.Expr.rolling_max": [[678, null]], "polars.Expr.rolling_max_by": [[679, null]], "polars.Expr.rolling_mean": [[680, null]], "polars.Expr.rolling_mean_by": [[681, null]], "polars.Expr.rolling_median": [[682, null]], "polars.Expr.rolling_median_by": [[683, null]], "polars.Expr.rolling_min": [[684, null]], "polars.Expr.rolling_min_by": [[685, null]], "polars.Expr.rolling_quantile": [[686, null]], "polars.Expr.rolling_quantile_by": [[687, null]], "polars.Expr.rolling_skew": [[688, null]], "polars.Expr.rolling_std": [[689, null]], "polars.Expr.rolling_std_by": [[690, null]], "polars.Expr.rolling_sum": [[691, null]], "polars.Expr.rolling_sum_by": [[692, null]], "polars.Expr.rolling_var": [[693, null]], "polars.Expr.rolling_var_by": [[694, null]], "polars.Expr.round": [[695, null]], "polars.Expr.round_sig_figs": [[696, null]], "polars.Expr.sample": [[697, null]], "polars.Expr.search_sorted": [[698, null]], "polars.Expr.set_sorted": [[699, null]], "polars.Expr.shift": [[700, null]], "polars.Expr.shrink_dtype": [[701, null]], "polars.Expr.shuffle": [[702, null]], "polars.Expr.sign": [[703, null]], "polars.Expr.sin": [[704, null]], "polars.Expr.sinh": [[705, null]], "polars.Expr.skew": [[706, null]], "polars.Expr.slice": [[707, null]], "polars.Expr.sort": [[708, null]], "polars.Expr.sort_by": [[709, null]], "polars.Expr.sqrt": [[710, null]], "polars.Expr.std": [[711, null]], "polars.Expr.str.concat": [[712, null]], "polars.Expr.str.contains": [[713, null]], "polars.Expr.str.contains_any": [[714, null]], "polars.Expr.str.count_matches": [[715, null]], "polars.Expr.str.decode": [[716, null]], "polars.Expr.str.encode": [[717, null]], "polars.Expr.str.ends_with": [[718, null]], "polars.Expr.str.escape_regex": [[719, null]], "polars.Expr.str.explode": [[720, null]], "polars.Expr.str.extract": [[721, null]], "polars.Expr.str.extract_all": [[722, null]], "polars.Expr.str.extract_groups": [[723, null]], "polars.Expr.str.extract_many": [[724, null]], "polars.Expr.str.find": [[725, null]], "polars.Expr.str.find_many": [[726, null]], "polars.Expr.str.head": [[727, null]], "polars.Expr.str.join": [[728, null]], "polars.Expr.str.json_decode": [[729, null]], "polars.Expr.str.json_path_match": [[730, null]], "polars.Expr.str.len_bytes": [[731, null]], "polars.Expr.str.len_chars": [[732, null]], "polars.Expr.str.normalize": [[733, null]], "polars.Expr.str.pad_end": [[734, null]], "polars.Expr.str.pad_start": [[735, null]], "polars.Expr.str.replace": [[736, null]], "polars.Expr.str.replace_all": [[737, null]], "polars.Expr.str.replace_many": [[738, null]], "polars.Expr.str.reverse": [[739, null]], "polars.Expr.str.slice": [[740, null]], "polars.Expr.str.split": [[741, null]], "polars.Expr.str.split_exact": [[742, null]], "polars.Expr.str.splitn": [[743, null]], "polars.Expr.str.starts_with": [[744, null]], "polars.Expr.str.strip_chars": [[745, null]], "polars.Expr.str.strip_chars_end": [[746, null]], "polars.Expr.str.strip_chars_start": [[747, null]], "polars.Expr.str.strip_prefix": [[748, null]], "polars.Expr.str.strip_suffix": [[749, null]], "polars.Expr.str.strptime": [[750, null]], "polars.Expr.str.tail": [[751, null]], "polars.Expr.str.to_date": [[752, null]], "polars.Expr.str.to_datetime": [[753, null]], "polars.Expr.str.to_decimal": [[754, null]], "polars.Expr.str.to_integer": [[755, null]], "polars.Expr.str.to_lowercase": [[756, null]], "polars.Expr.str.to_time": [[757, null]], "polars.Expr.str.to_titlecase": [[758, null]], "polars.Expr.str.to_uppercase": [[759, null]], "polars.Expr.str.zfill": [[760, null]], "polars.Expr.struct.field": [[761, null]], "polars.Expr.struct.json_encode": [[762, null]], "polars.Expr.struct.rename_fields": [[763, null]], "polars.Expr.struct.unnest": [[764, null]], "polars.Expr.struct.with_fields": [[765, null]], "polars.Expr.sub": [[766, null]], "polars.Expr.sum": [[767, null]], "polars.Expr.tail": [[768, null]], "polars.Expr.tan": [[769, null]], "polars.Expr.tanh": [[770, null]], "polars.Expr.to_physical": [[771, null]], "polars.Expr.top_k": [[772, null]], "polars.Expr.top_k_by": [[773, null]], "polars.Expr.truediv": [[774, null]], "polars.Expr.unique": [[775, null]], "polars.Expr.unique_counts": [[776, null]], "polars.Expr.upper_bound": [[777, null]], "polars.Expr.value_counts": [[778, null]], "polars.Expr.var": [[779, null]], "polars.Expr.where": [[780, null]], "polars.Expr.xor": [[781, null]], "polars.LazyFrame.__getitem__": [[883, null]], "polars.LazyFrame.approx_n_unique": [[884, null]], "polars.LazyFrame.bottom_k": [[885, null]], "polars.LazyFrame.cache": [[886, null]], "polars.LazyFrame.cast": [[887, null]], "polars.LazyFrame.clear": [[888, null]], "polars.LazyFrame.clone": [[889, null]], "polars.LazyFrame.collect": [[890, null]], "polars.LazyFrame.collect_async": [[891, null]], "polars.LazyFrame.collect_schema": [[892, null]], "polars.LazyFrame.columns": [[893, null]], "polars.LazyFrame.count": [[894, null]], "polars.LazyFrame.describe": [[895, null]], "polars.LazyFrame.deserialize": [[896, null]], "polars.LazyFrame.drop": [[897, null]], "polars.LazyFrame.drop_nans": [[898, null]], "polars.LazyFrame.drop_nulls": [[899, null]], "polars.LazyFrame.dtypes": [[900, null]], "polars.LazyFrame.explain": [[901, null]], "polars.LazyFrame.explode": [[902, null]], "polars.LazyFrame.fill_nan": [[903, null]], "polars.LazyFrame.fill_null": [[904, null]], "polars.LazyFrame.filter": [[905, null]], "polars.LazyFrame.first": [[906, null]], "polars.LazyFrame.gather_every": [[907, null]], "polars.LazyFrame.group_by": [[908, null]], "polars.LazyFrame.group_by_dynamic": [[909, null]], "polars.LazyFrame.head": [[910, null]], "polars.LazyFrame.inspect": [[911, null]], "polars.LazyFrame.interpolate": [[912, null]], "polars.LazyFrame.join": [[913, null]], "polars.LazyFrame.join_asof": [[914, null]], "polars.LazyFrame.join_where": [[915, null]], "polars.LazyFrame.last": [[916, null]], "polars.LazyFrame.lazy": [[917, null]], "polars.LazyFrame.limit": [[918, null]], "polars.LazyFrame.map_batches": [[919, null]], "polars.LazyFrame.match_to_schema": [[920, null]], "polars.LazyFrame.max": [[921, null]], "polars.LazyFrame.mean": [[922, null]], "polars.LazyFrame.median": [[923, null]], "polars.LazyFrame.melt": [[924, null]], "polars.LazyFrame.merge_sorted": [[925, null]], "polars.LazyFrame.min": [[926, null]], "polars.LazyFrame.null_count": [[927, null]], "polars.LazyFrame.pipe": [[928, null]], "polars.LazyFrame.pipe_with_schema": [[929, null]], "polars.LazyFrame.profile": [[930, null]], "polars.LazyFrame.quantile": [[931, null]], "polars.LazyFrame.remote": [[932, null]], "polars.LazyFrame.remove": [[933, null]], "polars.LazyFrame.rename": [[934, null]], "polars.LazyFrame.reverse": [[935, null]], "polars.LazyFrame.rolling": [[936, null]], "polars.LazyFrame.schema": [[937, null]], "polars.LazyFrame.select": [[938, null]], "polars.LazyFrame.select_seq": [[939, null]], "polars.LazyFrame.serialize": [[940, null]], "polars.LazyFrame.set_sorted": [[941, null]], "polars.LazyFrame.shift": [[942, null]], "polars.LazyFrame.show_graph": [[943, null]], "polars.LazyFrame.sink_csv": [[49, null]], "polars.LazyFrame.sink_ipc": [[50, null]], "polars.LazyFrame.sink_ndjson": [[51, null]], "polars.LazyFrame.sink_parquet": [[52, null]], "polars.LazyFrame.slice": [[944, null]], "polars.LazyFrame.sort": [[945, null]], "polars.LazyFrame.sql": [[946, null]], "polars.LazyFrame.std": [[947, null]], "polars.LazyFrame.sum": [[948, null]], "polars.LazyFrame.tail": [[949, null]], "polars.LazyFrame.top_k": [[950, null]], "polars.LazyFrame.unique": [[951, null]], "polars.LazyFrame.unnest": [[952, null]], "polars.LazyFrame.unpivot": [[953, null]], "polars.LazyFrame.update": [[954, null]], "polars.LazyFrame.var": [[955, null]], "polars.LazyFrame.width": [[956, null]], "polars.LazyFrame.with_columns": [[957, null]], "polars.LazyFrame.with_columns_seq": [[958, null]], "polars.LazyFrame.with_context": [[959, null]], "polars.LazyFrame.with_row_count": [[960, null]], "polars.LazyFrame.with_row_index": [[961, null]], "polars.PartitionByKey": [[53, null]], "polars.PartitionMaxSize": [[54, null]], "polars.PartitionParted": [[55, null]], "polars.QueryOptFlags": [[962, null]], "polars.SQLContext.execute": [[1410, null]], "polars.SQLContext.execute_global": [[1411, null]], "polars.SQLContext.register": [[1412, null]], "polars.SQLContext.register_globals": [[1413, null]], "polars.SQLContext.register_many": [[1414, null]], "polars.SQLContext.tables": [[1415, null]], "polars.SQLContext.unregister": [[1416, null]], "polars.ScanCastOptions": [[56, null]], "polars.Series.__array__": [[996, null]], "polars.Series.__arrow_c_stream__": [[997, null]], "polars.Series.__getitem__": [[998, null]], "polars.Series.abs": [[999, null]], "polars.Series.alias": [[1000, null]], "polars.Series.all": [[1001, null]], "polars.Series.any": [[1002, null]], "polars.Series.append": [[1003, null]], "polars.Series.approx_n_unique": [[1004, null]], "polars.Series.arccos": [[1005, null]], "polars.Series.arccosh": [[1006, null]], "polars.Series.arcsin": [[1007, null]], "polars.Series.arcsinh": [[1008, null]], "polars.Series.arctan": [[1009, null]], "polars.Series.arctanh": [[1010, null]], "polars.Series.arg_max": [[1011, null]], "polars.Series.arg_min": [[1012, null]], "polars.Series.arg_sort": [[1013, null]], "polars.Series.arg_true": [[1014, null]], "polars.Series.arg_unique": [[1015, null]], "polars.Series.arr.all": [[1016, null]], "polars.Series.arr.any": [[1017, null]], "polars.Series.arr.arg_max": [[1018, null]], "polars.Series.arr.arg_min": [[1019, null]], "polars.Series.arr.contains": [[1020, null]], "polars.Series.arr.count_matches": [[1021, null]], "polars.Series.arr.explode": [[1022, null]], "polars.Series.arr.first": [[1023, null]], "polars.Series.arr.get": [[1024, null]], "polars.Series.arr.join": [[1025, null]], "polars.Series.arr.last": [[1026, null]], "polars.Series.arr.len": [[1027, null]], "polars.Series.arr.max": [[1028, null]], "polars.Series.arr.median": [[1029, null]], "polars.Series.arr.min": [[1030, null]], "polars.Series.arr.n_unique": [[1031, null]], "polars.Series.arr.reverse": [[1032, null]], "polars.Series.arr.shift": [[1033, null]], "polars.Series.arr.sort": [[1034, null]], "polars.Series.arr.std": [[1035, null]], "polars.Series.arr.sum": [[1036, null]], "polars.Series.arr.to_list": [[1037, null]], "polars.Series.arr.to_struct": [[1038, null]], "polars.Series.arr.unique": [[1039, null]], "polars.Series.arr.var": [[1040, null]], "polars.Series.backward_fill": [[1041, null]], "polars.Series.bin.contains": [[1042, null]], "polars.Series.bin.decode": [[1043, null]], "polars.Series.bin.encode": [[1044, null]], "polars.Series.bin.ends_with": [[1045, null]], "polars.Series.bin.reinterpret": [[1046, null]], "polars.Series.bin.size": [[1047, null]], "polars.Series.bin.starts_with": [[1048, null]], "polars.Series.bitwise_and": [[1049, null]], "polars.Series.bitwise_count_ones": [[1050, null]], "polars.Series.bitwise_count_zeros": [[1051, null]], "polars.Series.bitwise_leading_ones": [[1052, null]], "polars.Series.bitwise_leading_zeros": [[1053, null]], "polars.Series.bitwise_or": [[1054, null]], "polars.Series.bitwise_trailing_ones": [[1055, null]], "polars.Series.bitwise_trailing_zeros": [[1056, null]], "polars.Series.bitwise_xor": [[1057, null]], "polars.Series.bottom_k": [[1058, null]], "polars.Series.bottom_k_by": [[1059, null]], "polars.Series.cast": [[1060, null]], "polars.Series.cat.ends_with": [[1061, null]], "polars.Series.cat.get_categories": [[1062, null]], "polars.Series.cat.is_local": [[1063, null]], "polars.Series.cat.len_bytes": [[1064, null]], "polars.Series.cat.len_chars": [[1065, null]], "polars.Series.cat.starts_with": [[1066, null]], "polars.Series.cat.to_local": [[1067, null]], "polars.Series.cat.uses_lexical_ordering": [[1068, null]], "polars.Series.cbrt": [[1069, null]], "polars.Series.ceil": [[1070, null]], "polars.Series.chunk_lengths": [[1071, null]], "polars.Series.clear": [[1072, null]], "polars.Series.clip": [[1073, null]], "polars.Series.clone": [[1074, null]], "polars.Series.cos": [[1075, null]], "polars.Series.cosh": [[1076, null]], "polars.Series.cot": [[1077, null]], "polars.Series.count": [[1078, null]], "polars.Series.cum_count": [[1079, null]], "polars.Series.cum_max": [[1080, null]], "polars.Series.cum_min": [[1081, null]], "polars.Series.cum_prod": [[1082, null]], "polars.Series.cum_sum": [[1083, null]], "polars.Series.cumulative_eval": [[1084, null]], "polars.Series.cut": [[1085, null]], "polars.Series.describe": [[1086, null]], "polars.Series.diff": [[1087, null]], "polars.Series.dot": [[1088, null]], "polars.Series.drop_nans": [[1089, null]], "polars.Series.drop_nulls": [[1090, null]], "polars.Series.dt.add_business_days": [[1091, null]], "polars.Series.dt.base_utc_offset": [[1092, null]], "polars.Series.dt.cast_time_unit": [[1093, null]], "polars.Series.dt.century": [[1094, null]], "polars.Series.dt.combine": [[1095, null]], "polars.Series.dt.convert_time_zone": [[1096, null]], "polars.Series.dt.date": [[1097, null]], "polars.Series.dt.datetime": [[1098, null]], "polars.Series.dt.day": [[1099, null]], "polars.Series.dt.dst_offset": [[1100, null]], "polars.Series.dt.epoch": [[1101, null]], "polars.Series.dt.hour": [[1102, null]], "polars.Series.dt.is_business_day": [[1103, null]], "polars.Series.dt.is_leap_year": [[1104, null]], "polars.Series.dt.iso_year": [[1105, null]], "polars.Series.dt.max": [[1106, null]], "polars.Series.dt.mean": [[1107, null]], "polars.Series.dt.median": [[1108, null]], "polars.Series.dt.microsecond": [[1109, null]], "polars.Series.dt.millennium": [[1110, null]], "polars.Series.dt.millisecond": [[1111, null]], "polars.Series.dt.min": [[1112, null]], "polars.Series.dt.minute": [[1113, null]], "polars.Series.dt.month": [[1114, null]], "polars.Series.dt.month_end": [[1115, null]], "polars.Series.dt.month_start": [[1116, null]], "polars.Series.dt.nanosecond": [[1117, null]], "polars.Series.dt.offset_by": [[1118, null]], "polars.Series.dt.ordinal_day": [[1119, null]], "polars.Series.dt.quarter": [[1120, null]], "polars.Series.dt.replace": [[1121, null]], "polars.Series.dt.replace_time_zone": [[1122, null]], "polars.Series.dt.round": [[1123, null]], "polars.Series.dt.second": [[1124, null]], "polars.Series.dt.strftime": [[1125, null]], "polars.Series.dt.time": [[1126, null]], "polars.Series.dt.timestamp": [[1127, null]], "polars.Series.dt.to_string": [[1128, null]], "polars.Series.dt.total_days": [[1129, null]], "polars.Series.dt.total_hours": [[1130, null]], "polars.Series.dt.total_microseconds": [[1131, null]], "polars.Series.dt.total_milliseconds": [[1132, null]], "polars.Series.dt.total_minutes": [[1133, null]], "polars.Series.dt.total_nanoseconds": [[1134, null]], "polars.Series.dt.total_seconds": [[1135, null]], "polars.Series.dt.truncate": [[1136, null]], "polars.Series.dt.week": [[1137, null]], "polars.Series.dt.weekday": [[1138, null]], "polars.Series.dt.with_time_unit": [[1139, null]], "polars.Series.dt.year": [[1140, null]], "polars.Series.dtype": [[1141, null]], "polars.Series.entropy": [[1142, null]], "polars.Series.eq": [[1143, null]], "polars.Series.eq_missing": [[1144, null]], "polars.Series.equals": [[1145, null]], "polars.Series.estimated_size": [[1146, null]], "polars.Series.ewm_mean": [[1147, null]], "polars.Series.ewm_mean_by": [[1148, null]], "polars.Series.ewm_std": [[1149, null]], "polars.Series.ewm_var": [[1150, null]], "polars.Series.exp": [[1151, null]], "polars.Series.explode": [[1152, null]], "polars.Series.extend": [[1153, null]], "polars.Series.extend_constant": [[1154, null]], "polars.Series.fill_nan": [[1155, null]], "polars.Series.fill_null": [[1156, null]], "polars.Series.filter": [[1157, null]], "polars.Series.first": [[1158, null]], "polars.Series.flags": [[1159, null]], "polars.Series.floor": [[1160, null]], "polars.Series.forward_fill": [[1161, null]], "polars.Series.gather": [[1162, null]], "polars.Series.gather_every": [[1163, null]], "polars.Series.ge": [[1164, null]], "polars.Series.get_chunks": [[1165, null]], "polars.Series.gt": [[1166, null]], "polars.Series.has_nulls": [[1167, null]], "polars.Series.has_validity": [[1168, null]], "polars.Series.hash": [[1169, null]], "polars.Series.head": [[1170, null]], "polars.Series.hist": [[1171, null]], "polars.Series.implode": [[1172, null]], "polars.Series.index_of": [[1173, null]], "polars.Series.interpolate": [[1174, null]], "polars.Series.interpolate_by": [[1175, null]], "polars.Series.is_between": [[1176, null]], "polars.Series.is_close": [[1177, null]], "polars.Series.is_duplicated": [[1178, null]], "polars.Series.is_empty": [[1179, null]], "polars.Series.is_finite": [[1180, null]], "polars.Series.is_first_distinct": [[1181, null]], "polars.Series.is_in": [[1182, null]], "polars.Series.is_infinite": [[1183, null]], "polars.Series.is_last_distinct": [[1184, null]], "polars.Series.is_nan": [[1185, null]], "polars.Series.is_not_nan": [[1186, null]], "polars.Series.is_not_null": [[1187, null]], "polars.Series.is_null": [[1188, null]], "polars.Series.is_sorted": [[1189, null]], "polars.Series.is_unique": [[1190, null]], "polars.Series.item": [[1191, null]], "polars.Series.kurtosis": [[1192, null]], "polars.Series.last": [[1193, null]], "polars.Series.le": [[1194, null]], "polars.Series.len": [[1195, null]], "polars.Series.limit": [[1196, null]], "polars.Series.list.all": [[1197, null]], "polars.Series.list.any": [[1198, null]], "polars.Series.list.arg_max": [[1199, null]], "polars.Series.list.arg_min": [[1200, null]], "polars.Series.list.concat": [[1201, null]], "polars.Series.list.contains": [[1202, null]], "polars.Series.list.count_matches": [[1203, null]], "polars.Series.list.diff": [[1204, null]], "polars.Series.list.drop_nulls": [[1205, null]], "polars.Series.list.eval": [[1206, null]], "polars.Series.list.explode": [[1207, null]], "polars.Series.list.filter": [[1208, null]], "polars.Series.list.first": [[1209, null]], "polars.Series.list.gather": [[1210, null]], "polars.Series.list.gather_every": [[1211, null]], "polars.Series.list.get": [[1212, null]], "polars.Series.list.head": [[1213, null]], "polars.Series.list.join": [[1214, null]], "polars.Series.list.last": [[1215, null]], "polars.Series.list.len": [[1216, null]], "polars.Series.list.max": [[1217, null]], "polars.Series.list.mean": [[1218, null]], "polars.Series.list.median": [[1219, null]], "polars.Series.list.min": [[1220, null]], "polars.Series.list.n_unique": [[1221, null]], "polars.Series.list.reverse": [[1222, null]], "polars.Series.list.sample": [[1223, null]], "polars.Series.list.set_difference": [[1224, null]], "polars.Series.list.set_intersection": [[1225, null]], "polars.Series.list.set_symmetric_difference": [[1226, null]], "polars.Series.list.set_union": [[1227, null]], "polars.Series.list.shift": [[1228, null]], "polars.Series.list.slice": [[1229, null]], "polars.Series.list.sort": [[1230, null]], "polars.Series.list.std": [[1231, null]], "polars.Series.list.sum": [[1232, null]], "polars.Series.list.tail": [[1233, null]], "polars.Series.list.to_array": [[1234, null]], "polars.Series.list.to_struct": [[1235, null]], "polars.Series.list.unique": [[1236, null]], "polars.Series.list.var": [[1237, null]], "polars.Series.log": [[1238, null]], "polars.Series.log10": [[1239, null]], "polars.Series.log1p": [[1240, null]], "polars.Series.lower_bound": [[1241, null]], "polars.Series.lt": [[1242, null]], "polars.Series.map_elements": [[1243, null]], "polars.Series.max": [[1244, null]], "polars.Series.mean": [[1245, null]], "polars.Series.median": [[1246, null]], "polars.Series.min": [[1247, null]], "polars.Series.mode": [[1248, null]], "polars.Series.n_chunks": [[1249, null]], "polars.Series.n_unique": [[1250, null]], "polars.Series.name": [[1251, null]], "polars.Series.nan_max": [[1252, null]], "polars.Series.nan_min": [[1253, null]], "polars.Series.ne": [[1254, null]], "polars.Series.ne_missing": [[1255, null]], "polars.Series.new_from_index": [[1256, null]], "polars.Series.not_": [[1257, null]], "polars.Series.null_count": [[1258, null]], "polars.Series.pct_change": [[1259, null]], "polars.Series.peak_max": [[1260, null]], "polars.Series.peak_min": [[1261, null]], "polars.Series.pow": [[1262, null]], "polars.Series.product": [[1263, null]], "polars.Series.qcut": [[1264, null]], "polars.Series.quantile": [[1265, null]], "polars.Series.rank": [[1266, null]], "polars.Series.rechunk": [[1267, null]], "polars.Series.reinterpret": [[1268, null]], "polars.Series.rename": [[1269, null]], "polars.Series.repeat_by": [[1270, null]], "polars.Series.replace": [[1271, null]], "polars.Series.replace_strict": [[1272, null]], "polars.Series.reshape": [[1273, null]], "polars.Series.reverse": [[1274, null]], "polars.Series.rle": [[1275, null]], "polars.Series.rle_id": [[1276, null]], "polars.Series.rolling_kurtosis": [[1277, null]], "polars.Series.rolling_map": [[1278, null]], "polars.Series.rolling_max": [[1279, null]], "polars.Series.rolling_max_by": [[1280, null]], "polars.Series.rolling_mean": [[1281, null]], "polars.Series.rolling_mean_by": [[1282, null]], "polars.Series.rolling_median": [[1283, null]], "polars.Series.rolling_median_by": [[1284, null]], "polars.Series.rolling_min": [[1285, null]], "polars.Series.rolling_min_by": [[1286, null]], "polars.Series.rolling_quantile": [[1287, null]], "polars.Series.rolling_quantile_by": [[1288, null]], "polars.Series.rolling_skew": [[1289, null]], "polars.Series.rolling_std": [[1290, null]], "polars.Series.rolling_std_by": [[1291, null]], "polars.Series.rolling_sum": [[1292, null]], "polars.Series.rolling_sum_by": [[1293, null]], "polars.Series.rolling_var": [[1294, null]], "polars.Series.rolling_var_by": [[1295, null]], "polars.Series.round": [[1296, null]], "polars.Series.round_sig_figs": [[1297, null]], "polars.Series.sample": [[1298, null]], "polars.Series.scatter": [[1299, null]], "polars.Series.search_sorted": [[1300, null]], "polars.Series.set": [[1301, null]], "polars.Series.set_sorted": [[1302, null]], "polars.Series.shape": [[1303, null]], "polars.Series.shift": [[1304, null]], "polars.Series.shrink_dtype": [[1305, null]], "polars.Series.shrink_to_fit": [[1306, null]], "polars.Series.shuffle": [[1307, null]], "polars.Series.sign": [[1308, null]], "polars.Series.sin": [[1309, null]], "polars.Series.sinh": [[1310, null]], "polars.Series.skew": [[1311, null]], "polars.Series.slice": [[1312, null]], "polars.Series.sort": [[1313, null]], "polars.Series.sqrt": [[1314, null]], "polars.Series.std": [[1315, null]], "polars.Series.str.concat": [[1316, null]], "polars.Series.str.contains": [[1317, null]], "polars.Series.str.contains_any": [[1318, null]], "polars.Series.str.count_matches": [[1319, null]], "polars.Series.str.decode": [[1320, null]], "polars.Series.str.encode": [[1321, null]], "polars.Series.str.ends_with": [[1322, null]], "polars.Series.str.escape_regex": [[1323, null]], "polars.Series.str.explode": [[1324, null]], "polars.Series.str.extract": [[1325, null]], "polars.Series.str.extract_all": [[1326, null]], "polars.Series.str.extract_groups": [[1327, null]], "polars.Series.str.extract_many": [[1328, null]], "polars.Series.str.find": [[1329, null]], "polars.Series.str.find_many": [[1330, null]], "polars.Series.str.head": [[1331, null]], "polars.Series.str.join": [[1332, null]], "polars.Series.str.json_decode": [[1333, null]], "polars.Series.str.json_path_match": [[1334, null]], "polars.Series.str.len_bytes": [[1335, null]], "polars.Series.str.len_chars": [[1336, null]], "polars.Series.str.normalize": [[1337, null]], "polars.Series.str.pad_end": [[1338, null]], "polars.Series.str.pad_start": [[1339, null]], "polars.Series.str.replace": [[1340, null]], "polars.Series.str.replace_all": [[1341, null]], "polars.Series.str.replace_many": [[1342, null]], "polars.Series.str.reverse": [[1343, null]], "polars.Series.str.slice": [[1344, null]], "polars.Series.str.split": [[1345, null]], "polars.Series.str.split_exact": [[1346, null]], "polars.Series.str.splitn": [[1347, null]], "polars.Series.str.starts_with": [[1348, null]], "polars.Series.str.strip_chars": [[1349, null]], "polars.Series.str.strip_chars_end": [[1350, null]], "polars.Series.str.strip_chars_start": [[1351, null]], "polars.Series.str.strip_prefix": [[1352, null]], "polars.Series.str.strip_suffix": [[1353, null]], "polars.Series.str.strptime": [[1354, null]], "polars.Series.str.tail": [[1355, null]], "polars.Series.str.to_date": [[1356, null]], "polars.Series.str.to_datetime": [[1357, null]], "polars.Series.str.to_decimal": [[1358, null]], "polars.Series.str.to_integer": [[1359, null]], "polars.Series.str.to_lowercase": [[1360, null]], "polars.Series.str.to_time": [[1361, null]], "polars.Series.str.to_titlecase": [[1362, null]], "polars.Series.str.to_uppercase": [[1363, null]], "polars.Series.str.zfill": [[1364, null]], "polars.Series.struct.field": [[1365, null]], "polars.Series.struct.fields": [[1366, null]], "polars.Series.struct.json_encode": [[1367, null]], "polars.Series.struct.rename_fields": [[1368, null]], "polars.Series.struct.schema": [[1369, null]], "polars.Series.struct.unnest": [[1370, null]], "polars.Series.sum": [[1371, null]], "polars.Series.tail": [[1372, null]], "polars.Series.tan": [[1373, null]], "polars.Series.tanh": [[1374, null]], "polars.Series.to_arrow": [[1375, null]], "polars.Series.to_dummies": [[1376, null]], "polars.Series.to_frame": [[1377, null]], "polars.Series.to_init_repr": [[1378, null]], "polars.Series.to_jax": [[1379, null]], "polars.Series.to_list": [[1380, null]], "polars.Series.to_numpy": [[1381, null]], "polars.Series.to_pandas": [[1382, null]], "polars.Series.to_physical": [[1383, null]], "polars.Series.to_torch": [[1384, null]], "polars.Series.top_k": [[1385, null]], "polars.Series.top_k_by": [[1386, null]], "polars.Series.unique": [[1387, null]], "polars.Series.unique_counts": [[1388, null]], "polars.Series.upper_bound": [[1389, null]], "polars.Series.value_counts": [[1390, null]], "polars.Series.var": [[1391, null]], "polars.Series.zip_with": [[1392, null]], "polars.StringCache": [[57, null]], "polars.align_frames": [[58, null]], "polars.all": [[782, null]], "polars.all_horizontal": [[783, null]], "polars.any": [[784, null]], "polars.any_horizontal": [[785, null]], "polars.api.register_dataframe_namespace": [[59, null]], "polars.api.register_expr_namespace": [[60, null]], "polars.api.register_lazyframe_namespace": [[61, null]], "polars.api.register_series_namespace": [[62, null]], "polars.approx_n_unique": [[786, null]], "polars.arange": [[787, null]], "polars.arctan2": [[788, null]], "polars.arctan2d": [[789, null]], "polars.arg_sort_by": [[790, null]], "polars.arg_where": [[791, null]], "polars.build_info": [[63, null]], "polars.business_day_count": [[792, null]], "polars.catalog.unity.CatalogInfo": [[197, null]], "polars.catalog.unity.ColumnInfo": [[198, null]], "polars.catalog.unity.DataSourceFormat": [[199, null]], "polars.catalog.unity.NamespaceInfo": [[200, null]], "polars.catalog.unity.TableInfo": [[201, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[202, null]], "polars.catalog.unity.TableType": [[203, null]], "polars.coalesce": [[793, null]], "polars.col": [[864, null]], "polars.collect_all": [[64, null]], "polars.collect_all_async": [[65, null]], "polars.concat": [[66, null]], "polars.concat_arr": [[794, null]], "polars.concat_list": [[795, null]], "polars.concat_str": [[796, null]], "polars.corr": [[797, null]], "polars.count": [[798, null]], "polars.cov": [[799, null]], "polars.cum_count": [[800, null]], "polars.cum_fold": [[801, null]], "polars.cum_reduce": [[802, null]], "polars.cum_sum": [[803, null]], "polars.cum_sum_horizontal": [[804, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[334, null]], "polars.dataframe.group_by.GroupBy.agg": [[335, null]], "polars.dataframe.group_by.GroupBy.all": [[336, null]], "polars.dataframe.group_by.GroupBy.count": [[337, null]], "polars.dataframe.group_by.GroupBy.first": [[338, null]], "polars.dataframe.group_by.GroupBy.head": [[339, null]], "polars.dataframe.group_by.GroupBy.last": [[340, null]], "polars.dataframe.group_by.GroupBy.len": [[341, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[342, null]], "polars.dataframe.group_by.GroupBy.max": [[343, null]], "polars.dataframe.group_by.GroupBy.mean": [[344, null]], "polars.dataframe.group_by.GroupBy.median": [[345, null]], "polars.dataframe.group_by.GroupBy.min": [[346, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[347, null]], "polars.dataframe.group_by.GroupBy.quantile": [[348, null]], "polars.dataframe.group_by.GroupBy.sum": [[349, null]], "polars.dataframe.group_by.GroupBy.tail": [[350, null]], "polars.datatypes.Array": [[67, null]], "polars.datatypes.Binary": [[68, null]], "polars.datatypes.Boolean": [[69, null]], "polars.datatypes.Categorical": [[70, null]], "polars.datatypes.DataType": [[71, null]], "polars.datatypes.Date": [[72, null]], "polars.datatypes.Datetime": [[73, null]], "polars.datatypes.Decimal": [[74, null]], "polars.datatypes.Duration": [[75, null]], "polars.datatypes.Enum": [[76, null]], "polars.datatypes.Field": [[77, null]], "polars.datatypes.Float32": [[78, null]], "polars.datatypes.Float64": [[79, null]], "polars.datatypes.Int128": [[80, null]], "polars.datatypes.Int16": [[81, null]], "polars.datatypes.Int32": [[82, null]], "polars.datatypes.Int64": [[83, null]], "polars.datatypes.Int8": [[84, null]], "polars.datatypes.List": [[85, null]], "polars.datatypes.Null": [[86, null]], "polars.datatypes.Object": [[87, null]], "polars.datatypes.String": [[88, null]], "polars.datatypes.Struct": [[89, null]], "polars.datatypes.Time": [[90, null]], "polars.datatypes.UInt16": [[91, null]], "polars.datatypes.UInt32": [[92, null]], "polars.datatypes.UInt64": [[93, null]], "polars.datatypes.UInt8": [[94, null]], "polars.datatypes.Unknown": [[95, null]], "polars.datatypes.Utf8": [[96, null]], "polars.date": [[805, null]], "polars.date_range": [[806, null]], "polars.date_ranges": [[807, null]], "polars.datetime": [[808, null]], "polars.datetime_range": [[809, null]], "polars.datetime_ranges": [[810, null]], "polars.defer": [[97, null]], "polars.disable_string_cache": [[98, null]], "polars.dtype_of": [[368, null]], "polars.duration": [[811, null]], "polars.element": [[812, null]], "polars.enable_string_cache": [[99, null]], "polars.escape_regex": [[100, null]], "polars.exceptions.CategoricalRemappingWarning": [[101, null]], "polars.exceptions.ChronoFormatWarning": [[102, null]], "polars.exceptions.ColumnNotFoundError": [[103, null]], "polars.exceptions.ComputeError": [[104, null]], "polars.exceptions.CustomUFuncWarning": [[105, null]], "polars.exceptions.DataOrientationWarning": [[106, null]], "polars.exceptions.DuplicateError": [[107, null]], "polars.exceptions.InvalidOperationError": [[108, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[109, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[110, null]], "polars.exceptions.NoDataError": [[111, null]], "polars.exceptions.NoRowsReturnedError": [[112, null]], "polars.exceptions.OutOfBoundsError": [[113, null]], "polars.exceptions.PanicException": [[114, null]], "polars.exceptions.ParameterCollisionError": [[115, null]], "polars.exceptions.PerformanceWarning": [[116, null]], "polars.exceptions.PolarsError": [[117, null]], "polars.exceptions.PolarsInefficientMapWarning": [[118, null]], "polars.exceptions.PolarsWarning": [[119, null]], "polars.exceptions.RowsError": [[120, null]], "polars.exceptions.SQLInterfaceError": [[121, null]], "polars.exceptions.SQLSyntaxError": [[122, null]], "polars.exceptions.SchemaError": [[123, null]], "polars.exceptions.SchemaFieldNotFoundError": [[124, null]], "polars.exceptions.ShapeError": [[125, null]], "polars.exceptions.StringCacheMismatchError": [[126, null]], "polars.exceptions.StructFieldNotFoundError": [[127, null]], "polars.exceptions.TooManyRowsReturnedError": [[128, null]], "polars.exceptions.UnstableWarning": [[129, null]], "polars.exceptions.UnsuitableSQLError": [[130, null]], "polars.exclude": [[813, null]], "polars.explain_all": [[131, null]], "polars.first": [[814, null]], "polars.fold": [[815, null]], "polars.format": [[816, null]], "polars.from_arrow": [[132, null]], "polars.from_dataframe": [[133, null]], "polars.from_dict": [[134, null]], "polars.from_dicts": [[135, null]], "polars.from_epoch": [[817, null]], "polars.from_numpy": [[136, null]], "polars.from_pandas": [[137, null]], "polars.from_records": [[138, null]], "polars.from_repr": [[139, null]], "polars.get_index_type": [[140, null]], "polars.groups": [[818, null]], "polars.head": [[819, null]], "polars.implode": [[820, null]], "polars.int_range": [[821, null]], "polars.int_ranges": [[822, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[141, null]], "polars.io.parquet.ParquetFieldOverwrites": [[142, null]], "polars.io.partition.BasePartitionContext": [[143, null]], "polars.io.partition.KeyedPartition": [[144, null]], "polars.io.partition.KeyedPartitionContext": [[145, null]], "polars.io.plugins.register_io_source": [[146, null]], "polars.json_normalize": [[147, null]], "polars.last": [[823, null]], "polars.lazyframe.engine_config.GPUEngine": [[963, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[964, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[965, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[966, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[967, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[968, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[969, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[970, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[971, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[972, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[973, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[974, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[975, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[976, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[977, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[978, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[979, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[980, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[981, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[982, null]], "polars.len": [[824, null]], "polars.linear_space": [[825, null]], "polars.linear_spaces": [[826, null]], "polars.lit": [[827, null]], "polars.map_batches": [[828, null]], "polars.map_groups": [[829, null]], "polars.max": [[830, null]], "polars.max_horizontal": [[831, null]], "polars.mean": [[832, null]], "polars.mean_horizontal": [[833, null]], "polars.median": [[834, null]], "polars.min": [[835, null]], "polars.min_horizontal": [[836, null]], "polars.n_unique": [[837, null]], "polars.nth": [[838, null]], "polars.ones": [[839, null]], "polars.plugins.register_plugin_function": [[148, null]], "polars.quantile": [[840, null]], "polars.read_avro": [[149, null]], "polars.read_clipboard": [[150, null]], "polars.read_csv": [[151, null]], "polars.read_csv_batched": [[152, null]], "polars.read_database": [[153, null]], "polars.read_database_uri": [[154, null]], "polars.read_delta": [[155, null]], "polars.read_excel": [[156, null]], "polars.read_ipc": [[157, null]], "polars.read_ipc_schema": [[158, null]], "polars.read_ipc_stream": [[159, null]], "polars.read_json": [[160, null]], "polars.read_ndjson": [[161, null]], "polars.read_ods": [[162, null]], "polars.read_parquet": [[163, null]], "polars.read_parquet_metadata": [[164, null]], "polars.read_parquet_schema": [[165, null]], "polars.reduce": [[841, null]], "polars.repeat": [[842, null]], "polars.rolling_corr": [[843, null]], "polars.rolling_cov": [[844, null]], "polars.row_index": [[845, null]], "polars.scan_csv": [[166, null]], "polars.scan_delta": [[167, null]], "polars.scan_iceberg": [[168, null]], "polars.scan_ipc": [[169, null]], "polars.scan_ndjson": [[170, null]], "polars.scan_parquet": [[171, null]], "polars.scan_pyarrow_dataset": [[172, null]], "polars.select": [[846, null]], "polars.self_dtype": [[369, null]], "polars.set_random_seed": [[173, null]], "polars.show_versions": [[174, null]], "polars.sql": [[847, null]], "polars.sql_expr": [[848, null]], "polars.std": [[849, null]], "polars.struct": [[850, null]], "polars.sum": [[851, null]], "polars.sum_horizontal": [[852, null]], "polars.tail": [[853, null]], "polars.testing.assert_frame_equal": [[175, null]], "polars.testing.assert_frame_not_equal": [[176, null]], "polars.testing.assert_series_equal": [[177, null]], "polars.testing.assert_series_not_equal": [[178, null]], "polars.testing.parametric.column": [[179, null]], "polars.testing.parametric.columns": [[180, null]], "polars.testing.parametric.create_list_strategy": [[181, null]], "polars.testing.parametric.dataframes": [[182, null]], "polars.testing.parametric.dtypes": [[183, null]], "polars.testing.parametric.lists": [[184, null]], "polars.testing.parametric.load_profile": [[185, null]], "polars.testing.parametric.series": [[186, null]], "polars.testing.parametric.set_profile": [[187, null]], "polars.thread_pool_size": [[188, null]], "polars.threadpool_size": [[189, null]], "polars.time": [[854, null]], "polars.time_range": [[855, null]], "polars.time_ranges": [[856, null]], "polars.using_string_cache": [[190, null]], "polars.var": [[857, null]], "polars.when": [[858, null]], "polars.zeros": [[859, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_default_credential_provider", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.ScanCastOptions", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.parquet.ParquetFieldOverwrites", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_metadata", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.__setitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_columns", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.match_to_schema", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatype_expr/api/polars.DataType.to_dtype_expr", "reference/datatype_expr/api/polars.DataTypeExpr.arr.inner_dtype", "reference/datatype_expr/api/polars.DataTypeExpr.arr.shape", "reference/datatype_expr/api/polars.DataTypeExpr.arr.width", "reference/datatype_expr/api/polars.DataTypeExpr.list.inner_dtype", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_dtype", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_names", "reference/datatype_expr/api/polars.dtype_of", "reference/datatype_expr/api/polars.self_dtype", "reference/datatype_expr/dt_array", "reference/datatype_expr/dt_functions", "reference/datatype_expr/dt_list", "reference/datatype_expr/dt_struct", "reference/datatype_expr/index", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.len", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_close", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.filter", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.row_index", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.__getitem__", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.match_to_schema", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.pipe_with_schema", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.QueryOptFlags", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.len", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.bottom_k_by", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_close", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.filter", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.repeat_by", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_max_by", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_mean_by", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_median_by", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_min_by", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_quantile_by", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_std_by", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_sum_by", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.rolling_var_by", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.top_k_by", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_default_credential_provider.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.ScanCastOptions.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.parquet.ParquetFieldOverwrites.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_metadata.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.__setitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_columns.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.match_to_schema.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatype_expr/api/polars.DataType.to_dtype_expr.rst", "reference/datatype_expr/api/polars.DataTypeExpr.arr.inner_dtype.rst", "reference/datatype_expr/api/polars.DataTypeExpr.arr.shape.rst", "reference/datatype_expr/api/polars.DataTypeExpr.arr.width.rst", "reference/datatype_expr/api/polars.DataTypeExpr.list.inner_dtype.rst", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_dtype.rst", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_names.rst", "reference/datatype_expr/api/polars.dtype_of.rst", "reference/datatype_expr/api/polars.self_dtype.rst", "reference/datatype_expr/dt_array.rst", "reference/datatype_expr/dt_functions.rst", "reference/datatype_expr/dt_list.rst", "reference/datatype_expr/dt_struct.rst", "reference/datatype_expr/index.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.len.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_close.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.filter.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.row_index.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.__getitem__.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.match_to_schema.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.pipe_with_schema.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.QueryOptFlags.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.len.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.bottom_k_by.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_close.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.filter.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.repeat_by.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_max_by.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_mean_by.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_median_by.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_min_by.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_quantile_by.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_std_by.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_sum_by.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.rolling_var_by.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.top_k_by.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[208, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[996, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[209, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[997, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[210, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1429, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1429, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[211, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.lazyframe method)": [[883, "polars.LazyFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[998, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[191, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[197, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[198, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[200, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[201, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[33, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[34, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[35, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[36, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[67, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[68, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[69, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[70, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[71, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[72, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[73, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[74, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[75, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[76, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[77, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[78, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[79, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[80, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[81, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[82, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[83, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[84, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[85, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[86, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[87, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[88, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[89, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[90, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[91, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[92, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[93, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[94, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[95, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.parquet.parquetfieldoverwrites method)": [[142, "polars.io.parquet.ParquetFieldOverwrites.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[143, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[144, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[145, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[963, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[53, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[54, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[55, "polars.PartitionParted.__init__", false]], "__init__() (polars.queryoptflags method)": [[962, "polars.QueryOptFlags.__init__", false]], "__init__() (polars.scancastoptions method)": [[56, "polars.ScanCastOptions.__init__", false]], "__init__() (polars.sqlcontext method)": [[1429, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[57, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[179, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.__iter__", false]], "__setitem__() (polars.dataframe method)": [[212, "polars.DataFrame.__setitem__", false]], "abs() (polars.expr method)": [[378, "polars.Expr.abs", false]], "abs() (polars.series method)": [[999, "polars.Series.abs", false]], "add() (polars.expr method)": [[379, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[469, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1091, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[964, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[380, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[381, "polars.Expr.alias", false]], "alias() (polars.series method)": [[1000, "polars.Series.alias", false]], "align_frames() (in module polars)": [[58, "polars.align_frames", false]], "all() (in module polars)": [[782, "polars.all", false]], "all() (in module polars.selectors)": [[994, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[382, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[398, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[567, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[965, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[1001, "polars.Series.all", false]], "all() (polars.series.arr method)": [[1016, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1197, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[783, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[994, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[994, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[383, "polars.Expr.and_", false]], "any() (in module polars)": [[784, "polars.any", false]], "any() (polars.expr method)": [[384, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[399, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[568, "polars.Expr.list.any", false]], "any() (polars.series method)": [[1002, "polars.Series.any", false]], "any() (polars.series.arr method)": [[1017, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1198, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[785, "polars.any_horizontal", false]], "append() (polars.expr method)": [[385, "polars.Expr.append", false]], "append() (polars.series method)": [[1003, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[786, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[213, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[386, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[884, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[1004, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[787, "polars.arange", false]], "arccos() (polars.expr method)": [[387, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[1005, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[388, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[1006, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[389, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[1007, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[390, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[1008, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[391, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[1009, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[788, "polars.arctan2", false]], "arctan2d() (in module polars)": [[789, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[392, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[1010, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[393, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[400, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[569, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[1011, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[1018, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1199, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[394, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[401, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[570, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[1012, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[1019, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1200, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[395, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[1013, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[790, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[396, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[1014, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[397, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[1015, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[791, "polars.arg_where", false]], "array (class in polars.datatypes)": [[67, "polars.datatypes.Array", false]], "array() (in module polars.selectors)": [[994, "polars.selectors.array", false]], "as_expr() (polars.selectors.selector method)": [[994, "polars.selectors.Selector.as_expr", false]], "assert_frame_equal() (in module polars.testing)": [[175, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[176, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[177, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[178, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[424, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1041, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[470, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1092, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[143, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[68, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[994, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[432, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1049, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[433, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1050, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[434, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1051, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[435, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1052, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[436, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1053, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[437, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1054, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[438, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1055, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[439, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1056, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[440, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1057, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[69, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[994, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[214, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[441, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[885, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1058, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[442, "polars.Expr.bottom_k_by", false]], "bottom_k_by() (polars.series method)": [[1059, "polars.Series.bottom_k_by", false]], "build_info() (in module polars)": [[63, "polars.build_info", false]], "business_day_count() (in module polars)": [[792, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[994, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[994, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[994, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[886, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[980, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[215, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[443, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[887, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1060, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[471, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1093, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[191, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[197, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[70, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[994, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[101, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[449, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1069, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[450, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1070, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[472, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1094, "polars.Series.dt.century", false]], "chronoformatwarning": [[102, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1071, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[216, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[888, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1072, "polars.Series.clear", false]], "clip() (polars.expr method)": [[451, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1073, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[217, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[889, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1074, "polars.Series.clone", false]], "coalesce() (in module polars)": [[793, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[890, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[64, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[65, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[891, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[218, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[892, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[179, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[198, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[103, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[219, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[893, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[180, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[473, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1095, "polars.Series.dt.combine", false]], "computeerror": [[104, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[66, "polars.concat", false]], "concat() (polars.expr.list method)": [[571, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[712, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1201, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1316, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[794, "polars.concat_arr", false]], "concat_list() (in module polars)": [[795, "polars.concat_list", false]], "concat_str() (in module polars)": [[796, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[994, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[402, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[425, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[572, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[713, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[1020, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1042, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1202, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1317, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[714, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1318, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[474, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1096, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[797, "polars.corr", false]], "corr() (polars.dataframe method)": [[220, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[452, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1075, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[453, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1076, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[454, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1077, "polars.Series.cot", false]], "count() (in module polars)": [[798, "polars.count", false]], "count() (polars.dataframe method)": [[221, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[455, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[894, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[966, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1078, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[403, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[573, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[715, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[1021, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1203, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1319, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[799, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[33, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[34, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[35, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[36, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[800, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[456, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1079, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[801, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[457, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1080, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[458, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1081, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[459, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1082, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[802, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[803, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[460, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1083, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[804, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[461, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1084, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[105, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[462, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1085, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[106, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[199, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[71, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[72, "polars.datatypes.Date", false]], "date() (in module polars)": [[805, "polars.date", false]], "date() (in module polars.selectors)": [[994, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[475, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1097, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[806, "polars.date_range", false]], "date_ranges() (in module polars)": [[807, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[73, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[808, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[994, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[476, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1098, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[809, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[810, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[477, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1099, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[74, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[994, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[426, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[716, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1043, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1320, "polars.Series.str.decode", false]], "defer() (in module polars)": [[97, "polars.defer", false]], "degrees() (polars.expr method)": [[463, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[222, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[895, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1086, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[223, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[464, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[896, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[465, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[574, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1087, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1204, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[994, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[98, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[466, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1088, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[224, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[897, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[225, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[226, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[467, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[898, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1089, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[227, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[468, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[575, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[899, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1090, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1205, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[478, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1100, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1141, "polars.Series.dtype", false]], "dtype_of() (in module polars)": [[368, "polars.dtype_of", false]], "dtypes (polars.dataframe property)": [[228, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[900, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[107, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[75, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[811, "polars.duration", false]], "duration() (in module polars.selectors)": [[994, "polars.selectors.duration", false]], "element() (in module polars)": [[812, "polars.element", false]], "enable_string_cache() (in module polars)": [[99, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[427, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[717, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1044, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1321, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[994, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[428, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[444, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[718, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1045, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1061, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1322, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[515, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1142, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[76, "polars.datatypes.Enum", false]], "enum() (in module polars.selectors)": [[994, "polars.selectors.enum", false]], "epoch() (polars.expr.dt method)": [[479, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1101, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[516, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[618, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1143, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[517, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1144, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[229, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1145, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[100, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[719, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1323, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[230, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1146, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[576, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1206, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[518, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1147, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[519, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1148, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[520, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1149, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[521, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1150, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[813, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[994, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[522, "polars.Expr.exclude", false]], "exclude() (polars.selectors.selector method)": [[994, "polars.selectors.Selector.exclude", false]], "execute() (polars.sqlcontext method)": [[1410, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1411, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[523, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1151, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[994, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[901, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[131, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[231, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[524, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[404, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[577, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[720, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[902, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1152, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[1022, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1207, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1324, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[232, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1153, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[525, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1154, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[721, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1325, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[722, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1326, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[723, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1327, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[724, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1328, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[981, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[982, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[77, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[761, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1365, "polars.Series.struct.field", false]], "field_dtype() (polars.datatypeexpr.struct method)": [[366, "polars.DataTypeExpr.struct.field_dtype", false]], "field_names() (polars.datatypeexpr.struct method)": [[367, "polars.DataTypeExpr.struct.field_names", false]], "fields (polars.series.struct attribute)": [[1366, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[233, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[526, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[903, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1155, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[234, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[527, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[904, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1156, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[235, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[528, "polars.Expr.filter", false]], "filter() (polars.expr.list method)": [[578, "polars.Expr.list.filter", false]], "filter() (polars.lazyframe method)": [[905, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1157, "polars.Series.filter", false]], "filter() (polars.series.list method)": [[1208, "polars.Series.list.filter", false]], "find() (polars.expr.str method)": [[725, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1329, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[726, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1330, "polars.Series.str.find_many", false]], "first() (in module polars)": [[814, "polars.first", false]], "first() (in module polars.selectors)": [[994, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[529, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[405, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[579, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[906, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[967, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1158, "polars.Series.first", false]], "first() (polars.series.arr method)": [[1023, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1209, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[236, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1159, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[530, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[994, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[78, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[79, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[531, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1160, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[532, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[815, "polars.fold", false]], "fold() (polars.dataframe method)": [[237, "polars.DataFrame.fold", false]], "format() (in module polars)": [[816, "polars.format", false]], "forward_fill() (polars.expr method)": [[533, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1161, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[132, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[133, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[134, "polars.from_dict", false]], "from_dicts() (in module polars)": [[135, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[817, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[534, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[136, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[137, "polars.from_pandas", false]], "from_records() (in module polars)": [[138, "polars.from_records", false]], "from_repr() (in module polars)": [[139, "polars.from_repr", false]], "gather() (polars.expr method)": [[535, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[580, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1162, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1210, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[238, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[536, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[581, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[907, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1163, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1211, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[537, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1164, "polars.Series.ge", false]], "get() (polars.expr method)": [[538, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[406, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[582, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[1024, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1212, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[445, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1062, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1165, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[239, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[240, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[241, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[140, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[202, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[192, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[242, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[963, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[243, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[908, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[244, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[909, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[818, "polars.groups", false]], "gt() (polars.expr method)": [[539, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1166, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[619, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[540, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1167, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1168, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[541, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1169, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[245, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[819, "polars.head", false]], "head() (polars.dataframe method)": [[246, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[542, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[583, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[727, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[910, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[968, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1170, "polars.Series.head", false]], "head() (polars.series.list method)": [[1213, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1331, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[247, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[543, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1171, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[480, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1102, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[248, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[820, "polars.implode", false]], "implode() (polars.expr method)": [[544, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1172, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[545, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1173, "polars.Series.index_of", false]], "inner_dtype() (polars.datatypeexpr.arr method)": [[362, "polars.DataTypeExpr.arr.inner_dtype", false]], "inner_dtype() (polars.datatypeexpr.list method)": [[365, "polars.DataTypeExpr.list.inner_dtype", false]], "insert_column() (polars.dataframe method)": [[249, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[546, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[911, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[80, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[81, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[82, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[83, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[84, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[821, "polars.int_range", false]], "int_ranges() (in module polars)": [[822, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[994, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[250, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[547, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[912, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1174, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[548, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1175, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[108, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[549, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1176, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[481, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1103, "polars.Series.dt.is_business_day", false]], "is_close() (polars.expr method)": [[550, "polars.Expr.is_close", false]], "is_close() (polars.series method)": [[1177, "polars.Series.is_close", false]], "is_column() (polars.expr.meta method)": [[620, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[621, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[251, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[551, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1178, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[252, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1179, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[552, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1180, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[553, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1181, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[554, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1182, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[555, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1183, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[556, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1184, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[482, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1104, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[622, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1063, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[557, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1185, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[558, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1186, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[559, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1187, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[560, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1188, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[623, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[994, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1189, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[253, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[561, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1190, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[483, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1105, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[254, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1191, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[255, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[256, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[257, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[258, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[407, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[584, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[728, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[913, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[1025, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1214, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1332, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[259, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[914, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[260, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[915, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[729, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1333, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[762, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1367, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[147, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[730, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1334, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[638, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[144, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[145, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[562, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1192, "polars.Series.kurtosis", false]], "last() (in module polars)": [[823, "polars.last", false]], "last() (in module polars.selectors)": [[994, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[563, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[408, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[585, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[916, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[969, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1193, "polars.Series.last", false]], "last() (polars.series.arr method)": [[1026, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1215, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[261, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[917, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[564, "polars.Expr.le", false]], "le() (polars.series method)": [[1194, "polars.Series.le", false]], "len() (in module polars)": [[824, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[565, "polars.Expr.len", false]], "len() (polars.expr.arr method)": [[409, "polars.Expr.arr.len", false]], "len() (polars.expr.list method)": [[586, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[970, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1195, "polars.Series.len", false]], "len() (polars.series.arr method)": [[1027, "polars.Series.arr.len", false]], "len() (polars.series.list method)": [[1216, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[446, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[731, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1064, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1335, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[447, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[732, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1065, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1336, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[262, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[566, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[918, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1196, "polars.Series.limit", false]], "linear_space() (in module polars)": [[825, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[826, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[85, "polars.datatypes.List", false]], "list() (in module polars.selectors)": [[994, "polars.selectors.list", false]], "list_catalogs() (polars.catalog method)": [[193, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[194, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[195, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[184, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[827, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[185, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[608, "polars.Expr.log", false]], "log() (polars.series method)": [[1238, "polars.Series.log", false]], "log10() (polars.expr method)": [[609, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1239, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[610, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1240, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[611, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1241, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[612, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1242, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[639, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[828, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[613, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[919, "polars.LazyFrame.map_batches", false]], "map_columns() (polars.dataframe method)": [[263, "polars.DataFrame.map_columns", false]], "map_elements() (polars.expr method)": [[614, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1243, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[640, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[829, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[971, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[264, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[109, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "match_to_schema() (polars.dataframe method)": [[265, "polars.DataFrame.match_to_schema", false]], "match_to_schema() (polars.lazyframe method)": [[920, "polars.LazyFrame.match_to_schema", false]], "matches() (in module polars.selectors)": [[994, "polars.selectors.matches", false]], "max() (in module polars)": [[830, "polars.max", false]], "max() (polars.dataframe method)": [[266, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[615, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[410, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[587, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[921, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[972, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1244, "polars.Series.max", false]], "max() (polars.series.arr method)": [[1028, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1106, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1217, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[831, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[267, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[832, "polars.mean", false]], "mean() (polars.dataframe method)": [[268, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[344, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[616, "polars.Expr.mean", false]], "mean() (polars.expr.arr method)": [[411, "polars.Expr.arr.mean", false]], "mean() (polars.expr.list method)": [[588, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[922, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[973, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1245, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1107, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1218, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[833, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[269, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[834, "polars.median", false]], "median() (polars.dataframe method)": [[270, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[345, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[617, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[412, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[589, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[923, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[974, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1246, "polars.Series.median", false]], "median() (polars.series.arr method)": [[1029, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1108, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1219, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[271, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[924, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[272, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[925, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[484, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1109, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[485, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1110, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[486, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1111, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[835, "polars.min", false]], "min() (polars.dataframe method)": [[273, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[346, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[633, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[413, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[590, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[926, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[975, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1247, "polars.Series.min", false]], "min() (polars.series.arr method)": [[1030, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1112, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1220, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[836, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[274, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[487, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1113, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[634, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[635, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1248, "polars.Series.mode", false]], "module": [[994, "module-polars.selectors", false]], "moduleupgraderequirederror": [[110, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[488, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1114, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[489, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1115, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[490, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1116, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[636, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[275, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1249, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[837, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[276, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[347, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[637, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[414, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[591, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[976, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1250, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1031, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1221, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1251, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[200, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[647, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1252, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[648, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1253, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[491, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1117, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[649, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[624, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1254, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[650, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1255, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[651, "polars.Expr.neg", false]], "nested() (in module polars.selectors)": [[994, "polars.selectors.nested", false]], "new_from_index() (polars.series method)": [[1256, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[141, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[111, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[733, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1337, "polars.Series.str.normalize", false]], "norowsreturnederror": [[112, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[652, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1257, "polars.Series.not_", false]], "nth() (in module polars)": [[838, "polars.nth", false]], "null (class in polars.datatypes)": [[86, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[277, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[653, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[927, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1258, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[994, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[87, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[492, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1118, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[839, "polars.ones", false]], "or_() (polars.expr method)": [[654, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[493, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1119, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[113, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[625, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[655, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[734, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1338, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[735, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1339, "polars.Series.str.pad_start", false]], "panicexception": [[114, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[115, "polars.exceptions.ParameterCollisionError", false]], "parquetfieldoverwrites (class in polars.io.parquet)": [[142, "polars.io.parquet.ParquetFieldOverwrites", false]], "partition_by() (polars.dataframe method)": [[278, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[53, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[54, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[55, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[656, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1259, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[657, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1260, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[658, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1261, "polars.Series.peak_min", false]], "performancewarning": [[116, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[279, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[659, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[928, "polars.LazyFrame.pipe", false]], "pipe_with_schema() (polars.lazyframe method)": [[929, "polars.LazyFrame.pipe_with_schema", false]], "pivot() (polars.dataframe method)": [[280, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[359, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1406, "polars.Series.plot", false]], "polars.selectors": [[994, "module-polars.selectors", false]], "polarserror": [[117, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[118, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[119, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[626, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[660, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1262, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[641, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[642, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[281, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[661, "polars.Expr.product", false]], "product() (polars.series method)": [[1263, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[930, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[662, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1264, "polars.Series.qcut", false]], "quantile() (in module polars)": [[840, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[282, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[348, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[663, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[931, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[977, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1265, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[494, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1120, "polars.Series.dt.quarter", false]], "queryoptflags (class in polars)": [[962, "polars.QueryOptFlags", false]], "radians() (polars.expr method)": [[664, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[665, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1266, "polars.Series.rank", false]], "read_avro() (in module polars)": [[149, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[150, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[151, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[152, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[153, "polars.read_database", false]], "read_database_uri() (in module polars)": [[154, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[155, "polars.read_delta", false]], "read_excel() (in module polars)": [[156, "polars.read_excel", false]], "read_ipc() (in module polars)": [[157, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[158, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[159, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[160, "polars.read_json", false]], "read_ndjson() (in module polars)": [[161, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[162, "polars.read_ods", false]], "read_parquet() (in module polars)": [[163, "polars.read_parquet", false]], "read_parquet_metadata() (in module polars)": [[164, "polars.read_parquet_metadata", false]], "read_parquet_schema() (in module polars)": [[165, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[283, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[666, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1267, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[841, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1412, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[59, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[60, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1413, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[146, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[61, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1414, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[148, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[62, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[667, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[429, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1268, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1046, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[932, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[284, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[933, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[285, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[934, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1269, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[763, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1368, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[842, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[668, "polars.Expr.repeat_by", false]], "repeat_by() (polars.series method)": [[1270, "polars.Series.repeat_by", false]], "replace() (polars.expr method)": [[669, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[495, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[736, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1271, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1121, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1340, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[737, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1341, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[286, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[738, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1342, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[670, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1272, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[496, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1122, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[671, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1273, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[287, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[672, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[415, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[592, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[739, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[935, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1274, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1032, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1222, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1343, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[673, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1275, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[674, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1276, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[288, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[675, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[936, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[843, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[844, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[676, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1277, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[677, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1278, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[678, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1279, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[679, "polars.Expr.rolling_max_by", false]], "rolling_max_by() (polars.series method)": [[1280, "polars.Series.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[680, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1281, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[681, "polars.Expr.rolling_mean_by", false]], "rolling_mean_by() (polars.series method)": [[1282, "polars.Series.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[682, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1283, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[683, "polars.Expr.rolling_median_by", false]], "rolling_median_by() (polars.series method)": [[1284, "polars.Series.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[684, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1285, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[685, "polars.Expr.rolling_min_by", false]], "rolling_min_by() (polars.series method)": [[1286, "polars.Series.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[686, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1287, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[687, "polars.Expr.rolling_quantile_by", false]], "rolling_quantile_by() (polars.series method)": [[1288, "polars.Series.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[688, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1289, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[689, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1290, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[690, "polars.Expr.rolling_std_by", false]], "rolling_std_by() (polars.series method)": [[1291, "polars.Series.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[691, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1292, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[692, "polars.Expr.rolling_sum_by", false]], "rolling_sum_by() (polars.series method)": [[1293, "polars.Series.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[693, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1294, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[694, "polars.Expr.rolling_var_by", false]], "rolling_var_by() (polars.series method)": [[1295, "polars.Series.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[627, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[695, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[497, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1296, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1123, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[696, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1297, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[289, "polars.DataFrame.row", false]], "row_index() (in module polars)": [[845, "polars.row_index", false]], "rows() (polars.dataframe method)": [[290, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[291, "polars.DataFrame.rows_by_key", false]], "rowserror": [[120, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[292, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[697, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[593, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1298, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1223, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[166, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[167, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[168, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[169, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[170, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[171, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[172, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[196, "polars.Catalog.scan_table", false]], "scancastoptions (class in polars)": [[56, "polars.ScanCastOptions", false]], "scatter() (polars.series method)": [[1299, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[293, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[937, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1369, "polars.Series.struct.schema", false]], "schemaerror": [[123, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[124, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[698, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1300, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[498, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1124, "polars.Series.dt.second", false]], "select() (in module polars)": [[846, "polars.select", false]], "select() (polars.dataframe method)": [[294, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[938, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[295, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[939, "polars.LazyFrame.select_seq", false]], "selector (class in polars.selectors)": [[994, "polars.selectors.Selector", false]], "self_dtype() (in module polars)": [[369, "polars.self_dtype", false]], "serialize() (polars.dataframe method)": [[296, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[628, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[940, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[186, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1301, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_default_credential_provider() (polars.config class method)": [[10, "polars.Config.set_default_credential_provider", false]], "set_difference() (polars.expr.list method)": [[594, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1224, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[11, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[12, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[13, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[14, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[15, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[595, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1225, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[187, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[173, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[297, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[699, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[941, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1302, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[16, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[596, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1226, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[18, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[19, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[20, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[21, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[22, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[27, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[28, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[29, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[30, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[597, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1227, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[31, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[298, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1303, "polars.Series.shape", false]], "shape() (polars.datatypeexpr.arr method)": [[363, "polars.DataTypeExpr.arr.shape", false]], "shapeerror": [[125, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[299, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[700, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[416, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[598, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[942, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1304, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1033, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1228, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[629, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[943, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[174, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[701, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1305, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[300, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1306, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[702, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1307, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[703, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1308, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[994, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[704, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1309, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[705, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1310, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[430, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1047, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[706, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1311, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[301, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[707, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[599, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[740, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[944, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1312, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1229, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1344, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[302, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[708, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[417, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[600, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[945, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1313, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1034, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1230, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[709, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[741, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1345, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[742, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1346, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[743, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1347, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[847, "polars.sql", false]], "sql() (polars.dataframe method)": [[303, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[946, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[848, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1429, "polars.SQLContext", false]], "sqlinterfaceerror": [[121, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[122, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[710, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1314, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[994, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[431, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[448, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[744, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1048, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1066, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1348, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[32, "polars.Config.state", false]], "std() (in module polars)": [[849, "polars.std", false]], "std() (polars.dataframe method)": [[304, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[711, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[418, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[601, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[947, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1315, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1035, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1231, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[499, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1125, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[88, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[994, "polars.selectors.string", false]], "stringcache (class in polars)": [[57, "polars.StringCache", false]], "stringcachemismatcherror": [[126, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[745, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1349, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[746, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1350, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[747, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1351, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[748, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1352, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[749, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1353, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[750, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1354, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[89, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[850, "polars.struct", false]], "struct() (in module polars.selectors)": [[994, "polars.selectors.struct", false]], "structfieldnotfounderror": [[127, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[360, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[766, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[643, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[644, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[851, "polars.sum", false]], "sum() (polars.dataframe method)": [[305, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[349, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[767, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[419, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[602, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[948, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[978, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1371, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1036, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1232, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[852, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[306, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[201, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1415, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[203, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[853, "polars.tail", false]], "tail() (polars.dataframe method)": [[307, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[350, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[768, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[603, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[751, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[949, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[979, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1372, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1233, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1355, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[769, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1373, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[770, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1374, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[994, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[188, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[189, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[90, "polars.datatypes.Time", false]], "time() (in module polars)": [[854, "polars.time", false]], "time() (in module polars.selectors)": [[994, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[500, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1126, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[855, "polars.time_range", false]], "time_ranges() (in module polars)": [[856, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[501, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1127, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[604, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1234, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[308, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1375, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[752, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1356, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[753, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1357, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[754, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1358, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[309, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[310, "polars.DataFrame.to_dicts", false]], "to_dtype_expr() (polars.datatype method)": [[361, "polars.DataType.to_dtype_expr", false]], "to_dummies() (polars.dataframe method)": [[311, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1376, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1377, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[312, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1378, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[755, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1359, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[313, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1379, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[420, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1380, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1037, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1067, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[645, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[756, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1360, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[314, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1381, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[315, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1382, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[771, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1383, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[316, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[502, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1128, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[317, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[421, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[605, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1038, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1235, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[757, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1361, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[758, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1362, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[318, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1384, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[646, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[759, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1363, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[128, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[319, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[772, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[950, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1385, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[773, "polars.Expr.top_k_by", false]], "top_k_by() (polars.series method)": [[1386, "polars.Series.top_k_by", false]], "total_days() (polars.expr.dt method)": [[503, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1129, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[504, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1130, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[505, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1131, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[506, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1132, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[507, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1133, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[508, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1134, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[509, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1135, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[320, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[630, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[774, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[510, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1136, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[91, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[92, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[93, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[94, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[631, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[321, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[775, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[422, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[606, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[951, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1387, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1039, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1236, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[776, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1388, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[95, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[322, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[764, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[952, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1370, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[323, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[953, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1416, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[994, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[129, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[324, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[130, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[325, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[954, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[777, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1389, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[326, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1068, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[190, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[96, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[778, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1390, "polars.Series.value_counts", false]], "var() (in module polars)": [[857, "polars.var", false]], "var() (polars.dataframe method)": [[327, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[779, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[423, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[607, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[955, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1391, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1040, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1237, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[328, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[511, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1137, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[512, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1138, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[858, "polars.when", false]], "where() (polars.expr method)": [[780, "polars.Expr.where", false]], "width (polars.dataframe property)": [[329, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[956, "polars.LazyFrame.width", false]], "width() (polars.datatypeexpr.arr method)": [[364, "polars.DataTypeExpr.arr.width", false]], "with_columns() (polars.dataframe method)": [[330, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[957, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[331, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[958, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[959, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[765, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[332, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[960, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[333, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[961, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[513, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1139, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[37, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[38, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[39, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[40, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[41, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[42, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[43, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[45, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[46, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[632, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[47, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[48, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[781, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[514, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1140, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[859, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[760, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1364, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1392, "polars.Series.zip_with", false]]}, "objects": {"polars": [[191, 0, 1, "", "Catalog"], [33, 0, 1, "", "CredentialProvider"], [34, 0, 1, "", "CredentialProviderAWS"], [35, 0, 1, "", "CredentialProviderAzure"], [36, 0, 1, "", "CredentialProviderGCP"], [53, 0, 1, "", "PartitionByKey"], [54, 0, 1, "", "PartitionMaxSize"], [55, 0, 1, "", "PartitionParted"], [962, 0, 1, "", "QueryOptFlags"], [1429, 0, 1, "", "SQLContext"], [56, 0, 1, "", "ScanCastOptions"], [57, 0, 1, "", "StringCache"], [58, 4, 1, "", "align_frames"], [782, 4, 1, "", "all"], [783, 4, 1, "", "all_horizontal"], [784, 4, 1, "", "any"], [785, 4, 1, "", "any_horizontal"], [786, 4, 1, "", "approx_n_unique"], [787, 4, 1, "", "arange"], [788, 4, 1, "", "arctan2"], [789, 4, 1, "", "arctan2d"], [790, 4, 1, "", "arg_sort_by"], [791, 4, 1, "", "arg_where"], [63, 4, 1, "", "build_info"], [792, 4, 1, "", "business_day_count"], [793, 4, 1, "", "coalesce"], [64, 4, 1, "", "collect_all"], [65, 4, 1, "", "collect_all_async"], [66, 4, 1, "", "concat"], [794, 4, 1, "", "concat_arr"], [795, 4, 1, "", "concat_list"], [796, 4, 1, "", "concat_str"], [797, 4, 1, "", "corr"], [798, 4, 1, "", "count"], [799, 4, 1, "", "cov"], [800, 4, 1, "", "cum_count"], [801, 4, 1, "", "cum_fold"], [802, 4, 1, "", "cum_reduce"], [803, 4, 1, "", "cum_sum"], [804, 4, 1, "", "cum_sum_horizontal"], [805, 4, 1, "", "date"], [806, 4, 1, "", "date_range"], [807, 4, 1, "", "date_ranges"], [808, 4, 1, "", "datetime"], [809, 4, 1, "", "datetime_range"], [810, 4, 1, "", "datetime_ranges"], [97, 4, 1, "", "defer"], [98, 4, 1, "", "disable_string_cache"], [368, 4, 1, "", "dtype_of"], [811, 4, 1, "", "duration"], [812, 4, 1, "", "element"], [99, 4, 1, "", "enable_string_cache"], [100, 4, 1, "", "escape_regex"], [813, 4, 1, "", "exclude"], [131, 4, 1, "", "explain_all"], [814, 4, 1, "", "first"], [815, 4, 1, "", "fold"], [816, 4, 1, "", "format"], [132, 4, 1, "", "from_arrow"], [133, 4, 1, "", "from_dataframe"], [134, 4, 1, "", "from_dict"], [135, 4, 1, "", "from_dicts"], [817, 4, 1, "", "from_epoch"], [136, 4, 1, "", "from_numpy"], [137, 4, 1, "", "from_pandas"], [138, 4, 1, "", "from_records"], [139, 4, 1, "", "from_repr"], [140, 4, 1, "", "get_index_type"], [818, 4, 1, "", "groups"], [819, 4, 1, "", "head"], [820, 4, 1, "", "implode"], [821, 4, 1, "", "int_range"], [822, 4, 1, "", "int_ranges"], [147, 4, 1, "", "json_normalize"], [823, 4, 1, "", "last"], [824, 4, 1, "", "len"], [825, 4, 1, "", "linear_space"], [826, 4, 1, "", "linear_spaces"], [827, 4, 1, "", "lit"], [828, 4, 1, "", "map_batches"], [829, 4, 1, "", "map_groups"], [830, 4, 1, "", "max"], [831, 4, 1, "", "max_horizontal"], [832, 4, 1, "", "mean"], [833, 4, 1, "", "mean_horizontal"], [834, 4, 1, "", "median"], [835, 4, 1, "", "min"], [836, 4, 1, "", "min_horizontal"], [837, 4, 1, "", "n_unique"], [838, 4, 1, "", "nth"], [839, 4, 1, "", "ones"], [840, 4, 1, "", "quantile"], [149, 4, 1, "", "read_avro"], [150, 4, 1, "", "read_clipboard"], [151, 4, 1, "", "read_csv"], [152, 4, 1, "", "read_csv_batched"], [153, 4, 1, "", "read_database"], [154, 4, 1, "", "read_database_uri"], [155, 4, 1, "", "read_delta"], [156, 4, 1, "", "read_excel"], [157, 4, 1, "", "read_ipc"], [158, 4, 1, "", "read_ipc_schema"], [159, 4, 1, "", "read_ipc_stream"], [160, 4, 1, "", "read_json"], [161, 4, 1, "", "read_ndjson"], [162, 4, 1, "", "read_ods"], [163, 4, 1, "", "read_parquet"], [164, 4, 1, "", "read_parquet_metadata"], [165, 4, 1, "", "read_parquet_schema"], [841, 4, 1, "", "reduce"], [842, 4, 1, "", "repeat"], [843, 4, 1, "", "rolling_corr"], [844, 4, 1, "", "rolling_cov"], [845, 4, 1, "", "row_index"], [166, 4, 1, "", "scan_csv"], [167, 4, 1, "", "scan_delta"], [168, 4, 1, "", "scan_iceberg"], [169, 4, 1, "", "scan_ipc"], [170, 4, 1, "", "scan_ndjson"], [171, 4, 1, "", "scan_parquet"], [172, 4, 1, "", "scan_pyarrow_dataset"], [846, 4, 1, "", "select"], [994, 7, 0, "-", "selectors"], [369, 4, 1, "", "self_dtype"], [173, 4, 1, "", "set_random_seed"], [174, 4, 1, "", "show_versions"], [847, 4, 1, "", "sql"], [848, 4, 1, "", "sql_expr"], [849, 4, 1, "", "std"], [850, 4, 1, "", "struct"], [851, 4, 1, "", "sum"], [852, 4, 1, "", "sum_horizontal"], [853, 4, 1, "", "tail"], [188, 4, 1, "", "thread_pool_size"], [189, 4, 1, "", "threadpool_size"], [854, 4, 1, "", "time"], [855, 4, 1, "", "time_range"], [856, 4, 1, "", "time_ranges"], [190, 4, 1, "", "using_string_cache"], [857, 4, 1, "", "var"], [858, 4, 1, "", "when"], [859, 4, 1, "", "zeros"]], "polars.Catalog": [[191, 1, 1, "", "__init__"], [192, 1, 1, "", "get_table_info"], [193, 1, 1, "", "list_catalogs"], [194, 1, 1, "", "list_namespaces"], [195, 1, 1, "", "list_tables"], [196, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_default_credential_provider"], [11, 1, 1, "", "set_engine_affinity"], [12, 1, 1, "", "set_float_precision"], [13, 1, 1, "", "set_fmt_float"], [14, 1, 1, "", "set_fmt_str_lengths"], [15, 1, 1, "", "set_fmt_table_cell_list_len"], [16, 1, 1, "", "set_streaming_chunk_size"], [17, 1, 1, "", "set_tbl_cell_alignment"], [18, 1, 1, "", "set_tbl_cell_numeric_alignment"], [19, 1, 1, "", "set_tbl_cols"], [20, 1, 1, "", "set_tbl_column_data_type_inline"], [21, 1, 1, "", "set_tbl_dataframe_shape_below"], [22, 1, 1, "", "set_tbl_formatting"], [23, 1, 1, "", "set_tbl_hide_column_data_types"], [24, 1, 1, "", "set_tbl_hide_column_names"], [25, 1, 1, "", "set_tbl_hide_dataframe_shape"], [26, 1, 1, "", "set_tbl_hide_dtype_separator"], [27, 1, 1, "", "set_tbl_rows"], [28, 1, 1, "", "set_tbl_width_chars"], [29, 1, 1, "", "set_thousands_separator"], [30, 1, 1, "", "set_trim_decimal_zeros"], [31, 1, 1, "", "set_verbose"], [32, 1, 1, "", "state"]], "polars.CredentialProvider": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[35, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[36, 1, 1, "", "__init__"]], "polars.DataFrame": [[208, 1, 1, "", "__array__"], [209, 1, 1, "", "__arrow_c_stream__"], [210, 1, 1, "", "__dataframe__"], [211, 1, 1, "", "__getitem__"], [212, 1, 1, "", "__setitem__"], [213, 1, 1, "", "approx_n_unique"], [214, 1, 1, "", "bottom_k"], [215, 1, 1, "", "cast"], [216, 1, 1, "", "clear"], [217, 1, 1, "", "clone"], [218, 1, 1, "", "collect_schema"], [219, 2, 1, "", "columns"], [220, 1, 1, "", "corr"], [221, 1, 1, "", "count"], [222, 1, 1, "", "describe"], [223, 1, 1, "", "deserialize"], [224, 1, 1, "", "drop"], [225, 1, 1, "", "drop_in_place"], [226, 1, 1, "", "drop_nans"], [227, 1, 1, "", "drop_nulls"], [228, 2, 1, "", "dtypes"], [229, 1, 1, "", "equals"], [230, 1, 1, "", "estimated_size"], [231, 1, 1, "", "explode"], [232, 1, 1, "", "extend"], [233, 1, 1, "", "fill_nan"], [234, 1, 1, "", "fill_null"], [235, 1, 1, "", "filter"], [236, 2, 1, "", "flags"], [237, 1, 1, "", "fold"], [238, 1, 1, "", "gather_every"], [239, 1, 1, "", "get_column"], [240, 1, 1, "", "get_column_index"], [241, 1, 1, "", "get_columns"], [242, 1, 1, "", "glimpse"], [243, 1, 1, "", "group_by"], [244, 1, 1, "", "group_by_dynamic"], [245, 1, 1, "", "hash_rows"], [246, 1, 1, "", "head"], [247, 2, 1, "", "height"], [248, 1, 1, "", "hstack"], [249, 1, 1, "", "insert_column"], [250, 1, 1, "", "interpolate"], [251, 1, 1, "", "is_duplicated"], [252, 1, 1, "", "is_empty"], [253, 1, 1, "", "is_unique"], [254, 1, 1, "", "item"], [255, 1, 1, "", "iter_columns"], [256, 1, 1, "", "iter_rows"], [257, 1, 1, "", "iter_slices"], [258, 1, 1, "", "join"], [259, 1, 1, "", "join_asof"], [260, 1, 1, "", "join_where"], [261, 1, 1, "", "lazy"], [262, 1, 1, "", "limit"], [263, 1, 1, "", "map_columns"], [264, 1, 1, "", "map_rows"], [265, 1, 1, "", "match_to_schema"], [266, 1, 1, "", "max"], [267, 1, 1, "", "max_horizontal"], [268, 1, 1, "", "mean"], [269, 1, 1, "", "mean_horizontal"], [270, 1, 1, "", "median"], [271, 1, 1, "", "melt"], [272, 1, 1, "", "merge_sorted"], [273, 1, 1, "", "min"], [274, 1, 1, "", "min_horizontal"], [275, 1, 1, "", "n_chunks"], [276, 1, 1, "", "n_unique"], [277, 1, 1, "", "null_count"], [278, 1, 1, "", "partition_by"], [279, 1, 1, "", "pipe"], [280, 1, 1, "", "pivot"], [359, 2, 1, "", "plot"], [281, 1, 1, "", "product"], [282, 1, 1, "", "quantile"], [283, 1, 1, "", "rechunk"], [284, 1, 1, "", "remove"], [285, 1, 1, "", "rename"], [286, 1, 1, "", "replace_column"], [287, 1, 1, "", "reverse"], [288, 1, 1, "", "rolling"], [289, 1, 1, "", "row"], [290, 1, 1, "", "rows"], [291, 1, 1, "", "rows_by_key"], [292, 1, 1, "", "sample"], [293, 2, 1, "", "schema"], [294, 1, 1, "", "select"], [295, 1, 1, "", "select_seq"], [296, 1, 1, "", "serialize"], [297, 1, 1, "", "set_sorted"], [298, 2, 1, "", "shape"], [299, 1, 1, "", "shift"], [300, 1, 1, "", "shrink_to_fit"], [301, 1, 1, "", "slice"], [302, 1, 1, "", "sort"], [303, 1, 1, "", "sql"], [304, 1, 1, "", "std"], [360, 2, 1, "", "style"], [305, 1, 1, "", "sum"], [306, 1, 1, "", "sum_horizontal"], [307, 1, 1, "", "tail"], [308, 1, 1, "", "to_arrow"], [309, 1, 1, "", "to_dict"], [310, 1, 1, "", "to_dicts"], [311, 1, 1, "", "to_dummies"], [312, 1, 1, "", "to_init_repr"], [313, 1, 1, "", "to_jax"], [314, 1, 1, "", "to_numpy"], [315, 1, 1, "", "to_pandas"], [316, 1, 1, "", "to_series"], [317, 1, 1, "", "to_struct"], [318, 1, 1, "", "to_torch"], [319, 1, 1, "", "top_k"], [320, 1, 1, "", "transpose"], [321, 1, 1, "", "unique"], [322, 1, 1, "", "unnest"], [323, 1, 1, "", "unpivot"], [324, 1, 1, "", "unstack"], [325, 1, 1, "", "update"], [326, 1, 1, "", "upsample"], [327, 1, 1, "", "var"], [328, 1, 1, "", "vstack"], [329, 2, 1, "", "width"], [330, 1, 1, "", "with_columns"], [331, 1, 1, "", "with_columns_seq"], [332, 1, 1, "", "with_row_count"], [333, 1, 1, "", "with_row_index"], [37, 1, 1, "", "write_avro"], [38, 1, 1, "", "write_clipboard"], [39, 1, 1, "", "write_csv"], [40, 1, 1, "", "write_database"], [41, 1, 1, "", "write_delta"], [42, 1, 1, "", "write_excel"], [43, 1, 1, "", "write_iceberg"], [44, 1, 1, "", "write_ipc"], [45, 1, 1, "", "write_ipc_stream"], [46, 1, 1, "", "write_json"], [47, 1, 1, "", "write_ndjson"], [48, 1, 1, "", "write_parquet"]], "polars.DataType": [[361, 1, 1, "", "to_dtype_expr"]], "polars.DataTypeExpr.arr": [[362, 1, 1, "", "inner_dtype"], [363, 1, 1, "", "shape"], [364, 1, 1, "", "width"]], "polars.DataTypeExpr.list": [[365, 1, 1, "", "inner_dtype"]], "polars.DataTypeExpr.struct": [[366, 1, 1, "", "field_dtype"], [367, 1, 1, "", "field_names"]], "polars.Expr": [[378, 1, 1, "", "abs"], [379, 1, 1, "", "add"], [380, 1, 1, "", "agg_groups"], [381, 1, 1, "", "alias"], [382, 1, 1, "", "all"], [383, 1, 1, "", "and_"], [384, 1, 1, "", "any"], [385, 1, 1, "", "append"], [386, 1, 1, "", "approx_n_unique"], [387, 1, 1, "", "arccos"], [388, 1, 1, "", "arccosh"], [389, 1, 1, "", "arcsin"], [390, 1, 1, "", "arcsinh"], [391, 1, 1, "", "arctan"], [392, 1, 1, "", "arctanh"], [393, 1, 1, "", "arg_max"], [394, 1, 1, "", "arg_min"], [395, 1, 1, "", "arg_sort"], [396, 1, 1, "", "arg_true"], [397, 1, 1, "", "arg_unique"], [424, 1, 1, "", "backward_fill"], [432, 1, 1, "", "bitwise_and"], [433, 1, 1, "", "bitwise_count_ones"], [434, 1, 1, "", "bitwise_count_zeros"], [435, 1, 1, "", "bitwise_leading_ones"], [436, 1, 1, "", "bitwise_leading_zeros"], [437, 1, 1, "", "bitwise_or"], [438, 1, 1, "", "bitwise_trailing_ones"], [439, 1, 1, "", "bitwise_trailing_zeros"], [440, 1, 1, "", "bitwise_xor"], [441, 1, 1, "", "bottom_k"], [442, 1, 1, "", "bottom_k_by"], [443, 1, 1, "", "cast"], [449, 1, 1, "", "cbrt"], [450, 1, 1, "", "ceil"], [451, 1, 1, "", "clip"], [452, 1, 1, "", "cos"], [453, 1, 1, "", "cosh"], [454, 1, 1, "", "cot"], [455, 1, 1, "", "count"], [456, 1, 1, "", "cum_count"], [457, 1, 1, "", "cum_max"], [458, 1, 1, "", "cum_min"], [459, 1, 1, "", "cum_prod"], [460, 1, 1, "", "cum_sum"], [461, 1, 1, "", "cumulative_eval"], [462, 1, 1, "", "cut"], [463, 1, 1, "", "degrees"], [464, 1, 1, "", "deserialize"], [465, 1, 1, "", "diff"], [466, 1, 1, "", "dot"], [467, 1, 1, "", "drop_nans"], [468, 1, 1, "", "drop_nulls"], [515, 1, 1, "", "entropy"], [516, 1, 1, "", "eq"], [517, 1, 1, "", "eq_missing"], [518, 1, 1, "", "ewm_mean"], [519, 1, 1, "", "ewm_mean_by"], [520, 1, 1, "", "ewm_std"], [521, 1, 1, "", "ewm_var"], [522, 1, 1, "", "exclude"], [523, 1, 1, "", "exp"], [524, 1, 1, "", "explode"], [525, 1, 1, "", "extend_constant"], [526, 1, 1, "", "fill_nan"], [527, 1, 1, "", "fill_null"], [528, 1, 1, "", "filter"], [529, 1, 1, "", "first"], [530, 1, 1, "", "flatten"], [531, 1, 1, "", "floor"], [532, 1, 1, "", "floordiv"], [533, 1, 1, "", "forward_fill"], [534, 1, 1, "", "from_json"], [535, 1, 1, "", "gather"], [536, 1, 1, "", "gather_every"], [537, 1, 1, "", "ge"], [538, 1, 1, "", "get"], [539, 1, 1, "", "gt"], [540, 1, 1, "", "has_nulls"], [541, 1, 1, "", "hash"], [542, 1, 1, "", "head"], [543, 1, 1, "", "hist"], [544, 1, 1, "", "implode"], [545, 1, 1, "", "index_of"], [546, 1, 1, "", "inspect"], [547, 1, 1, "", "interpolate"], [548, 1, 1, "", "interpolate_by"], [549, 1, 1, "", "is_between"], [550, 1, 1, "", "is_close"], [551, 1, 1, "", "is_duplicated"], [552, 1, 1, "", "is_finite"], [553, 1, 1, "", "is_first_distinct"], [554, 1, 1, "", "is_in"], [555, 1, 1, "", "is_infinite"], [556, 1, 1, "", "is_last_distinct"], [557, 1, 1, "", "is_nan"], [558, 1, 1, "", "is_not_nan"], [559, 1, 1, "", "is_not_null"], [560, 1, 1, "", "is_null"], [561, 1, 1, "", "is_unique"], [562, 1, 1, "", "kurtosis"], [563, 1, 1, "", "last"], [564, 1, 1, "", "le"], [565, 1, 1, "", "len"], [566, 1, 1, "", "limit"], [608, 1, 1, "", "log"], [609, 1, 1, "", "log10"], [610, 1, 1, "", "log1p"], [611, 1, 1, "", "lower_bound"], [612, 1, 1, "", "lt"], [613, 1, 1, "", "map_batches"], [614, 1, 1, "", "map_elements"], [615, 1, 1, "", "max"], [616, 1, 1, "", "mean"], [617, 1, 1, "", "median"], [633, 1, 1, "", "min"], [634, 1, 1, "", "mod"], [635, 1, 1, "", "mode"], [636, 1, 1, "", "mul"], [637, 1, 1, "", "n_unique"], [647, 1, 1, "", "nan_max"], [648, 1, 1, "", "nan_min"], [649, 1, 1, "", "ne"], [650, 1, 1, "", "ne_missing"], [651, 1, 1, "", "neg"], [652, 1, 1, "", "not_"], [653, 1, 1, "", "null_count"], [654, 1, 1, "", "or_"], [655, 1, 1, "", "over"], [656, 1, 1, "", "pct_change"], [657, 1, 1, "", "peak_max"], [658, 1, 1, "", "peak_min"], [659, 1, 1, "", "pipe"], [660, 1, 1, "", "pow"], [661, 1, 1, "", "product"], [662, 1, 1, "", "qcut"], [663, 1, 1, "", "quantile"], [664, 1, 1, "", "radians"], [665, 1, 1, "", "rank"], [666, 1, 1, "", "rechunk"], [667, 1, 1, "", "reinterpret"], [668, 1, 1, "", "repeat_by"], [669, 1, 1, "", "replace"], [670, 1, 1, "", "replace_strict"], [671, 1, 1, "", "reshape"], [672, 1, 1, "", "reverse"], [673, 1, 1, "", "rle"], [674, 1, 1, "", "rle_id"], [675, 1, 1, "", "rolling"], [676, 1, 1, "", "rolling_kurtosis"], [677, 1, 1, "", "rolling_map"], [678, 1, 1, "", "rolling_max"], [679, 1, 1, "", "rolling_max_by"], [680, 1, 1, "", "rolling_mean"], [681, 1, 1, "", "rolling_mean_by"], [682, 1, 1, "", "rolling_median"], [683, 1, 1, "", "rolling_median_by"], [684, 1, 1, "", "rolling_min"], [685, 1, 1, "", "rolling_min_by"], [686, 1, 1, "", "rolling_quantile"], [687, 1, 1, "", "rolling_quantile_by"], [688, 1, 1, "", "rolling_skew"], [689, 1, 1, "", "rolling_std"], [690, 1, 1, "", "rolling_std_by"], [691, 1, 1, "", "rolling_sum"], [692, 1, 1, "", "rolling_sum_by"], [693, 1, 1, "", "rolling_var"], [694, 1, 1, "", "rolling_var_by"], [695, 1, 1, "", "round"], [696, 1, 1, "", "round_sig_figs"], [697, 1, 1, "", "sample"], [698, 1, 1, "", "search_sorted"], [699, 1, 1, "", "set_sorted"], [700, 1, 1, "", "shift"], [701, 1, 1, "", "shrink_dtype"], [702, 1, 1, "", "shuffle"], [703, 1, 1, "", "sign"], [704, 1, 1, "", "sin"], [705, 1, 1, "", "sinh"], [706, 1, 1, "", "skew"], [707, 1, 1, "", "slice"], [708, 1, 1, "", "sort"], [709, 1, 1, "", "sort_by"], [710, 1, 1, "", "sqrt"], [711, 1, 1, "", "std"], [766, 1, 1, "", "sub"], [767, 1, 1, "", "sum"], [768, 1, 1, "", "tail"], [769, 1, 1, "", "tan"], [770, 1, 1, "", "tanh"], [771, 1, 1, "", "to_physical"], [772, 1, 1, "", "top_k"], [773, 1, 1, "", "top_k_by"], [774, 1, 1, "", "truediv"], [775, 1, 1, "", "unique"], [776, 1, 1, "", "unique_counts"], [777, 1, 1, "", "upper_bound"], [778, 1, 1, "", "value_counts"], [779, 1, 1, "", "var"], [780, 1, 1, "", "where"], [781, 1, 1, "", "xor"]], "polars.Expr.arr": [[398, 1, 1, "", "all"], [399, 1, 1, "", "any"], [400, 1, 1, "", "arg_max"], [401, 1, 1, "", "arg_min"], [402, 1, 1, "", "contains"], [403, 1, 1, "", "count_matches"], [404, 1, 1, "", "explode"], [405, 1, 1, "", "first"], [406, 1, 1, "", "get"], [407, 1, 1, "", "join"], [408, 1, 1, "", "last"], [409, 1, 1, "", "len"], [410, 1, 1, "", "max"], [411, 1, 1, "", "mean"], [412, 1, 1, "", "median"], [413, 1, 1, "", "min"], [414, 1, 1, "", "n_unique"], [415, 1, 1, "", "reverse"], [416, 1, 1, "", "shift"], [417, 1, 1, "", "sort"], [418, 1, 1, "", "std"], [419, 1, 1, "", "sum"], [420, 1, 1, "", "to_list"], [421, 1, 1, "", "to_struct"], [422, 1, 1, "", "unique"], [423, 1, 1, "", "var"]], "polars.Expr.bin": [[425, 1, 1, "", "contains"], [426, 1, 1, "", "decode"], [427, 1, 1, "", "encode"], [428, 1, 1, "", "ends_with"], [429, 1, 1, "", "reinterpret"], [430, 1, 1, "", "size"], [431, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[444, 1, 1, "", "ends_with"], [445, 1, 1, "", "get_categories"], [446, 1, 1, "", "len_bytes"], [447, 1, 1, "", "len_chars"], [448, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[469, 1, 1, "", "add_business_days"], [470, 1, 1, "", "base_utc_offset"], [471, 1, 1, "", "cast_time_unit"], [472, 1, 1, "", "century"], [473, 1, 1, "", "combine"], [474, 1, 1, "", "convert_time_zone"], [475, 1, 1, "", "date"], [476, 1, 1, "", "datetime"], [477, 1, 1, "", "day"], [478, 1, 1, "", "dst_offset"], [479, 1, 1, "", "epoch"], [480, 1, 1, "", "hour"], [481, 1, 1, "", "is_business_day"], [482, 1, 1, "", "is_leap_year"], [483, 1, 1, "", "iso_year"], [484, 1, 1, "", "microsecond"], [485, 1, 1, "", "millennium"], [486, 1, 1, "", "millisecond"], [487, 1, 1, "", "minute"], [488, 1, 1, "", "month"], [489, 1, 1, "", "month_end"], [490, 1, 1, "", "month_start"], [491, 1, 1, "", "nanosecond"], [492, 1, 1, "", "offset_by"], [493, 1, 1, "", "ordinal_day"], [494, 1, 1, "", "quarter"], [495, 1, 1, "", "replace"], [496, 1, 1, "", "replace_time_zone"], [497, 1, 1, "", "round"], [498, 1, 1, "", "second"], [499, 1, 1, "", "strftime"], [500, 1, 1, "", "time"], [501, 1, 1, "", "timestamp"], [502, 1, 1, "", "to_string"], [503, 1, 1, "", "total_days"], [504, 1, 1, "", "total_hours"], [505, 1, 1, "", "total_microseconds"], [506, 1, 1, "", "total_milliseconds"], [507, 1, 1, "", "total_minutes"], [508, 1, 1, "", "total_nanoseconds"], [509, 1, 1, "", "total_seconds"], [510, 1, 1, "", "truncate"], [511, 1, 1, "", "week"], [512, 1, 1, "", "weekday"], [513, 1, 1, "", "with_time_unit"], [514, 1, 1, "", "year"]], "polars.Expr.list": [[567, 1, 1, "", "all"], [568, 1, 1, "", "any"], [569, 1, 1, "", "arg_max"], [570, 1, 1, "", "arg_min"], [571, 1, 1, "", "concat"], [572, 1, 1, "", "contains"], [573, 1, 1, "", "count_matches"], [574, 1, 1, "", "diff"], [575, 1, 1, "", "drop_nulls"], [576, 1, 1, "", "eval"], [577, 1, 1, "", "explode"], [578, 1, 1, "", "filter"], [579, 1, 1, "", "first"], [580, 1, 1, "", "gather"], [581, 1, 1, "", "gather_every"], [582, 1, 1, "", "get"], [583, 1, 1, "", "head"], [584, 1, 1, "", "join"], [585, 1, 1, "", "last"], [586, 1, 1, "", "len"], [587, 1, 1, "", "max"], [588, 1, 1, "", "mean"], [589, 1, 1, "", "median"], [590, 1, 1, "", "min"], [591, 1, 1, "", "n_unique"], [592, 1, 1, "", "reverse"], [593, 1, 1, "", "sample"], [594, 1, 1, "", "set_difference"], [595, 1, 1, "", "set_intersection"], [596, 1, 1, "", "set_symmetric_difference"], [597, 1, 1, "", "set_union"], [598, 1, 1, "", "shift"], [599, 1, 1, "", "slice"], [600, 1, 1, "", "sort"], [601, 1, 1, "", "std"], [602, 1, 1, "", "sum"], [603, 1, 1, "", "tail"], [604, 1, 1, "", "to_array"], [605, 1, 1, "", "to_struct"], [606, 1, 1, "", "unique"], [607, 1, 1, "", "var"]], "polars.Expr.meta": [[618, 1, 1, "", "eq"], [619, 1, 1, "", "has_multiple_outputs"], [620, 1, 1, "", "is_column"], [621, 1, 1, "", "is_column_selection"], [622, 1, 1, "", "is_literal"], [623, 1, 1, "", "is_regex_projection"], [624, 1, 1, "", "ne"], [625, 1, 1, "", "output_name"], [626, 1, 1, "", "pop"], [627, 1, 1, "", "root_names"], [628, 1, 1, "", "serialize"], [629, 1, 1, "", "show_graph"], [630, 1, 1, "", "tree_format"], [631, 1, 1, "", "undo_aliases"], [632, 1, 1, "", "write_json"]], "polars.Expr.name": [[638, 1, 1, "", "keep"], [639, 1, 1, "", "map"], [640, 1, 1, "", "map_fields"], [641, 1, 1, "", "prefix"], [642, 1, 1, "", "prefix_fields"], [643, 1, 1, "", "suffix"], [644, 1, 1, "", "suffix_fields"], [645, 1, 1, "", "to_lowercase"], [646, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[712, 1, 1, "", "concat"], [713, 1, 1, "", "contains"], [714, 1, 1, "", "contains_any"], [715, 1, 1, "", "count_matches"], [716, 1, 1, "", "decode"], [717, 1, 1, "", "encode"], [718, 1, 1, "", "ends_with"], [719, 1, 1, "", "escape_regex"], [720, 1, 1, "", "explode"], [721, 1, 1, "", "extract"], [722, 1, 1, "", "extract_all"], [723, 1, 1, "", "extract_groups"], [724, 1, 1, "", "extract_many"], [725, 1, 1, "", "find"], [726, 1, 1, "", "find_many"], [727, 1, 1, "", "head"], [728, 1, 1, "", "join"], [729, 1, 1, "", "json_decode"], [730, 1, 1, "", "json_path_match"], [731, 1, 1, "", "len_bytes"], [732, 1, 1, "", "len_chars"], [733, 1, 1, "", "normalize"], [734, 1, 1, "", "pad_end"], [735, 1, 1, "", "pad_start"], [736, 1, 1, "", "replace"], [737, 1, 1, "", "replace_all"], [738, 1, 1, "", "replace_many"], [739, 1, 1, "", "reverse"], [740, 1, 1, "", "slice"], [741, 1, 1, "", "split"], [742, 1, 1, "", "split_exact"], [743, 1, 1, "", "splitn"], [744, 1, 1, "", "starts_with"], [745, 1, 1, "", "strip_chars"], [746, 1, 1, "", "strip_chars_end"], [747, 1, 1, "", "strip_chars_start"], [748, 1, 1, "", "strip_prefix"], [749, 1, 1, "", "strip_suffix"], [750, 1, 1, "", "strptime"], [751, 1, 1, "", "tail"], [752, 1, 1, "", "to_date"], [753, 1, 1, "", "to_datetime"], [754, 1, 1, "", "to_decimal"], [755, 1, 1, "", "to_integer"], [756, 1, 1, "", "to_lowercase"], [757, 1, 1, "", "to_time"], [758, 1, 1, "", "to_titlecase"], [759, 1, 1, "", "to_uppercase"], [760, 1, 1, "", "zfill"]], "polars.Expr.struct": [[761, 1, 1, "", "field"], [762, 1, 1, "", "json_encode"], [763, 1, 1, "", "rename_fields"], [764, 1, 1, "", "unnest"], [765, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[883, 1, 1, "", "__getitem__"], [884, 1, 1, "", "approx_n_unique"], [885, 1, 1, "", "bottom_k"], [886, 1, 1, "", "cache"], [887, 1, 1, "", "cast"], [888, 1, 1, "", "clear"], [889, 1, 1, "", "clone"], [890, 1, 1, "", "collect"], [891, 1, 1, "", "collect_async"], [892, 1, 1, "", "collect_schema"], [893, 2, 1, "", "columns"], [894, 1, 1, "", "count"], [895, 1, 1, "", "describe"], [896, 1, 1, "", "deserialize"], [897, 1, 1, "", "drop"], [898, 1, 1, "", "drop_nans"], [899, 1, 1, "", "drop_nulls"], [900, 2, 1, "", "dtypes"], [901, 1, 1, "", "explain"], [902, 1, 1, "", "explode"], [903, 1, 1, "", "fill_nan"], [904, 1, 1, "", "fill_null"], [905, 1, 1, "", "filter"], [906, 1, 1, "", "first"], [907, 1, 1, "", "gather_every"], [908, 1, 1, "", "group_by"], [909, 1, 1, "", "group_by_dynamic"], [910, 1, 1, "", "head"], [911, 1, 1, "", "inspect"], [912, 1, 1, "", "interpolate"], [913, 1, 1, "", "join"], [914, 1, 1, "", "join_asof"], [915, 1, 1, "", "join_where"], [916, 1, 1, "", "last"], [917, 1, 1, "", "lazy"], [918, 1, 1, "", "limit"], [919, 1, 1, "", "map_batches"], [920, 1, 1, "", "match_to_schema"], [921, 1, 1, "", "max"], [922, 1, 1, "", "mean"], [923, 1, 1, "", "median"], [924, 1, 1, "", "melt"], [925, 1, 1, "", "merge_sorted"], [926, 1, 1, "", "min"], [927, 1, 1, "", "null_count"], [928, 1, 1, "", "pipe"], [929, 1, 1, "", "pipe_with_schema"], [930, 1, 1, "", "profile"], [931, 1, 1, "", "quantile"], [932, 1, 1, "", "remote"], [933, 1, 1, "", "remove"], [934, 1, 1, "", "rename"], [935, 1, 1, "", "reverse"], [936, 1, 1, "", "rolling"], [937, 2, 1, "", "schema"], [938, 1, 1, "", "select"], [939, 1, 1, "", "select_seq"], [940, 1, 1, "", "serialize"], [941, 1, 1, "", "set_sorted"], [942, 1, 1, "", "shift"], [943, 1, 1, "", "show_graph"], [49, 1, 1, "", "sink_csv"], [50, 1, 1, "", "sink_ipc"], [51, 1, 1, "", "sink_ndjson"], [52, 1, 1, "", "sink_parquet"], [944, 1, 1, "", "slice"], [945, 1, 1, "", "sort"], [946, 1, 1, "", "sql"], [947, 1, 1, "", "std"], [948, 1, 1, "", "sum"], [949, 1, 1, "", "tail"], [950, 1, 1, "", "top_k"], [951, 1, 1, "", "unique"], [952, 1, 1, "", "unnest"], [953, 1, 1, "", "unpivot"], [954, 1, 1, "", "update"], [955, 1, 1, "", "var"], [956, 2, 1, "", "width"], [957, 1, 1, "", "with_columns"], [958, 1, 1, "", "with_columns_seq"], [959, 1, 1, "", "with_context"], [960, 1, 1, "", "with_row_count"], [961, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[53, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[54, 1, 1, "", "__init__"]], "polars.PartitionParted": [[55, 1, 1, "", "__init__"]], "polars.QueryOptFlags": [[962, 1, 1, "", "__init__"]], "polars.SQLContext": [[1429, 1, 1, "", "__enter__"], [1429, 1, 1, "", "__exit__"], [1429, 1, 1, "", "__init__"], [1410, 1, 1, "", "execute"], [1411, 1, 1, "", "execute_global"], [1412, 1, 1, "", "register"], [1413, 1, 1, "", "register_globals"], [1414, 1, 1, "", "register_many"], [1415, 1, 1, "", "tables"], [1416, 1, 1, "", "unregister"]], "polars.ScanCastOptions": [[56, 1, 1, "", "__init__"]], "polars.Series": [[996, 1, 1, "", "__array__"], [997, 1, 1, "", "__arrow_c_stream__"], [998, 1, 1, "", "__getitem__"], [999, 1, 1, "", "abs"], [1000, 1, 1, "", "alias"], [1001, 1, 1, "", "all"], [1002, 1, 1, "", "any"], [1003, 1, 1, "", "append"], [1004, 1, 1, "", "approx_n_unique"], [1005, 1, 1, "", "arccos"], [1006, 1, 1, "", "arccosh"], [1007, 1, 1, "", "arcsin"], [1008, 1, 1, "", "arcsinh"], [1009, 1, 1, "", "arctan"], [1010, 1, 1, "", "arctanh"], [1011, 1, 1, "", "arg_max"], [1012, 1, 1, "", "arg_min"], [1013, 1, 1, "", "arg_sort"], [1014, 1, 1, "", "arg_true"], [1015, 1, 1, "", "arg_unique"], [1041, 1, 1, "", "backward_fill"], [1049, 1, 1, "", "bitwise_and"], [1050, 1, 1, "", "bitwise_count_ones"], [1051, 1, 1, "", "bitwise_count_zeros"], [1052, 1, 1, "", "bitwise_leading_ones"], [1053, 1, 1, "", "bitwise_leading_zeros"], [1054, 1, 1, "", "bitwise_or"], [1055, 1, 1, "", "bitwise_trailing_ones"], [1056, 1, 1, "", "bitwise_trailing_zeros"], [1057, 1, 1, "", "bitwise_xor"], [1058, 1, 1, "", "bottom_k"], [1059, 1, 1, "", "bottom_k_by"], [1060, 1, 1, "", "cast"], [1069, 1, 1, "", "cbrt"], [1070, 1, 1, "", "ceil"], [1071, 1, 1, "", "chunk_lengths"], [1072, 1, 1, "", "clear"], [1073, 1, 1, "", "clip"], [1074, 1, 1, "", "clone"], [1075, 1, 1, "", "cos"], [1076, 1, 1, "", "cosh"], [1077, 1, 1, "", "cot"], [1078, 1, 1, "", "count"], [1079, 1, 1, "", "cum_count"], [1080, 1, 1, "", "cum_max"], [1081, 1, 1, "", "cum_min"], [1082, 1, 1, "", "cum_prod"], [1083, 1, 1, "", "cum_sum"], [1084, 1, 1, "", "cumulative_eval"], [1085, 1, 1, "", "cut"], [1086, 1, 1, "", "describe"], [1087, 1, 1, "", "diff"], [1088, 1, 1, "", "dot"], [1089, 1, 1, "", "drop_nans"], [1090, 1, 1, "", "drop_nulls"], [1141, 2, 1, "", "dtype"], [1142, 1, 1, "", "entropy"], [1143, 1, 1, "", "eq"], [1144, 1, 1, "", "eq_missing"], [1145, 1, 1, "", "equals"], [1146, 1, 1, "", "estimated_size"], [1147, 1, 1, "", "ewm_mean"], [1148, 1, 1, "", "ewm_mean_by"], [1149, 1, 1, "", "ewm_std"], [1150, 1, 1, "", "ewm_var"], [1151, 1, 1, "", "exp"], [1152, 1, 1, "", "explode"], [1153, 1, 1, "", "extend"], [1154, 1, 1, "", "extend_constant"], [1155, 1, 1, "", "fill_nan"], [1156, 1, 1, "", "fill_null"], [1157, 1, 1, "", "filter"], [1158, 1, 1, "", "first"], [1159, 2, 1, "", "flags"], [1160, 1, 1, "", "floor"], [1161, 1, 1, "", "forward_fill"], [1162, 1, 1, "", "gather"], [1163, 1, 1, "", "gather_every"], [1164, 1, 1, "", "ge"], [1165, 1, 1, "", "get_chunks"], [1166, 1, 1, "", "gt"], [1167, 1, 1, "", "has_nulls"], [1168, 1, 1, "", "has_validity"], [1169, 1, 1, "", "hash"], [1170, 1, 1, "", "head"], [1171, 1, 1, "", "hist"], [1172, 1, 1, "", "implode"], [1173, 1, 1, "", "index_of"], [1174, 1, 1, "", "interpolate"], [1175, 1, 1, "", "interpolate_by"], [1176, 1, 1, "", "is_between"], [1177, 1, 1, "", "is_close"], [1178, 1, 1, "", "is_duplicated"], [1179, 1, 1, "", "is_empty"], [1180, 1, 1, "", "is_finite"], [1181, 1, 1, "", "is_first_distinct"], [1182, 1, 1, "", "is_in"], [1183, 1, 1, "", "is_infinite"], [1184, 1, 1, "", "is_last_distinct"], [1185, 1, 1, "", "is_nan"], [1186, 1, 1, "", "is_not_nan"], [1187, 1, 1, "", "is_not_null"], [1188, 1, 1, "", "is_null"], [1189, 1, 1, "", "is_sorted"], [1190, 1, 1, "", "is_unique"], [1191, 1, 1, "", "item"], [1192, 1, 1, "", "kurtosis"], [1193, 1, 1, "", "last"], [1194, 1, 1, "", "le"], [1195, 1, 1, "", "len"], [1196, 1, 1, "", "limit"], [1238, 1, 1, "", "log"], [1239, 1, 1, "", "log10"], [1240, 1, 1, "", "log1p"], [1241, 1, 1, "", "lower_bound"], [1242, 1, 1, "", "lt"], [1243, 1, 1, "", "map_elements"], [1244, 1, 1, "", "max"], [1245, 1, 1, "", "mean"], [1246, 1, 1, "", "median"], [1247, 1, 1, "", "min"], [1248, 1, 1, "", "mode"], [1249, 1, 1, "", "n_chunks"], [1250, 1, 1, "", "n_unique"], [1251, 2, 1, "", "name"], [1252, 1, 1, "", "nan_max"], [1253, 1, 1, "", "nan_min"], [1254, 1, 1, "", "ne"], [1255, 1, 1, "", "ne_missing"], [1256, 1, 1, "", "new_from_index"], [1257, 1, 1, "", "not_"], [1258, 1, 1, "", "null_count"], [1259, 1, 1, "", "pct_change"], [1260, 1, 1, "", "peak_max"], [1261, 1, 1, "", "peak_min"], [1406, 2, 1, "", "plot"], [1262, 1, 1, "", "pow"], [1263, 1, 1, "", "product"], [1264, 1, 1, "", "qcut"], [1265, 1, 1, "", "quantile"], [1266, 1, 1, "", "rank"], [1267, 1, 1, "", "rechunk"], [1268, 1, 1, "", "reinterpret"], [1269, 1, 1, "", "rename"], [1270, 1, 1, "", "repeat_by"], [1271, 1, 1, "", "replace"], [1272, 1, 1, "", "replace_strict"], [1273, 1, 1, "", "reshape"], [1274, 1, 1, "", "reverse"], [1275, 1, 1, "", "rle"], [1276, 1, 1, "", "rle_id"], [1277, 1, 1, "", "rolling_kurtosis"], [1278, 1, 1, "", "rolling_map"], [1279, 1, 1, "", "rolling_max"], [1280, 1, 1, "", "rolling_max_by"], [1281, 1, 1, "", "rolling_mean"], [1282, 1, 1, "", "rolling_mean_by"], [1283, 1, 1, "", "rolling_median"], [1284, 1, 1, "", "rolling_median_by"], [1285, 1, 1, "", "rolling_min"], [1286, 1, 1, "", "rolling_min_by"], [1287, 1, 1, "", "rolling_quantile"], [1288, 1, 1, "", "rolling_quantile_by"], [1289, 1, 1, "", "rolling_skew"], [1290, 1, 1, "", "rolling_std"], [1291, 1, 1, "", "rolling_std_by"], [1292, 1, 1, "", "rolling_sum"], [1293, 1, 1, "", "rolling_sum_by"], [1294, 1, 1, "", "rolling_var"], [1295, 1, 1, "", "rolling_var_by"], [1296, 1, 1, "", "round"], [1297, 1, 1, "", "round_sig_figs"], [1298, 1, 1, "", "sample"], [1299, 1, 1, "", "scatter"], [1300, 1, 1, "", "search_sorted"], [1301, 1, 1, "", "set"], [1302, 1, 1, "", "set_sorted"], [1303, 2, 1, "", "shape"], [1304, 1, 1, "", "shift"], [1305, 1, 1, "", "shrink_dtype"], [1306, 1, 1, "", "shrink_to_fit"], [1307, 1, 1, "", "shuffle"], [1308, 1, 1, "", "sign"], [1309, 1, 1, "", "sin"], [1310, 1, 1, "", "sinh"], [1311, 1, 1, "", "skew"], [1312, 1, 1, "", "slice"], [1313, 1, 1, "", "sort"], [1314, 1, 1, "", "sqrt"], [1315, 1, 1, "", "std"], [1371, 1, 1, "", "sum"], [1372, 1, 1, "", "tail"], [1373, 1, 1, "", "tan"], [1374, 1, 1, "", "tanh"], [1375, 1, 1, "", "to_arrow"], [1376, 1, 1, "", "to_dummies"], [1377, 1, 1, "", "to_frame"], [1378, 1, 1, "", "to_init_repr"], [1379, 1, 1, "", "to_jax"], [1380, 1, 1, "", "to_list"], [1381, 1, 1, "", "to_numpy"], [1382, 1, 1, "", "to_pandas"], [1383, 1, 1, "", "to_physical"], [1384, 1, 1, "", "to_torch"], [1385, 1, 1, "", "top_k"], [1386, 1, 1, "", "top_k_by"], [1387, 1, 1, "", "unique"], [1388, 1, 1, "", "unique_counts"], [1389, 1, 1, "", "upper_bound"], [1390, 1, 1, "", "value_counts"], [1391, 1, 1, "", "var"], [1392, 1, 1, "", "zip_with"]], "polars.Series.arr": [[1016, 1, 1, "", "all"], [1017, 1, 1, "", "any"], [1018, 1, 1, "", "arg_max"], [1019, 1, 1, "", "arg_min"], [1020, 1, 1, "", "contains"], [1021, 1, 1, "", "count_matches"], [1022, 1, 1, "", "explode"], [1023, 1, 1, "", "first"], [1024, 1, 1, "", "get"], [1025, 1, 1, "", "join"], [1026, 1, 1, "", "last"], [1027, 1, 1, "", "len"], [1028, 1, 1, "", "max"], [1029, 1, 1, "", "median"], [1030, 1, 1, "", "min"], [1031, 1, 1, "", "n_unique"], [1032, 1, 1, "", "reverse"], [1033, 1, 1, "", "shift"], [1034, 1, 1, "", "sort"], [1035, 1, 1, "", "std"], [1036, 1, 1, "", "sum"], [1037, 1, 1, "", "to_list"], [1038, 1, 1, "", "to_struct"], [1039, 1, 1, "", "unique"], [1040, 1, 1, "", "var"]], "polars.Series.bin": [[1042, 1, 1, "", "contains"], [1043, 1, 1, "", "decode"], [1044, 1, 1, "", "encode"], [1045, 1, 1, "", "ends_with"], [1046, 1, 1, "", "reinterpret"], [1047, 1, 1, "", "size"], [1048, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1061, 1, 1, "", "ends_with"], [1062, 1, 1, "", "get_categories"], [1063, 1, 1, "", "is_local"], [1064, 1, 1, "", "len_bytes"], [1065, 1, 1, "", "len_chars"], [1066, 1, 1, "", "starts_with"], [1067, 1, 1, "", "to_local"], [1068, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1091, 1, 1, "", "add_business_days"], [1092, 1, 1, "", "base_utc_offset"], [1093, 1, 1, "", "cast_time_unit"], [1094, 1, 1, "", "century"], [1095, 1, 1, "", "combine"], [1096, 1, 1, "", "convert_time_zone"], [1097, 1, 1, "", "date"], [1098, 1, 1, "", "datetime"], [1099, 1, 1, "", "day"], [1100, 1, 1, "", "dst_offset"], [1101, 1, 1, "", "epoch"], [1102, 1, 1, "", "hour"], [1103, 1, 1, "", "is_business_day"], [1104, 1, 1, "", "is_leap_year"], [1105, 1, 1, "", "iso_year"], [1106, 1, 1, "", "max"], [1107, 1, 1, "", "mean"], [1108, 1, 1, "", "median"], [1109, 1, 1, "", "microsecond"], [1110, 1, 1, "", "millennium"], [1111, 1, 1, "", "millisecond"], [1112, 1, 1, "", "min"], [1113, 1, 1, "", "minute"], [1114, 1, 1, "", "month"], [1115, 1, 1, "", "month_end"], [1116, 1, 1, "", "month_start"], [1117, 1, 1, "", "nanosecond"], [1118, 1, 1, "", "offset_by"], [1119, 1, 1, "", "ordinal_day"], [1120, 1, 1, "", "quarter"], [1121, 1, 1, "", "replace"], [1122, 1, 1, "", "replace_time_zone"], [1123, 1, 1, "", "round"], [1124, 1, 1, "", "second"], [1125, 1, 1, "", "strftime"], [1126, 1, 1, "", "time"], [1127, 1, 1, "", "timestamp"], [1128, 1, 1, "", "to_string"], [1129, 1, 1, "", "total_days"], [1130, 1, 1, "", "total_hours"], [1131, 1, 1, "", "total_microseconds"], [1132, 1, 1, "", "total_milliseconds"], [1133, 1, 1, "", "total_minutes"], [1134, 1, 1, "", "total_nanoseconds"], [1135, 1, 1, "", "total_seconds"], [1136, 1, 1, "", "truncate"], [1137, 1, 1, "", "week"], [1138, 1, 1, "", "weekday"], [1139, 1, 1, "", "with_time_unit"], [1140, 1, 1, "", "year"]], "polars.Series.list": [[1197, 1, 1, "", "all"], [1198, 1, 1, "", "any"], [1199, 1, 1, "", "arg_max"], [1200, 1, 1, "", "arg_min"], [1201, 1, 1, "", "concat"], [1202, 1, 1, "", "contains"], [1203, 1, 1, "", "count_matches"], [1204, 1, 1, "", "diff"], [1205, 1, 1, "", "drop_nulls"], [1206, 1, 1, "", "eval"], [1207, 1, 1, "", "explode"], [1208, 1, 1, "", "filter"], [1209, 1, 1, "", "first"], [1210, 1, 1, "", "gather"], [1211, 1, 1, "", "gather_every"], [1212, 1, 1, "", "get"], [1213, 1, 1, "", "head"], [1214, 1, 1, "", "join"], [1215, 1, 1, "", "last"], [1216, 1, 1, "", "len"], [1217, 1, 1, "", "max"], [1218, 1, 1, "", "mean"], [1219, 1, 1, "", "median"], [1220, 1, 1, "", "min"], [1221, 1, 1, "", "n_unique"], [1222, 1, 1, "", "reverse"], [1223, 1, 1, "", "sample"], [1224, 1, 1, "", "set_difference"], [1225, 1, 1, "", "set_intersection"], [1226, 1, 1, "", "set_symmetric_difference"], [1227, 1, 1, "", "set_union"], [1228, 1, 1, "", "shift"], [1229, 1, 1, "", "slice"], [1230, 1, 1, "", "sort"], [1231, 1, 1, "", "std"], [1232, 1, 1, "", "sum"], [1233, 1, 1, "", "tail"], [1234, 1, 1, "", "to_array"], [1235, 1, 1, "", "to_struct"], [1236, 1, 1, "", "unique"], [1237, 1, 1, "", "var"]], "polars.Series.str": [[1316, 1, 1, "", "concat"], [1317, 1, 1, "", "contains"], [1318, 1, 1, "", "contains_any"], [1319, 1, 1, "", "count_matches"], [1320, 1, 1, "", "decode"], [1321, 1, 1, "", "encode"], [1322, 1, 1, "", "ends_with"], [1323, 1, 1, "", "escape_regex"], [1324, 1, 1, "", "explode"], [1325, 1, 1, "", "extract"], [1326, 1, 1, "", "extract_all"], [1327, 1, 1, "", "extract_groups"], [1328, 1, 1, "", "extract_many"], [1329, 1, 1, "", "find"], [1330, 1, 1, "", "find_many"], [1331, 1, 1, "", "head"], [1332, 1, 1, "", "join"], [1333, 1, 1, "", "json_decode"], [1334, 1, 1, "", "json_path_match"], [1335, 1, 1, "", "len_bytes"], [1336, 1, 1, "", "len_chars"], [1337, 1, 1, "", "normalize"], [1338, 1, 1, "", "pad_end"], [1339, 1, 1, "", "pad_start"], [1340, 1, 1, "", "replace"], [1341, 1, 1, "", "replace_all"], [1342, 1, 1, "", "replace_many"], [1343, 1, 1, "", "reverse"], [1344, 1, 1, "", "slice"], [1345, 1, 1, "", "split"], [1346, 1, 1, "", "split_exact"], [1347, 1, 1, "", "splitn"], [1348, 1, 1, "", "starts_with"], [1349, 1, 1, "", "strip_chars"], [1350, 1, 1, "", "strip_chars_end"], [1351, 1, 1, "", "strip_chars_start"], [1352, 1, 1, "", "strip_prefix"], [1353, 1, 1, "", "strip_suffix"], [1354, 1, 1, "", "strptime"], [1355, 1, 1, "", "tail"], [1356, 1, 1, "", "to_date"], [1357, 1, 1, "", "to_datetime"], [1358, 1, 1, "", "to_decimal"], [1359, 1, 1, "", "to_integer"], [1360, 1, 1, "", "to_lowercase"], [1361, 1, 1, "", "to_time"], [1362, 1, 1, "", "to_titlecase"], [1363, 1, 1, "", "to_uppercase"], [1364, 1, 1, "", "zfill"]], "polars.Series.struct": [[1365, 1, 1, "", "field"], [1366, 3, 1, "", "fields"], [1367, 1, 1, "", "json_encode"], [1368, 1, 1, "", "rename_fields"], [1369, 3, 1, "", "schema"], [1370, 1, 1, "", "unnest"]], "polars.StringCache": [[57, 1, 1, "", "__init__"]], "polars.api": [[59, 4, 1, "", "register_dataframe_namespace"], [60, 4, 1, "", "register_expr_namespace"], [61, 4, 1, "", "register_lazyframe_namespace"], [62, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[197, 0, 1, "", "CatalogInfo"], [198, 0, 1, "", "ColumnInfo"], [199, 5, 1, "", "DataSourceFormat"], [200, 0, 1, "", "NamespaceInfo"], [201, 0, 1, "", "TableInfo"], [203, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[197, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[198, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[200, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[201, 1, 1, "", "__init__"], [202, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[334, 1, 1, "", "__iter__"], [335, 1, 1, "", "agg"], [336, 1, 1, "", "all"], [337, 1, 1, "", "count"], [338, 1, 1, "", "first"], [339, 1, 1, "", "head"], [340, 1, 1, "", "last"], [341, 1, 1, "", "len"], [342, 1, 1, "", "map_groups"], [343, 1, 1, "", "max"], [344, 1, 1, "", "mean"], [345, 1, 1, "", "median"], [346, 1, 1, "", "min"], [347, 1, 1, "", "n_unique"], [348, 1, 1, "", "quantile"], [349, 1, 1, "", "sum"], [350, 1, 1, "", "tail"]], "polars.datatypes": [[67, 0, 1, "", "Array"], [68, 0, 1, "", "Binary"], [69, 0, 1, "", "Boolean"], [70, 0, 1, "", "Categorical"], [71, 0, 1, "", "DataType"], [72, 0, 1, "", "Date"], [73, 0, 1, "", "Datetime"], [74, 0, 1, "", "Decimal"], [75, 0, 1, "", "Duration"], [76, 0, 1, "", "Enum"], [77, 0, 1, "", "Field"], [78, 0, 1, "", "Float32"], [79, 0, 1, "", "Float64"], [80, 0, 1, "", "Int128"], [81, 0, 1, "", "Int16"], [82, 0, 1, "", "Int32"], [83, 0, 1, "", "Int64"], [84, 0, 1, "", "Int8"], [85, 0, 1, "", "List"], [86, 0, 1, "", "Null"], [87, 0, 1, "", "Object"], [88, 0, 1, "", "String"], [89, 0, 1, "", "Struct"], [90, 0, 1, "", "Time"], [91, 0, 1, "", "UInt16"], [92, 0, 1, "", "UInt32"], [93, 0, 1, "", "UInt64"], [94, 0, 1, "", "UInt8"], [95, 0, 1, "", "Unknown"], [96, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[70, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[84, 1, 1, "", "__init__"]], "polars.datatypes.List": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[86, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[87, 1, 1, "", "__init__"]], "polars.datatypes.String": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[89, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[93, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[94, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[95, 1, 1, "", "__init__"]], "polars.exceptions": [[101, 6, 1, "", "CategoricalRemappingWarning"], [102, 6, 1, "", "ChronoFormatWarning"], [103, 6, 1, "", "ColumnNotFoundError"], [104, 6, 1, "", "ComputeError"], [105, 6, 1, "", "CustomUFuncWarning"], [106, 6, 1, "", "DataOrientationWarning"], [107, 6, 1, "", "DuplicateError"], [108, 6, 1, "", "InvalidOperationError"], [109, 6, 1, "", "MapWithoutReturnDtypeWarning"], [110, 6, 1, "", "ModuleUpgradeRequiredError"], [111, 6, 1, "", "NoDataError"], [112, 6, 1, "", "NoRowsReturnedError"], [113, 6, 1, "", "OutOfBoundsError"], [114, 6, 1, "", "PanicException"], [115, 6, 1, "", "ParameterCollisionError"], [116, 6, 1, "", "PerformanceWarning"], [117, 6, 1, "", "PolarsError"], [118, 6, 1, "", "PolarsInefficientMapWarning"], [119, 6, 1, "", "PolarsWarning"], [120, 6, 1, "", "RowsError"], [121, 6, 1, "", "SQLInterfaceError"], [122, 6, 1, "", "SQLSyntaxError"], [123, 6, 1, "", "SchemaError"], [124, 6, 1, "", "SchemaFieldNotFoundError"], [125, 6, 1, "", "ShapeError"], [126, 6, 1, "", "StringCacheMismatchError"], [127, 6, 1, "", "StructFieldNotFoundError"], [128, 6, 1, "", "TooManyRowsReturnedError"], [129, 6, 1, "", "UnstableWarning"], [130, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[141, 1, 1, "", "next_batches"]], "polars.io.parquet": [[142, 0, 1, "", "ParquetFieldOverwrites"]], "polars.io.parquet.ParquetFieldOverwrites": [[142, 1, 1, "", "__init__"]], "polars.io.partition": [[143, 0, 1, "", "BasePartitionContext"], [144, 0, 1, "", "KeyedPartition"], [145, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[143, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[144, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[145, 1, 1, "", "__init__"]], "polars.io.plugins": [[146, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[963, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[963, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[964, 1, 1, "", "agg"], [965, 1, 1, "", "all"], [966, 1, 1, "", "count"], [967, 1, 1, "", "first"], [968, 1, 1, "", "head"], [969, 1, 1, "", "last"], [970, 1, 1, "", "len"], [971, 1, 1, "", "map_groups"], [972, 1, 1, "", "max"], [973, 1, 1, "", "mean"], [974, 1, 1, "", "median"], [975, 1, 1, "", "min"], [976, 1, 1, "", "n_unique"], [977, 1, 1, "", "quantile"], [978, 1, 1, "", "sum"], [979, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[980, 1, 1, "", "cancel"], [981, 1, 1, "", "fetch"], [982, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[148, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[994, 0, 1, "", "Selector"], [994, 4, 1, "", "all"], [994, 4, 1, "", "alpha"], [994, 4, 1, "", "alphanumeric"], [994, 4, 1, "", "array"], [994, 4, 1, "", "binary"], [994, 4, 1, "", "boolean"], [994, 4, 1, "", "by_dtype"], [994, 4, 1, "", "by_index"], [994, 4, 1, "", "by_name"], [994, 4, 1, "", "categorical"], [994, 4, 1, "", "contains"], [994, 4, 1, "", "date"], [994, 4, 1, "", "datetime"], [994, 4, 1, "", "decimal"], [994, 4, 1, "", "digit"], [994, 4, 1, "", "duration"], [994, 4, 1, "", "ends_with"], [994, 4, 1, "", "enum"], [994, 4, 1, "", "exclude"], [994, 4, 1, "", "expand_selector"], [994, 4, 1, "", "first"], [994, 4, 1, "", "float"], [994, 4, 1, "", "integer"], [994, 4, 1, "", "is_selector"], [994, 4, 1, "", "last"], [994, 4, 1, "", "list"], [994, 4, 1, "", "matches"], [994, 4, 1, "", "nested"], [994, 4, 1, "", "numeric"], [994, 4, 1, "", "signed_integer"], [994, 4, 1, "", "starts_with"], [994, 4, 1, "", "string"], [994, 4, 1, "", "struct"], [994, 4, 1, "", "temporal"], [994, 4, 1, "", "time"], [994, 4, 1, "", "unsigned_integer"]], "polars.selectors.Selector": [[994, 1, 1, "", "as_expr"], [994, 1, 1, "", "exclude"]], "polars.testing": [[175, 4, 1, "", "assert_frame_equal"], [176, 4, 1, "", "assert_frame_not_equal"], [177, 4, 1, "", "assert_series_equal"], [178, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[179, 0, 1, "", "column"], [180, 4, 1, "", "columns"], [181, 4, 1, "", "create_list_strategy"], [182, 4, 1, "", "dataframes"], [183, 4, 1, "", "dtypes"], [184, 4, 1, "", "lists"], [185, 4, 1, "", "load_profile"], [186, 4, 1, "", "series"], [187, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[179, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 13, 39, 40, 41, 42, 48, 49, 56, 62, 67, 77, 89, 97, 100, 102, 108, 132, 139, 146, 151, 152, 153, 154, 156, 157, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 186, 212, 214, 215, 226, 227, 230, 235, 238, 243, 244, 249, 255, 258, 259, 263, 271, 278, 280, 284, 286, 288, 291, 294, 295, 302, 311, 314, 319, 321, 322, 323, 324, 325, 330, 331, 356, 368, 407, 442, 474, 479, 499, 502, 522, 528, 532, 545, 562, 584, 613, 614, 626, 635, 640, 647, 648, 655, 656, 667, 674, 676, 709, 713, 721, 722, 723, 725, 727, 736, 737, 740, 741, 743, 750, 751, 752, 753, 757, 761, 763, 765, 773, 782, 783, 784, 785, 790, 797, 800, 803, 804, 813, 814, 816, 817, 823, 828, 829, 830, 831, 833, 835, 836, 838, 846, 848, 850, 851, 852, 858, 864, 868, 885, 887, 898, 908, 909, 913, 914, 924, 933, 938, 939, 945, 950, 951, 952, 953, 954, 957, 958, 971, 988, 993, 994, 998, 999, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1112, 1115, 1116, 1119, 1121, 1123, 1124, 1125, 1128, 1136, 1138, 1139, 1140, 1141, 1146, 1147, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1165, 1167, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1322, 1324, 1325, 1326, 1327, 1328, 1329, 1331, 1332, 1333, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1401, 1406, 1410, 1414, 1417, 1424, 1425], "0": [1, 7, 8, 9, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 42, 48, 52, 53, 58, 59, 60, 62, 64, 66, 67, 70, 74, 85, 97, 133, 139, 147, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 228, 229, 233, 234, 235, 237, 238, 241, 242, 243, 244, 245, 249, 250, 254, 256, 257, 258, 261, 264, 265, 267, 268, 269, 270, 271, 274, 275, 276, 277, 280, 281, 282, 284, 286, 288, 290, 291, 292, 293, 294, 301, 302, 303, 304, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 324, 326, 327, 330, 332, 333, 335, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 356, 359, 360, 374, 378, 380, 381, 383, 387, 388, 389, 390, 391, 392, 395, 396, 397, 400, 401, 403, 406, 411, 418, 421, 423, 430, 432, 437, 440, 442, 443, 449, 450, 451, 452, 453, 454, 461, 462, 463, 467, 468, 469, 475, 476, 480, 484, 486, 487, 491, 495, 498, 500, 502, 505, 506, 508, 509, 513, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 531, 532, 534, 536, 537, 539, 541, 543, 547, 548, 550, 552, 555, 557, 558, 559, 560, 562, 564, 569, 570, 573, 576, 578, 580, 581, 582, 588, 589, 601, 602, 605, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 621, 626, 629, 632, 633, 634, 636, 638, 647, 648, 649, 650, 651, 653, 654, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 704, 705, 706, 710, 711, 712, 715, 720, 721, 722, 725, 726, 729, 754, 765, 766, 767, 769, 770, 771, 773, 774, 778, 779, 780, 782, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 799, 801, 808, 812, 815, 821, 822, 824, 825, 826, 829, 832, 833, 834, 838, 840, 841, 843, 844, 845, 846, 847, 851, 854, 855, 856, 857, 858, 859, 864, 868, 884, 885, 887, 888, 889, 890, 892, 894, 895, 897, 898, 900, 901, 903, 904, 905, 907, 908, 909, 912, 913, 917, 919, 920, 923, 924, 927, 929, 930, 931, 933, 936, 937, 938, 943, 945, 946, 947, 950, 955, 957, 959, 960, 961, 964, 966, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 988, 993, 994, 998, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1018, 1024, 1035, 1036, 1038, 1040, 1047, 1060, 1069, 1070, 1072, 1075, 1076, 1077, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1098, 1102, 1107, 1108, 1109, 1111, 1113, 1117, 1121, 1124, 1128, 1131, 1132, 1134, 1135, 1139, 1142, 1145, 1147, 1148, 1149, 1150, 1155, 1160, 1163, 1168, 1169, 1171, 1174, 1175, 1177, 1180, 1183, 1185, 1186, 1187, 1188, 1191, 1192, 1199, 1200, 1203, 1206, 1208, 1210, 1211, 1212, 1218, 1219, 1231, 1232, 1235, 1237, 1238, 1239, 1240, 1241, 1245, 1246, 1252, 1253, 1259, 1262, 1264, 1265, 1266, 1271, 1272, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1300, 1308, 1309, 1310, 1311, 1314, 1315, 1316, 1319, 1324, 1325, 1326, 1329, 1330, 1334, 1340, 1358, 1371, 1373, 1374, 1376, 1379, 1381, 1382, 1383, 1384, 1389, 1390, 1391, 1401, 1406, 1410, 1416, 1418, 1419, 1420, 1423, 1424, 1426, 1427, 1429, 1431, 1432], "00": [29, 42, 73, 215, 222, 244, 326, 356, 470, 471, 474, 478, 489, 490, 492, 496, 497, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 679, 681, 683, 685, 687, 690, 692, 694, 750, 753, 757, 808, 809, 810, 811, 825, 854, 855, 856, 868, 887, 895, 909, 988, 994, 1092, 1093, 1096, 1097, 1098, 1100, 1101, 1102, 1108, 1109, 1113, 1115, 1116, 1117, 1118, 1122, 1123, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1139, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1340, 1354, 1357, 1361, 1401, 1424], "000": [9, 12, 29, 42, 54, 153, 356, 1340, 1432], "0000": [318, 356, 1384, 1401, 1432], "000000": [426, 427, 502, 716, 1043, 1044, 1320], "00000001": [13, 781, 868], "0000001": 760, "00000010": [781, 868], "00000011": [781, 868], "00000100": [781, 868], "00001000": [781, 868], "00001010": [781, 868], "00001011": [781, 868], "0000e": 13, "0000ff": [426, 427, 716, 1043, 1044, 1320], "0001": 502, "000100": 502, "000101": 502, "0005": 994, "00050": 994, "000800": 1128, "001": [60, 760, 811, 1131, 1132, 1134, 1364], "002": [811, 1131, 1132, 1134], "005": [1142, 1401], "00prefix": 994, "00z": [750, 753, 1354, 1357], "01": [30, 58, 72, 73, 182, 215, 222, 242, 244, 259, 288, 326, 356, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 750, 752, 753, 757, 792, 805, 806, 807, 808, 809, 810, 811, 825, 868, 887, 895, 909, 914, 936, 988, 994, 1091, 1093, 1095, 1096, 1097, 1098, 1101, 1102, 1108, 1109, 1113, 1115, 1116, 1117, 1118, 1121, 1122, 1123, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1139, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1354, 1356, 1357, 1361, 1401, 1424, 1427], "010": [9, 755, 1359], "01000": 30, "01000010": [781, 868], "01000110": [781, 868], "012": [696, 733, 868, 1297, 1337, 1401], "0123": [760, 1364], "01234": [696, 868, 1297, 1401], "012345": 1128, "015625": [1262, 1401], "01\u00b2": [733, 1337], "02": [58, 215, 222, 242, 244, 288, 326, 356, 469, 471, 473, 479, 489, 490, 492, 496, 501, 502, 504, 507, 509, 513, 675, 679, 681, 683, 685, 687, 690, 692, 694, 695, 750, 752, 753, 757, 792, 805, 806, 807, 808, 809, 810, 811, 825, 868, 887, 895, 909, 936, 988, 994, 1038, 1093, 1095, 1097, 1098, 1101, 1102, 1108, 1109, 1113, 1115, 1116, 1117, 1121, 1122, 1123, 1126, 1127, 1130, 1133, 1135, 1136, 1235, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1354, 1356, 1357, 1361, 1401, 1424, 1425], "03": [58, 139, 151, 215, 244, 259, 288, 326, 356, 471, 473, 474, 479, 481, 489, 490, 492, 495, 496, 497, 499, 501, 502, 503, 504, 507, 509, 510, 513, 519, 532, 675, 679, 681, 683, 685, 687, 690, 692, 694, 752, 757, 805, 806, 807, 808, 809, 810, 811, 868, 887, 909, 914, 936, 988, 994, 1093, 1095, 1096, 1101, 1102, 1108, 1109, 1115, 1116, 1117, 1122, 1123, 1125, 1127, 1129, 1130, 1133, 1135, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1356, 1361, 1401], "037037": [1262, 1401], "04": [172, 215, 222, 244, 326, 356, 473, 474, 489, 490, 495, 496, 497, 499, 503, 504, 507, 509, 513, 679, 681, 683, 685, 687, 690, 692, 694, 750, 792, 805, 808, 809, 811, 868, 887, 895, 909, 988, 994, 1096, 1109, 1113, 1115, 1116, 1117, 1122, 1125, 1129, 1130, 1133, 1135, 1139, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1354, 1401, 1424], "047198": 1426, "05": [18, 172, 175, 176, 177, 178, 182, 215, 222, 326, 356, 469, 472, 473, 474, 475, 476, 480, 481, 484, 485, 486, 487, 489, 490, 491, 496, 498, 499, 500, 502, 503, 792, 805, 806, 808, 809, 887, 895, 988, 994, 1095, 1096, 1097, 1098, 1122, 1123, 1125, 1126, 1128, 1129, 1136, 1424, 1425, 1427], "050545": 139, "0522623626787952": [1192, 1401], "0545": [1097, 1098, 1126], "05t10": 1128, "06": [182, 215, 326, 356, 469, 473, 488, 494, 496, 497, 498, 510, 511, 805, 808, 825, 887, 988, 994, 1091, 1122, 1123, 1128, 1136], "060": [475, 476, 480, 484, 486, 487, 491, 498, 500], "0601749420166": [230, 356], "06293300616044681": [1142, 1401], "07": [18, 151, 182, 222, 356, 469, 472, 473, 485, 496, 497, 502, 510, 750, 805, 806, 808, 809, 817, 895, 988, 994, 1091, 1095, 1122, 1128, 1354, 1424, 1427], "071068": [222, 356, 895, 988], "08": [151, 175, 176, 177, 178, 222, 259, 288, 303, 356, 469, 473, 489, 490, 497, 502, 675, 750, 809, 811, 825, 868, 895, 914, 936, 988, 994, 1091, 1123, 1136, 1354, 1424, 1425], "085537": [1151, 1401], "09": [58, 151, 222, 288, 356, 469, 473, 489, 490, 502, 550, 655, 675, 754, 805, 806, 808, 856, 868, 895, 936, 988, 994, 1091, 1177, 1358, 1401], "090909": [656, 868], "094395": 1426, "098612": [610, 868, 1238, 1240, 1401, 1423], "0999": [472, 485], "0_": [42, 356], "0m": [478, 1100], "0x11bc0ad80": 993, "0\u00b5": 502, "1": [1, 7, 8, 9, 11, 13, 14, 15, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 52, 53, 58, 59, 60, 61, 62, 64, 66, 67, 70, 85, 89, 97, 103, 106, 107, 108, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 152, 155, 156, 157, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 182, 186, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 363, 364, 366, 367, 368, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 430, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 622, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 736, 737, 738, 742, 743, 744, 745, 746, 747, 754, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 864, 868, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 988, 994, 998, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1047, 1058, 1059, 1060, 1064, 1065, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1165, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1325, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1340, 1341, 1342, 1346, 1347, 1358, 1364, 1365, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1401, 1406, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432], "10": [15, 18, 19, 29, 37, 39, 41, 42, 44, 45, 48, 58, 66, 139, 151, 152, 154, 166, 174, 212, 217, 222, 226, 232, 241, 242, 244, 246, 248, 249, 250, 255, 259, 262, 263, 275, 279, 281, 286, 288, 294, 303, 307, 330, 335, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 381, 385, 393, 394, 395, 397, 451, 457, 460, 465, 469, 470, 472, 473, 475, 476, 478, 480, 484, 485, 486, 487, 489, 490, 491, 495, 496, 497, 498, 500, 502, 510, 513, 519, 540, 541, 542, 547, 554, 566, 574, 581, 583, 589, 599, 601, 603, 607, 609, 625, 627, 638, 653, 655, 656, 659, 669, 670, 675, 707, 755, 765, 768, 781, 792, 793, 801, 806, 808, 809, 812, 815, 817, 819, 827, 828, 853, 856, 868, 890, 891, 895, 898, 909, 910, 912, 914, 918, 928, 930, 936, 938, 948, 949, 957, 964, 967, 969, 972, 973, 974, 975, 976, 977, 978, 988, 994, 1073, 1087, 1091, 1092, 1094, 1095, 1100, 1110, 1122, 1128, 1136, 1139, 1142, 1148, 1170, 1182, 1196, 1204, 1213, 1219, 1229, 1231, 1233, 1237, 1239, 1243, 1259, 1272, 1299, 1301, 1359, 1372, 1379, 1381, 1384, 1401, 1410, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1427, 1432], "100": [12, 19, 29, 42, 54, 135, 138, 147, 151, 152, 153, 156, 160, 161, 162, 166, 170, 212, 260, 280, 299, 356, 502, 669, 670, 700, 714, 724, 726, 738, 810, 868, 915, 942, 988, 994, 1144, 1239, 1255, 1271, 1272, 1279, 1281, 1285, 1304, 1318, 1330, 1333, 1342, 1358, 1401, 1421, 1432], "1000": [230, 312, 333, 356, 386, 868, 961, 988, 1131, 1239, 1378, 1401, 1432], "10000": [151, 257, 356], "100000": [12, 29], "1000000": [13, 1134], "1001": [333, 356, 961, 988], "1002": [333, 356, 961, 988], "10047419486152048166": [245, 356], "1005": [386, 868], "100_000": [54, 153, 846, 919, 988], "100\u00b5": 502, "101": [9, 29, 260, 356, 473, 502, 755, 915, 988, 994, 1359, 1432], "101000": 473, "10101": [29, 1427], "1010101": 9, "101514": [222, 356, 895, 988], "102": [260, 356, 915, 988], "1024": [39, 48, 49, 52, 151, 152, 153, 161, 170, 356, 430, 988, 1047], "1040361802642717": [1192, 1401], "107149": 1426, "10734580197236529959": [1169, 1401], "1073741824": [701, 868], "10783150408545073287": [245, 356], "107_930_000": 1410, "10_000": [42, 356], "10i": [244, 356, 909, 988], "10m": [497, 510, 1123, 1136], "10t00": 502, "11": [12, 18, 48, 52, 174, 182, 213, 222, 259, 288, 356, 381, 489, 490, 492, 497, 510, 534, 547, 581, 632, 656, 665, 675, 677, 691, 707, 781, 825, 851, 856, 864, 868, 884, 890, 891, 895, 910, 914, 918, 930, 936, 949, 988, 994, 1118, 1123, 1136, 1243, 1278, 1401, 1419], "110": [226, 356, 738, 755, 898, 988, 1359], "1101441246220388612": [541, 868], "111": [12, 1421], "11111": 1124, "111110": 1124, "11111001": [781, 868], "11111010": [781, 868], "11111111": 12, "112": [701, 868, 1432], "11330": 181, "1152921504606846976": [1268, 1401], "116": 181, "11638928888656214026": [541, 868], "118034": [947, 988], "11aa": 1424, "11aabb": 1424, "11h": [470, 1092], "12": [28, 42, 58, 139, 151, 174, 182, 222, 244, 255, 259, 260, 288, 303, 326, 356, 381, 459, 469, 470, 472, 473, 477, 485, 488, 489, 490, 492, 493, 494, 495, 502, 511, 512, 519, 547, 581, 613, 629, 656, 664, 675, 691, 701, 715, 736, 754, 802, 805, 808, 809, 810, 825, 828, 854, 855, 856, 868, 895, 909, 910, 914, 915, 918, 936, 943, 949, 988, 994, 1092, 1094, 1095, 1107, 1108, 1110, 1114, 1121, 1128, 1148, 1243, 1296, 1319, 1341, 1358, 1401, 1423, 1424, 1425, 1427, 1429, 1432], "120": [260, 356, 811, 915, 988, 1426], "1200": [696, 868], "120134": [754, 1358], "121": 1432, "123": [9, 622, 715, 722, 737, 760, 858, 994, 1319, 1326, 1364, 1377, 1401], "123000": 994, "1232e": [1075, 1077, 1401], "1234": [29, 696, 868], "12345": [817, 1070, 1128, 1160, 1296, 1401], "1234500": 994, "123456": [9, 994], "1234567": 29, "123456780": 139, "12346": 817, "123465": 994, "123a123": 737, "123abc": [736, 1340, 1341], "125": [1, 42, 62, 356, 379, 660, 847, 868, 946, 988, 1259, 1262, 1401], "1252": 151, "127": [1389, 1401, 1420], "128": [60, 74, 80, 1259, 1401], "129": [701, 868], "13": [142, 216, 217, 222, 233, 234, 241, 260, 261, 275, 288, 330, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 381, 469, 475, 476, 480, 484, 486, 487, 491, 498, 500, 625, 627, 675, 754, 795, 801, 804, 808, 815, 852, 854, 857, 868, 888, 889, 895, 903, 904, 915, 917, 936, 957, 967, 969, 972, 973, 974, 975, 976, 977, 978, 988, 1091, 1123, 1136, 1137, 1243, 1358, 1401, 1420], "130": [260, 356, 915, 988], "13382926553367784577": [541, 868], "134821952": 1410, "134_821_952": 1410, "135": [789, 1426], "13614470193936745724": [541, 868], "13756996518000038261": [1169, 1401], "13d": 502, "13h": [470, 1092], "14": [41, 174, 222, 244, 260, 264, 288, 326, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 470, 475, 476, 480, 484, 486, 487, 491, 498, 500, 502, 547, 622, 665, 808, 854, 855, 868, 895, 909, 915, 936, 967, 969, 972, 973, 974, 975, 976, 977, 978, 988, 994, 1092, 1123, 1128], "140": [260, 356, 915, 988], "141592653589793": 12, "141593": [664, 868, 1005, 1401, 1423, 1426], "142857": [1259, 1401], "143": [754, 1358, 1432], "1433": [40, 356], "1436e16": 182, "1438741209321515184": [245, 356], "1440": [507, 1133], "1443e235": 1432, "149": 1432, "14d": 994, "14h": 502, "15": [12, 42, 142, 174, 222, 244, 260, 264, 288, 356, 461, 465, 490, 495, 497, 502, 510, 519, 659, 675, 691, 733, 802, 808, 854, 855, 868, 895, 909, 915, 936, 988, 994, 1084, 1087, 1123, 1128, 1136, 1148, 1337, 1401, 1420, 1424], "150": [260, 356, 915, 988, 1281, 1401], "1500": [174, 185], "15000": [257, 356], "153061": [562, 868], "155": 147, "15836": 182, "15_000": [257, 356], "16": [1, 42, 60, 81, 91, 174, 188, 222, 244, 260, 288, 330, 356, 411, 457, 460, 495, 502, 547, 629, 636, 655, 660, 675, 755, 765, 801, 811, 812, 815, 825, 868, 895, 909, 915, 936, 943, 957, 988, 994, 1123, 1136, 1259, 1309, 1359, 1373, 1401, 1420, 1423, 1424, 1429], "160": [260, 356, 915, 988], "165": [1123, 1136], "1656e15": [1077, 1401], "166667": [778, 868, 1259, 1390, 1401], "1666683077": 817, "1666683099": 817, "167": 58, "16996": 1432, "16h": 994, "17": [139, 174, 182, 230, 259, 335, 356, 519, 545, 655, 677, 695, 797, 817, 855, 868, 914, 964, 988, 1075, 1077, 1123, 1148, 1173, 1278, 1401, 1432], "170": [147, 260, 356, 915, 988], "17293822569102704640": [1268, 1401], "174": 1432, "175201": [705, 868, 1310, 1401], "1755e": [179, 182], "1764": 62, "17888890": [230, 356], "179": 1432, "17_500": [257, 356], "18": [40, 139, 156, 222, 272, 288, 356, 460, 497, 510, 513, 547, 638, 655, 675, 765, 868, 895, 925, 930, 936, 988, 994, 1128, 1139, 1286, 1401, 1418, 1429], "180": [147, 463, 664, 868, 1426], "1800": [495, 1121], "1844": 182, "18446744073709551614": [1268, 1401], "185_000_000": 1410, "186": 1432, "1875": [693, 868, 955, 988], "1897": [472, 485, 1094, 1110], "18d": 994, "19": [182, 259, 288, 356, 472, 497, 675, 681, 683, 685, 687, 754, 868, 914, 936, 988, 1094, 1123, 1136, 1282, 1284, 1286, 1288, 1358, 1401], "1920": 1424, "196": 1425, "1964": [930, 988], "1969": [1424, 1425], "1970": [72, 73, 172, 510, 1136, 1410], "1972": 1410, "1976": [483, 514], "1977": [483, 514], "1978": [475, 476, 480, 483, 484, 486, 487, 491, 498, 500, 514, 1425], "1979": [483, 514], "1980": 502, "1985": [806, 809], "1990": [151, 1410], "1993": 1410, "1994": 1410, "1995": 151, "1998": [492, 1118], "1999": [303, 356, 492, 502, 994, 1118, 1128, 1427], "199992": [919, 988], "199994": [919, 988], "199996": [919, 988], "199998": [919, 988], "1_000_000": [230, 356, 1146, 1401], "1_234_500": 994, "1d": [244, 259, 288, 326, 356, 471, 492, 497, 502, 504, 507, 510, 513, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 811, 827, 855, 856, 868, 909, 914, 936, 988, 994, 1093, 1101, 1108, 1118, 1123, 1127, 1130, 1133, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1e": [13, 175, 176, 177, 178, 550, 868, 1177, 1401], "1e6": 13, "1h": [244, 259, 288, 326, 356, 478, 492, 497, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1100, 1102, 1118, 1123, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1i": [244, 288, 326, 356, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 868, 909, 936, 988, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1m": [244, 259, 288, 326, 356, 492, 497, 509, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1131, 1132, 1134, 1135, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1mo": [244, 259, 288, 326, 356, 474, 489, 490, 492, 496, 497, 503, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1096, 1114, 1115, 1116, 1118, 1119, 1120, 1122, 1123, 1129, 1136, 1137, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1n": [244, 259, 288, 326, 356, 492, 497, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1q": [244, 259, 288, 326, 356, 492, 497, 510, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1136, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1st_col": 994, "1u": [244, 259, 288, 326, 356, 492, 497, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1w": [244, 259, 288, 326, 356, 492, 497, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1w2d": [806, 807], "1y": [244, 259, 288, 326, 356, 492, 497, 510, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1136, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "1y2mo": [492, 1118], "1zy3": [715, 1319], "2": [1, 7, 8, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 66, 67, 85, 89, 103, 106, 108, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 154, 160, 161, 163, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 184, 196, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 363, 364, 367, 368, 374, 378, 379, 380, 381, 383, 385, 386, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 429, 430, 432, 437, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 482, 485, 488, 489, 490, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 629, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 841, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 864, 868, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 988, 993, 994, 998, 999, 1000, 1003, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1046, 1047, 1058, 1059, 1065, 1069, 1070, 1071, 1072, 1074, 1075, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1091, 1092, 1095, 1097, 1098, 1100, 1102, 1103, 1106, 1107, 1108, 1110, 1112, 1113, 1114, 1115, 1116, 1120, 1121, 1122, 1123, 1126, 1136, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1165, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1195, 1196, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1309, 1311, 1312, 1313, 1314, 1315, 1316, 1319, 1325, 1327, 1329, 1330, 1331, 1333, 1334, 1336, 1337, 1340, 1341, 1346, 1347, 1349, 1350, 1351, 1354, 1355, 1357, 1358, 1359, 1360, 1363, 1365, 1367, 1368, 1370, 1371, 1372, 1373, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1401, 1406, 1410, 1411, 1413, 1414, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432], "20": [40, 41, 42, 67, 139, 151, 152, 154, 156, 157, 159, 163, 166, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 212, 213, 222, 226, 232, 244, 248, 263, 272, 279, 281, 286, 288, 303, 313, 314, 318, 326, 332, 337, 356, 393, 394, 395, 451, 465, 472, 475, 476, 480, 484, 485, 486, 487, 491, 497, 498, 500, 502, 510, 513, 534, 541, 547, 613, 621, 632, 659, 679, 681, 683, 685, 687, 690, 692, 694, 720, 754, 765, 780, 808, 817, 827, 847, 855, 868, 884, 895, 898, 901, 909, 925, 928, 936, 946, 960, 966, 988, 994, 1087, 1094, 1098, 1110, 1123, 1128, 1136, 1139, 1145, 1151, 1168, 1271, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1324, 1358, 1379, 1381, 1384, 1401, 1417, 1418, 1421, 1427, 1429], "200": [42, 356, 505, 506, 508, 669, 670, 868, 994, 1144, 1255, 1271, 1272, 1279, 1281, 1285, 1401, 1421], "2000": [472, 482, 485, 489, 490, 492, 994, 1094, 1104, 1110, 1115, 1116, 1118, 1124, 1410, 1424], "200000": [505, 919, 988], "200000000": 508, "2001": [18, 471, 472, 477, 479, 482, 485, 488, 492, 493, 494, 497, 501, 510, 511, 512, 513, 679, 681, 683, 685, 687, 690, 692, 694, 750, 868, 994, 1093, 1094, 1099, 1101, 1102, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1117, 1118, 1119, 1120, 1123, 1127, 1136, 1137, 1138, 1139, 1140, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1354, 1401], "2002": [151, 482, 492, 1104, 1118, 1140], "2003": [492, 817, 1118], "2004": [492, 1118], "2005": [492, 1118], "2006": [492, 1118], "2008": 1410, "200m": [505, 506, 508], "2010": [303, 356, 502, 994], "2011": [470, 1092], "2012": [470, 1092, 1427], "2013": 1121, "2016": [259, 356, 914, 988], "2017": [259, 356, 914, 988], "2018": [259, 356, 496, 914, 988, 1122], "2019": [259, 356, 914, 988], "202": 1425, "2020": [155, 167, 215, 222, 242, 259, 288, 356, 359, 469, 474, 478, 481, 496, 499, 502, 503, 504, 505, 506, 507, 508, 509, 519, 675, 750, 752, 753, 792, 868, 887, 895, 914, 936, 988, 994, 1091, 1096, 1100, 1103, 1122, 1125, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1148, 1354, 1356, 1357, 1401, 1425], "2021": [215, 222, 242, 244, 326, 356, 750, 827, 887, 895, 909, 988, 994, 1097, 1098, 1105, 1126, 1354, 1424], "2022": [58, 215, 222, 242, 356, 473, 497, 510, 750, 806, 807, 809, 810, 811, 817, 887, 895, 988, 994, 1095, 1105, 1123, 1136, 1354], "2023": [18, 42, 139, 174, 257, 356, 473, 811, 827, 994, 1095], "2024": [174, 469, 475, 476, 480, 481, 484, 486, 487, 491, 495, 498, 500, 655, 792, 805, 806, 808, 809, 811, 868, 994, 1091, 1103, 1121, 1424, 1427], "2025": [469, 481, 495, 792, 825, 994, 1091, 1103], "2026": 1425, "2030": 1424, "2031": 994, "2040": 502, "2047317070637311557": [245, 356], "2055938745": 139, "2065": [475, 476, 480, 484, 486, 487, 491, 498, 500], "2068": 182, "207": 1425, "2077": [303, 356, 502, 994, 1128, 1424, 1425], "2095": 182, "20_000": [42, 356], "20t08": 502, "20t18": 1128, "20word": 154, "21": [174, 222, 272, 305, 356, 461, 472, 518, 520, 521, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 808, 817, 825, 843, 844, 868, 895, 925, 988, 994, 1084, 1094, 1147, 1149, 1150, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1295, 1401, 1418], "213": 1432, "2147483647": 1432, "2147483648": [1241, 1401], "21d": 994, "22": [48, 52, 174, 182, 356, 477, 493, 497, 510, 512, 513, 677, 679, 681, 683, 685, 687, 690, 692, 694, 750, 808, 864, 868, 988, 994, 1123, 1136, 1139, 1278, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1354, 1401, 1424, 1425, 1432], "221": 1432, "2246e": [1309, 1373, 1401], "225": [497, 510, 1426], "22500": 846, "22_000_000": 1410, "22_500": 846, "23": [12, 133, 182, 222, 244, 288, 318, 356, 473, 477, 480, 493, 495, 497, 502, 512, 675, 679, 681, 683, 685, 687, 690, 692, 694, 808, 811, 854, 855, 856, 868, 895, 909, 936, 946, 988, 994, 1095, 1102, 1121, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1384, 1401, 1431, 1432], "230498": 13, "230498095872587": 13, "2304980958725870923": 13, "232338648": 1410, "2337": [42, 356], "234": 29, "2345": 994, "23456789": 12, "235": 1432, "23h": 994, "24": [60, 174, 244, 258, 259, 264, 288, 303, 326, 356, 459, 461, 477, 492, 493, 497, 504, 510, 512, 636, 675, 679, 681, 683, 685, 687, 690, 692, 694, 733, 806, 807, 809, 810, 811, 855, 856, 868, 909, 913, 914, 936, 988, 1084, 1118, 1123, 1130, 1136, 1191, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1375, 1401, 1424, 1431], "24030": 181, "249": [781, 868], "25": [1, 29, 42, 62, 139, 222, 226, 244, 249, 259, 288, 313, 318, 326, 330, 356, 430, 465, 477, 478, 493, 502, 512, 519, 660, 662, 665, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 774, 808, 809, 810, 811, 817, 825, 826, 829, 855, 856, 868, 895, 898, 909, 914, 922, 936, 955, 957, 988, 994, 1047, 1086, 1087, 1100, 1128, 1142, 1148, 1171, 1259, 1264, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1340, 1401, 1418, 1423, 1429, 1430], "250": [781, 868, 1281, 1401, 1421, 1432], "2500": [257, 318, 356], "254508": [519, 868, 1148, 1401], "255": 1432, "256": [264, 356, 430, 1047, 1259, 1401, 1423], "2560": 1047, "259921": [449, 868, 1069, 1401, 1423], "25_000_000": 1410, "26": [40, 42, 174, 179, 180, 181, 182, 186, 222, 356, 478, 511, 895, 988, 1100], "266667": [222, 356, 895, 988], "27": [1, 62, 313, 349, 356, 460, 488, 494, 511, 765, 792, 868, 978, 994, 1091, 1262, 1379, 1401, 1431, 1432], "270": 1426, "28": [309, 314, 356, 379, 496, 513, 868, 1122, 1139, 1381, 1401, 1424, 1426, 1431, 1432], "283185": [664, 868], "2846": 356, "285714": [548, 868, 1175, 1401], "289962": 1426, "28_341_469": 1410, "29": [18, 174, 470, 489, 1092, 1115], "29096": 1432, "290994": [947, 988], "292432": [1006, 1401], "292893": [519, 868, 1148, 1401], "2_color_scal": [42, 356], "2d": [212, 288, 313, 314, 356, 492, 675, 827, 868, 936, 988, 1092, 1099], "2h": [679, 681, 683, 685, 687, 690, 692, 694, 868], "2i": [244, 356, 909, 988], "2m": [994, 1113], "2x": 181, "3": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 37, 39, 41, 42, 44, 45, 46, 47, 48, 53, 58, 59, 60, 61, 62, 66, 67, 85, 97, 103, 106, 108, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 154, 156, 160, 161, 162, 166, 172, 174, 175, 176, 177, 178, 181, 182, 183, 184, 186, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 363, 364, 368, 374, 379, 380, 381, 382, 384, 395, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 503, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 634, 635, 636, 637, 638, 639, 641, 643, 645, 646, 649, 652, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 708, 709, 710, 713, 714, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 751, 752, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 772, 773, 776, 777, 778, 780, 781, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 868, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 964, 965, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 988, 993, 994, 999, 1000, 1003, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1069, 1070, 1071, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1095, 1096, 1099, 1101, 1102, 1103, 1104, 1106, 1107, 1108, 1110, 1112, 1113, 1114, 1119, 1122, 1124, 1125, 1127, 1128, 1129, 1131, 1132, 1134, 1138, 1139, 1141, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1165, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1195, 1196, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1318, 1320, 1321, 1322, 1325, 1326, 1327, 1330, 1331, 1332, 1333, 1335, 1336, 1340, 1341, 1342, 1343, 1344, 1348, 1355, 1356, 1361, 1362, 1365, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1380, 1381, 1382, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1401, 1406, 1410, 1411, 1413, 1414, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432], "30": [42, 64, 154, 163, 171, 212, 222, 232, 244, 248, 263, 279, 286, 309, 330, 356, 359, 393, 394, 395, 465, 473, 475, 476, 480, 484, 486, 487, 488, 489, 491, 494, 496, 497, 498, 500, 502, 503, 510, 511, 541, 621, 701, 808, 825, 827, 854, 855, 868, 890, 895, 901, 909, 928, 930, 943, 957, 988, 994, 1087, 1095, 1115, 1122, 1123, 1128, 1129, 1136, 1168, 1401, 1406, 1417, 1418, 1421, 1423, 1424, 1426, 1427, 1430, 1432], "300": [309, 356, 540, 653, 670, 868, 994, 1272, 1279, 1281, 1285, 1401, 1421], "3000": 994, "3002": [472, 485, 1094, 1110], "30103": [609, 868, 1423], "3022416320763508302": [1169, 1401], "30_000": [42, 356], "30m": [244, 356, 497, 510, 909, 988, 1123, 1136], "30t16": 502, "31": [62, 67, 151, 152, 166, 175, 176, 177, 178, 222, 303, 356, 472, 473, 477, 485, 489, 492, 495, 503, 720, 750, 805, 808, 817, 827, 847, 895, 988, 994, 1092, 1094, 1095, 1099, 1110, 1115, 1121, 1128, 1129, 1145, 1271, 1324, 1354, 1401, 1425, 1427, 1429, 1432], "31t06": 1128, "32": [8, 60, 70, 72, 78, 82, 92, 175, 176, 177, 178, 254, 259, 288, 356, 613, 614, 636, 675, 701, 868, 914, 936, 988, 1088, 1119, 1259, 1287, 1401, 1418, 1424], "321": [29, 1432], "3212": [754, 1358], "321cba": 1424, "3265500": 994, "32971": [513, 1139], "32974": [513, 1139], "32976": [513, 1139], "32bit": [313, 356], "33": [222, 272, 356, 605, 695, 701, 729, 754, 868, 895, 925, 988, 1287, 1401, 1425], "333": [18, 696, 868, 1144, 1255, 1297, 1401], "33333": 1427, "333333": [250, 356, 638, 778, 825, 868, 912, 988, 1259, 1294, 1390, 1401, 1418], "34": [222, 356, 736, 750, 895, 988, 1341, 1354], "3420": [754, 1358], "343622": [706, 868], "345": [446, 447, 731, 732, 1064, 1065, 1335, 1336], "3450": [1297, 1401], "3456": 994, "34776706224699483": [1311, 1401], "35": [42, 356, 465, 502, 808, 868, 1087, 1401], "350": [356, 359, 540, 653, 868, 1281, 1401, 1406], "3500": [1297, 1401], "356": [477, 493, 512], "356194": [788, 789, 1426], "357": [477, 493, 512], "358": [477, 493, 512], "359": [477, 493, 512], "36": [222, 356, 895, 988, 1429], "360": [463, 664, 868, 1426], "361": 1432, "363961": [601, 1231], "366": [493, 1119], "37": [14, 142, 994], "370h": [519, 868, 1148, 1401], "37338": 1432, "38": [42, 139, 179, 182, 356], "38180177416060584": [688, 868, 1289, 1401], "381802": [688, 868, 1289, 1401], "386294": [610, 868, 1240, 1401, 1423], "389056": [523, 868, 1151, 1401, 1423], "39": [692, 817, 868], "39m": 994, "3_color_scal": [42, 356], "3d12h4m25": [244, 259, 288, 326, 356, 519, 675, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1148, 1401], "3f": [154, 750, 753, 1354, 1357], "3h": [1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "3i": [244, 288, 356, 909, 988], "3rd": [1331, 1355], "3xy": [715, 1319], "4": [1, 8, 11, 15, 19, 27, 37, 39, 41, 42, 44, 45, 48, 58, 59, 60, 61, 62, 66, 67, 85, 106, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 152, 154, 157, 159, 163, 166, 169, 170, 171, 174, 186, 210, 211, 212, 213, 214, 215, 216, 217, 221, 223, 227, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 272, 274, 275, 276, 278, 279, 280, 281, 284, 288, 290, 291, 298, 299, 302, 306, 307, 308, 309, 310, 311, 314, 317, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 368, 374, 378, 379, 380, 381, 383, 385, 397, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 418, 419, 420, 421, 423, 430, 441, 442, 443, 446, 447, 449, 450, 451, 455, 456, 459, 460, 461, 463, 466, 473, 476, 477, 485, 493, 494, 495, 496, 498, 499, 502, 504, 507, 509, 512, 516, 517, 519, 523, 524, 526, 527, 528, 530, 531, 532, 535, 536, 537, 538, 539, 542, 544, 546, 547, 548, 549, 559, 560, 564, 565, 566, 573, 574, 575, 576, 577, 578, 580, 581, 583, 591, 593, 594, 595, 596, 597, 598, 599, 603, 604, 609, 612, 613, 614, 634, 636, 638, 639, 641, 643, 645, 646, 649, 650, 651, 654, 655, 657, 658, 659, 660, 663, 665, 669, 670, 671, 672, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 703, 707, 708, 709, 710, 713, 715, 719, 722, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 743, 748, 749, 750, 751, 755, 760, 761, 763, 764, 765, 766, 768, 771, 772, 773, 774, 780, 781, 783, 785, 786, 788, 789, 790, 791, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 812, 814, 815, 819, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 864, 868, 883, 884, 885, 887, 888, 889, 890, 891, 894, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 925, 926, 928, 930, 931, 933, 936, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 960, 961, 964, 965, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 988, 993, 994, 998, 1003, 1006, 1013, 1020, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1047, 1058, 1059, 1064, 1065, 1070, 1071, 1073, 1079, 1084, 1086, 1088, 1098, 1102, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1120, 1122, 1125, 1130, 1133, 1135, 1137, 1138, 1145, 1148, 1152, 1153, 1155, 1156, 1162, 1163, 1165, 1170, 1171, 1174, 1175, 1176, 1177, 1178, 1182, 1185, 1186, 1187, 1188, 1190, 1196, 1203, 1204, 1205, 1206, 1207, 1208, 1213, 1217, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1233, 1234, 1249, 1252, 1253, 1256, 1259, 1260, 1261, 1262, 1266, 1267, 1271, 1272, 1273, 1276, 1277, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1298, 1300, 1304, 1305, 1308, 1311, 1312, 1313, 1317, 1319, 1323, 1326, 1329, 1331, 1335, 1336, 1338, 1339, 1344, 1346, 1347, 1352, 1353, 1354, 1355, 1359, 1364, 1365, 1368, 1370, 1372, 1378, 1381, 1383, 1385, 1386, 1392, 1401, 1406, 1410, 1411, 1413, 1414, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1429, 1430, 1431, 1432], "40": [42, 154, 212, 222, 232, 259, 263, 279, 356, 497, 502, 510, 541, 607, 754, 765, 868, 895, 914, 928, 988, 994, 1105, 1136, 1237, 1358, 1417, 1418, 1421, 1424], "400": [325, 356, 505, 506, 508, 954, 988, 1279, 1281, 1285, 1401, 1421], "4000000": [1146, 1401], "400157": 97, "404": [260, 356, 721, 723, 915, 988, 1325, 1327], "4096": 1423, "41": [222, 356, 692, 868, 895, 988, 1418, 1432], "412277": 182, "414214": [710, 868, 1314, 1401, 1423], "4160": 62, "416147": 1426, "4164": [259, 356, 914, 988], "4180": 151, "42": [62, 142, 222, 245, 272, 288, 356, 502, 675, 868, 895, 925, 936, 988, 1169, 1401, 1417, 1431], "424778": [664, 868], "428571": [518, 868, 1147, 1401], "429101": 1418, "4294967296": [48, 356], "43": [222, 288, 356, 460, 675, 692, 868, 895, 936, 988], "4321": [42, 356, 994], "433013": [689, 868, 947, 988], "44": [12, 42, 272, 356, 466, 868, 925, 988], "4411": [259, 356, 914, 988], "44225": [1069, 1401], "444": [12, 42, 356], "44444444444": 12, "45": [42, 222, 288, 356, 473, 497, 510, 675, 692, 715, 722, 762, 789, 808, 827, 854, 855, 868, 895, 936, 988, 994, 1095, 1123, 1128, 1136, 1177, 1319, 1326, 1367, 1401, 1423, 1424, 1426, 1430, 1432], "450": [1281, 1401], "45000": 846, "4500000": 994, "456": [9, 12, 473, 994, 1095, 1377, 1401], "456000": [473, 1095], "456001\u00b5": 994, "4566": [259, 356, 914, 988], "456789": [502, 994, 1124], "456789\u00b5": 994, "456m": 994, "457658": 1426, "459148": [515, 868], "46": 994, "4696": [259, 356, 914, 988], "47": [58, 222, 356, 692, 868, 895, 988, 994, 1418], "470": [930, 988], "47033": [688, 868, 1289, 1401], "47033046033698594": [688, 868, 1289, 1401], "475": [930, 988], "48": [14, 182, 288, 356, 675, 765, 868, 936, 988, 994], "4827": [259, 356, 914, 988], "485": 1432, "49": [222, 356, 895, 988, 994], "492474": [519, 868, 1148, 1401], "498": [260, 356, 915, 988], "4_500_000": 994, "4ab4a": 1424, "4d": [519, 868, 1148, 1401], "4f6228": [42, 356], "4f71": [42, 356], "4x": [256, 356], "5": [1, 7, 8, 11, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 37, 39, 41, 42, 44, 45, 48, 53, 58, 59, 61, 62, 66, 106, 132, 135, 136, 137, 138, 139, 141, 152, 174, 175, 177, 180, 182, 186, 211, 212, 215, 216, 217, 222, 223, 226, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 246, 247, 249, 250, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 267, 268, 269, 274, 275, 276, 278, 280, 281, 282, 284, 288, 291, 298, 299, 302, 303, 306, 307, 308, 309, 310, 311, 313, 314, 317, 318, 320, 323, 324, 325, 326, 329, 330, 332, 333, 335, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 368, 374, 379, 380, 383, 398, 399, 404, 405, 406, 408, 412, 416, 421, 423, 429, 430, 441, 442, 443, 446, 447, 450, 451, 461, 462, 463, 465, 466, 469, 472, 473, 474, 475, 476, 480, 481, 484, 485, 486, 487, 491, 496, 498, 499, 500, 502, 503, 509, 513, 517, 519, 521, 522, 525, 527, 531, 532, 536, 537, 539, 542, 544, 547, 549, 550, 553, 556, 557, 558, 559, 560, 564, 566, 573, 576, 577, 578, 580, 581, 583, 586, 588, 589, 593, 594, 595, 596, 597, 598, 602, 603, 607, 613, 634, 636, 638, 650, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 689, 691, 692, 693, 694, 695, 698, 709, 715, 725, 726, 727, 730, 731, 732, 751, 755, 766, 768, 772, 773, 774, 778, 786, 788, 789, 791, 792, 793, 794, 795, 797, 799, 801, 802, 803, 804, 805, 806, 808, 811, 812, 813, 814, 815, 819, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 845, 846, 847, 849, 851, 852, 853, 857, 858, 864, 868, 883, 887, 888, 889, 890, 891, 895, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 922, 923, 929, 930, 933, 936, 942, 943, 944, 945, 946, 947, 948, 949, 953, 954, 956, 957, 960, 961, 964, 966, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 988, 994, 1003, 1006, 1010, 1013, 1016, 1017, 1020, 1022, 1023, 1024, 1026, 1029, 1033, 1038, 1039, 1040, 1046, 1047, 1058, 1059, 1064, 1071, 1073, 1080, 1084, 1085, 1086, 1087, 1088, 1091, 1094, 1095, 1096, 1097, 1098, 1099, 1103, 1110, 1122, 1124, 1125, 1126, 1128, 1129, 1135, 1137, 1138, 1139, 1145, 1148, 1150, 1152, 1153, 1154, 1165, 1170, 1171, 1174, 1176, 1177, 1181, 1184, 1196, 1203, 1206, 1207, 1208, 1213, 1216, 1219, 1223, 1224, 1225, 1226, 1227, 1228, 1232, 1233, 1237, 1241, 1249, 1256, 1259, 1260, 1261, 1264, 1265, 1266, 1267, 1272, 1273, 1276, 1277, 1278, 1279, 1281, 1282, 1284, 1285, 1287, 1288, 1292, 1296, 1298, 1300, 1305, 1311, 1314, 1319, 1329, 1330, 1331, 1334, 1335, 1355, 1359, 1372, 1379, 1381, 1384, 1385, 1386, 1389, 1390, 1392, 1401, 1406, 1411, 1414, 1416, 1418, 1419, 1420, 1423, 1424, 1425, 1426, 1429, 1431, 1432], "50": [14, 29, 42, 212, 222, 232, 242, 356, 451, 497, 502, 510, 806, 807, 868, 895, 988, 994, 1073, 1086, 1136, 1340, 1401, 1417, 1418], "500": [42, 325, 356, 359, 475, 476, 480, 484, 486, 487, 491, 498, 500, 954, 988, 1109, 1111, 1117, 1279, 1281, 1285, 1401, 1406], "5000": [318, 356, 1384, 1401], "50000": 152, "500000": [484, 1109], "500000000": [491, 1117], "5000555": 994, "500_000": [475, 476, 480, 484, 486, 487, 491, 498, 500], "500m": [1109, 1111, 1117], "51": 994, "512": [48, 153, 256, 356, 430, 660, 868, 1047, 1259, 1401], "51966": [755, 1359], "52": [330, 356, 511, 695, 868, 957, 988], "523599": 1426, "527525": [1290, 1401], "53": [511, 1137, 1429], "533316061": 1410, "533_316_061": 1410, "54": [523, 868, 1192, 1401, 1423, 1432], "540": [463, 664, 868], "540302": 1426, "543": 9, "543081": [453, 868, 1076, 1401], "5432": 153, "54321": 9, "544": 1432, "544705": 797, "549306": [1010, 1401], "55": [42, 60, 356, 545, 550, 868, 1173, 1401, 1420, 1424, 1425], "555": [42, 356], "5555": 994, "55550": 994, "56": [139, 736, 769, 868, 1341], "566371": [664, 868], "567": 29, "56789": [1070, 1160, 1296, 1401], "57": [692, 868, 1293, 1296, 1401, 1426, 1432], "570796": [387, 389, 868, 1005, 1007, 1401, 1426], "575050513": [179, 182], "58": [147, 280, 356], "581139": [1086, 1401], "584963": [608, 868], "587401": [449, 868, 1423], "59": [139, 222, 356, 473, 487, 495, 498, 502, 532, 808, 854, 855, 856, 868, 895, 988, 994, 1095, 1113, 1121, 1124], "59815": [523, 868, 1423], "5_000_555": 994, "5th": [42, 356], "6": [1, 8, 11, 15, 37, 39, 41, 42, 44, 45, 46, 47, 48, 57, 59, 61, 66, 98, 99, 106, 132, 135, 136, 137, 138, 156, 160, 161, 174, 211, 212, 215, 218, 219, 223, 224, 225, 227, 228, 229, 231, 232, 235, 238, 239, 240, 241, 242, 244, 246, 248, 249, 250, 252, 254, 255, 256, 258, 259, 260, 262, 264, 266, 267, 268, 269, 270, 273, 274, 277, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 299, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 320, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 339, 349, 350, 356, 359, 360, 374, 379, 383, 404, 405, 406, 408, 411, 416, 442, 443, 446, 447, 459, 460, 466, 469, 473, 477, 481, 488, 492, 493, 494, 505, 506, 508, 511, 512, 515, 517, 526, 527, 532, 536, 542, 544, 547, 566, 567, 568, 577, 581, 594, 595, 596, 597, 601, 614, 650, 654, 661, 664, 665, 666, 671, 673, 675, 678, 680, 682, 684, 686, 689, 691, 692, 693, 695, 698, 703, 709, 715, 720, 731, 732, 755, 766, 768, 773, 781, 783, 785, 792, 794, 799, 801, 802, 803, 805, 808, 812, 815, 821, 828, 829, 833, 847, 851, 858, 864, 868, 883, 887, 890, 891, 892, 893, 896, 897, 899, 900, 901, 902, 905, 906, 907, 909, 910, 912, 913, 914, 915, 916, 918, 919, 927, 930, 932, 933, 934, 936, 937, 938, 940, 942, 943, 944, 945, 946, 949, 952, 953, 956, 957, 960, 961, 968, 978, 979, 988, 994, 1020, 1022, 1023, 1024, 1026, 1033, 1064, 1071, 1075, 1077, 1082, 1083, 1088, 1091, 1103, 1118, 1128, 1138, 1145, 1152, 1165, 1171, 1177, 1197, 1198, 1207, 1211, 1224, 1225, 1226, 1227, 1231, 1249, 1263, 1266, 1267, 1273, 1275, 1283, 1287, 1290, 1293, 1294, 1300, 1305, 1308, 1319, 1324, 1335, 1359, 1371, 1381, 1401, 1406, 1411, 1414, 1416, 1418, 1419, 1423, 1429, 1430, 1432], "60": [42, 212, 232, 280, 356, 480, 486, 487, 498, 509, 532, 692, 750, 868, 1119, 1124, 1135, 1268, 1293, 1354, 1401, 1426], "600": [325, 356, 505, 506, 508, 954, 988, 994], "60000": 484, "600000": 994, "60000000": 491, "60206": [609, 868, 1423], "605551": 849, "605551275463989": 849, "609438": 1423, "60_000": [475, 476, 480, 484, 486, 487, 491, 498, 500], "61": [280, 356], "625": [686, 868], "626172": [717, 1321], "63": [692, 868, 1293, 1401], "63204": 1432, "6331e16": [1373, 1401, 1426], "636253": 1426, "64": [1, 60, 62, 73, 75, 79, 83, 90, 93, 173, 210, 318, 356, 454, 636, 660, 868, 1259, 1262, 1401, 1423], "64030": [755, 1359], "642093": 1426, "647961": 182, "64bit": [174, 667, 868, 1268, 1401], "65": [226, 356, 898, 988, 1142, 1401], "650": [540, 653, 868], "65280": [755, 1359], "654": [29, 847, 946, 988], "65432": 1427, "654321": 622, "65536": 1423, "65552": [429, 1046], "66": [259, 325, 356, 692, 781, 868, 914, 954, 988, 1192, 1287, 1293, 1401], "663053": 139, "666": 994, "666000": 994, "666667": [222, 250, 327, 344, 356, 518, 825, 826, 832, 868, 895, 912, 955, 973, 988, 1147, 1401], "666f6f": [717, 1321], "67500": 846, "676": [260, 356, 915, 988], "678": [715, 722, 1319, 1326], "6789": [30, 994], "67890": 30, "686241": 1418, "69": [692, 868, 1192, 1293, 1401], "693147": [610, 868, 1238, 1240, 1401, 1423], "6_000_000": 1410, "7": [1, 18, 29, 37, 39, 41, 42, 44, 45, 46, 47, 48, 53, 59, 61, 66, 156, 160, 161, 174, 189, 211, 215, 218, 219, 220, 222, 224, 225, 228, 229, 231, 235, 238, 240, 244, 246, 248, 250, 258, 262, 266, 268, 270, 272, 273, 277, 280, 282, 285, 286, 288, 289, 291, 292, 293, 294, 296, 299, 301, 304, 305, 306, 307, 312, 314, 315, 316, 324, 326, 327, 328, 356, 359, 360, 374, 379, 383, 405, 406, 408, 419, 460, 472, 473, 477, 485, 493, 496, 497, 502, 510, 512, 523, 536, 542, 547, 548, 566, 581, 594, 595, 596, 597, 654, 655, 665, 671, 675, 691, 692, 709, 725, 754, 768, 792, 801, 802, 805, 808, 809, 815, 820, 828, 829, 847, 851, 858, 868, 887, 892, 893, 895, 897, 900, 902, 905, 907, 909, 910, 912, 913, 918, 925, 927, 931, 934, 936, 937, 938, 942, 946, 949, 988, 994, 1010, 1023, 1024, 1026, 1036, 1094, 1095, 1099, 1105, 1110, 1122, 1123, 1128, 1136, 1138, 1151, 1175, 1191, 1211, 1224, 1225, 1226, 1227, 1272, 1273, 1292, 1300, 1329, 1358, 1401, 1406, 1411, 1416, 1418, 1419, 1420, 1423, 1425, 1429, 1432], "70": [222, 356, 781, 809, 868, 895, 988, 1192, 1401, 1418], "700": [325, 356, 954, 988], "702963": [42, 356], "7051579356916758811": 168, "707107": [418, 520, 689, 690, 788, 868, 1035, 1149, 1291, 1295, 1401, 1426], "712389": 1426, "714": 1432, "714286": [548, 868, 1175, 1401], "718281828459045": [12, 515, 608, 868, 1142, 1238, 1401], "718282": [523, 868, 1151, 1401, 1423], "720": [463, 664, 868], "7264": 1432, "732051": [1314, 1401], "7415e16": 182, "742": [260, 356, 915, 988], "75": [42, 222, 226, 356, 383, 654, 662, 665, 678, 680, 682, 684, 689, 691, 693, 825, 829, 868, 895, 898, 988, 994, 1086, 1171, 1192, 1264, 1340, 1401, 1418, 1426, 1432], "7500": [257, 356], "7508": 1432, "754": [774, 868], "754888": [515, 868], "761594": [770, 868, 1374, 1401], "764052": 97, "7654": 994, "765431": 1124, "7654321": 29, "76933c": [42, 356], "77": 1128, "78": [9, 147, 736, 1341], "780": 9, "784": [259, 356, 914, 988], "785398": [391, 788, 789, 868, 1009, 1401, 1426], "789": [12, 994], "79": [1192, 1401], "7d": 994, "8": [1, 13, 37, 39, 41, 44, 45, 46, 47, 48, 49, 58, 59, 61, 62, 66, 84, 88, 94, 160, 161, 174, 211, 215, 218, 219, 220, 222, 224, 225, 227, 228, 229, 231, 235, 238, 240, 242, 246, 248, 255, 258, 259, 260, 262, 264, 266, 268, 270, 273, 282, 285, 286, 288, 289, 291, 292, 293, 294, 296, 299, 301, 303, 304, 305, 307, 312, 314, 315, 316, 324, 327, 328, 330, 356, 383, 385, 397, 405, 406, 408, 457, 460, 461, 473, 502, 536, 543, 547, 548, 574, 576, 578, 581, 594, 595, 596, 597, 636, 654, 655, 660, 665, 671, 672, 677, 695, 701, 707, 709, 733, 734, 735, 750, 760, 781, 786, 792, 797, 799, 802, 804, 812, 814, 819, 820, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 847, 849, 852, 853, 857, 868, 887, 892, 893, 895, 897, 899, 900, 902, 905, 907, 910, 913, 914, 915, 918, 919, 930, 934, 937, 938, 942, 946, 949, 957, 988, 994, 1023, 1024, 1026, 1077, 1084, 1105, 1171, 1175, 1191, 1204, 1206, 1208, 1211, 1224, 1225, 1226, 1227, 1259, 1262, 1273, 1276, 1278, 1283, 1287, 1290, 1294, 1296, 1338, 1339, 1354, 1401, 1410, 1411, 1416, 1418, 1419, 1420, 1423, 1424, 1425, 1429, 1432], "80": [42, 226, 356, 898, 988], "800": [505, 506, 508, 1128], "8000": 153, "803065983": 139, "81": 1423, "814697265625": [1146, 1401], "816497": [304, 356], "8192": 151, "82": [259, 356, 914, 988], "8257e14": 1432, "83": [259, 356, 914, 988], "833": [259, 356, 914, 988], "833333": [344, 973], "848062": 1426, "848808": 182, "85": [42, 147, 356, 1192, 1401, 1432], "850": [540, 653, 868], "8568409950394724": [1142, 1401], "8589934592": [701, 868], "86": 1432, "8601": 1424, "87": 1432, "876": 9, "877809": 1418, "88": [222, 356, 895, 988], "881374": [390, 868, 1008, 1401], "888": [847, 946, 988], "8_000_000": 1410, "8a": [1043, 1044], "8nin": 1432, "9": [1, 9, 37, 39, 41, 42, 44, 45, 48, 52, 53, 58, 66, 211, 220, 222, 235, 237, 246, 250, 258, 260, 262, 264, 280, 288, 290, 291, 294, 306, 307, 324, 328, 330, 349, 356, 379, 383, 385, 397, 405, 406, 408, 415, 417, 457, 460, 463, 473, 502, 528, 536, 547, 554, 574, 581, 592, 600, 638, 654, 655, 664, 671, 675, 676, 677, 688, 691, 692, 703, 707, 722, 754, 762, 765, 795, 801, 802, 805, 808, 820, 856, 868, 895, 905, 910, 912, 913, 915, 918, 936, 938, 949, 957, 978, 988, 994, 1018, 1019, 1023, 1024, 1026, 1032, 1034, 1086, 1099, 1109, 1111, 1117, 1123, 1136, 1137, 1182, 1191, 1204, 1211, 1222, 1230, 1273, 1277, 1278, 1289, 1292, 1293, 1296, 1308, 1326, 1358, 1367, 1401, 1410, 1411, 1416, 1418, 1419, 1420, 1429], "90": [222, 260, 356, 754, 895, 915, 988, 1358, 1418, 1426], "90000": 846, "901234": [1070, 1160, 1296, 1401], "909": [259, 356, 914, 988], "910": [259, 356, 722, 914, 988, 1326], "910t": [715, 722, 1319, 1326], "914": [259, 356, 914, 988], "9223372036854775807": [777, 868], "9223372036854775808": [611, 868], "927295": 1426, "928571": [521, 868, 1150, 1401], "93": [1192, 1401], "94": [380, 868], "9477376373212048": [1192, 1401], "95": [19, 380, 868, 994], "95b3d7": [42, 356], "96": [19, 222, 356, 380, 868, 895, 988, 1192, 1401], "961": 62, "963624": [520, 868, 1149, 1401], "964028": [280, 356], "96_067_179": 1410, "97": [19, 249, 356, 380, 868, 1192, 1401], "9774092659964970114": [541, 868], "978307200": [479, 1101], "978307200000": 501, "978307200000000": [479, 501, 1101, 1127], "978307200000000000": 1127, "978393600": [479, 1101], "978393600000": 501, "978393600000000": [479, 501, 1101, 1127], "978393600000000000": 1127, "978480000": [479, 1101], "978480000000": 501, "978480000000000": [479, 501, 1101, 1127], "978480000000000000": 1127, "978738": 97, "98": [19, 249, 280, 356, 441, 535, 538, 708, 754, 772, 868, 1358], "987": [29, 42, 356, 622], "987000": 994, "9876": 9, "987654": [29, 994], "987654321": 12, "9876543210": 139, "987m": 994, "988": 12, "99": [19, 42, 233, 234, 249, 252, 280, 325, 356, 380, 441, 525, 527, 535, 538, 708, 772, 868, 903, 904, 954, 988, 1128, 1142, 1154, 1401, 1423], "9914e218": 182, "998347": [280, 356], "999": [472, 485, 994, 1094, 1110, 1421, 1432], "999000": 994, "999954": [280, 356], "999999": [495, 760, 808, 854, 855, 856, 994, 1121, 1128, 1364], "999999\u00b5": 994, "9bbb59": [42, 356], "A": [15, 39, 42, 48, 49, 52, 53, 54, 55, 64, 65, 70, 76, 131, 139, 144, 146, 151, 152, 153, 154, 166, 168, 173, 188, 219, 226, 227, 228, 233, 234, 237, 244, 259, 265, 267, 269, 274, 280, 306, 309, 324, 325, 326, 330, 331, 356, 374, 378, 447, 467, 468, 473, 499, 502, 516, 517, 525, 526, 527, 537, 539, 552, 555, 557, 558, 564, 578, 605, 612, 613, 614, 626, 640, 649, 650, 672, 678, 680, 682, 684, 686, 689, 691, 693, 713, 714, 715, 721, 722, 723, 724, 725, 726, 727, 730, 732, 736, 737, 738, 740, 751, 760, 795, 811, 812, 816, 828, 829, 845, 868, 893, 898, 899, 900, 903, 904, 909, 914, 919, 920, 934, 954, 957, 958, 988, 994, 1065, 1089, 1090, 1095, 1125, 1128, 1144, 1154, 1155, 1156, 1208, 1243, 1255, 1279, 1281, 1285, 1290, 1292, 1294, 1317, 1318, 1319, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1334, 1336, 1340, 1341, 1342, 1344, 1355, 1364, 1401, 1410, 1411, 1414, 1427, 1429], "AND": [154, 260, 356, 782, 783, 847, 915, 988, 994, 1420], "ANDs": [432, 868, 1049, 1401], "AS": [303, 356, 847, 848, 946, 988, 1410, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1429, 1431], "And": [758, 1362], "As": [14, 57, 98, 99, 132, 134, 135, 136, 138, 156, 160, 161, 170, 235, 284, 313, 318, 356, 858, 905, 933, 988], "At": [48, 49, 50, 51, 52, 64, 65, 280, 356, 890, 891, 901, 930, 943, 988], "BY": [847, 946, 988, 1410, 1413, 1419, 1428, 1429], "Be": 988, "By": [5, 14, 16, 32, 35, 58, 151, 152, 166, 244, 258, 259, 265, 288, 290, 299, 304, 326, 327, 356, 416, 492, 497, 510, 598, 601, 607, 655, 670, 675, 679, 681, 683, 685, 687, 690, 692, 694, 700, 711, 779, 799, 806, 807, 809, 810, 811, 827, 849, 855, 856, 857, 868, 890, 909, 913, 914, 920, 936, 942, 947, 955, 988, 1033, 1118, 1123, 1136, 1228, 1272, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1304, 1315, 1391, 1401], "For": [16, 41, 42, 53, 54, 55, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 212, 226, 227, 230, 232, 258, 259, 280, 288, 313, 342, 356, 359, 489, 490, 502, 518, 520, 521, 532, 614, 626, 667, 706, 713, 721, 722, 723, 725, 727, 751, 801, 811, 815, 816, 858, 864, 868, 898, 899, 914, 936, 971, 988, 1128, 1146, 1147, 1149, 1150, 1153, 1243, 1268, 1311, 1317, 1325, 1326, 1327, 1329, 1331, 1355, 1379, 1401, 1406], "IF": 1422, "If": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 63, 64, 65, 74, 132, 133, 134, 135, 136, 137, 138, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 183, 184, 185, 196, 210, 212, 215, 227, 232, 235, 242, 244, 246, 254, 255, 256, 258, 259, 262, 264, 269, 276, 280, 284, 288, 290, 291, 292, 296, 299, 301, 303, 306, 307, 310, 311, 313, 314, 320, 321, 323, 324, 325, 356, 359, 382, 384, 402, 407, 416, 421, 443, 469, 473, 474, 481, 489, 490, 499, 502, 528, 543, 549, 554, 562, 567, 568, 572, 584, 593, 598, 599, 602, 605, 613, 614, 621, 622, 628, 630, 655, 660, 661, 662, 665, 667, 669, 670, 671, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 700, 702, 706, 707, 712, 722, 723, 725, 727, 728, 740, 741, 742, 743, 745, 746, 747, 750, 751, 752, 753, 757, 760, 767, 778, 782, 784, 787, 791, 792, 793, 796, 797, 799, 801, 802, 806, 807, 809, 810, 811, 814, 815, 821, 822, 823, 825, 826, 827, 828, 829, 833, 839, 841, 842, 843, 844, 845, 850, 851, 852, 855, 856, 858, 859, 868, 890, 891, 901, 905, 909, 913, 914, 919, 924, 930, 932, 933, 934, 936, 940, 942, 943, 944, 946, 951, 953, 954, 963, 971, 981, 988, 993, 994, 1001, 1002, 1016, 1017, 1020, 1025, 1033, 1036, 1038, 1060, 1073, 1091, 1095, 1096, 1103, 1115, 1116, 1125, 1128, 1153, 1170, 1171, 1176, 1182, 1191, 1192, 1196, 1197, 1198, 1202, 1214, 1223, 1228, 1229, 1232, 1235, 1243, 1262, 1263, 1264, 1266, 1268, 1271, 1272, 1273, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1298, 1300, 1302, 1304, 1307, 1311, 1312, 1316, 1326, 1327, 1329, 1331, 1332, 1333, 1340, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1354, 1355, 1356, 1357, 1361, 1364, 1371, 1372, 1375, 1376, 1379, 1381, 1390, 1401, 1406, 1410, 1411, 1413, 1421, 1424, 1429], "In": [58, 65, 153, 155, 167, 168, 171, 182, 186, 206, 211, 230, 232, 235, 244, 259, 260, 264, 276, 280, 288, 314, 323, 356, 359, 655, 675, 736, 737, 858, 868, 891, 909, 914, 915, 929, 936, 953, 988, 1146, 1153, 1262, 1267, 1341, 1401, 1406], "It": [10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 74, 80, 97, 99, 131, 142, 143, 144, 145, 146, 147, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 208, 222, 260, 265, 272, 279, 303, 313, 318, 325, 333, 342, 356, 359, 360, 368, 369, 374, 461, 462, 469, 481, 543, 613, 614, 625, 662, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 694, 754, 792, 794, 825, 826, 828, 829, 845, 858, 864, 868, 886, 890, 891, 895, 901, 915, 919, 920, 925, 929, 930, 946, 954, 961, 962, 971, 988, 994, 996, 1068, 1084, 1085, 1091, 1103, 1171, 1264, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1299, 1301, 1379, 1384, 1401, 1406], "Its": [245, 356, 541, 868, 1169, 1401], "NO": 994, "NOT": [135, 255, 297, 356, 605, 624, 699, 868, 941, 988, 1429], "No": [22, 258, 272, 356, 858, 913, 925, 988], "Not": [212, 258, 356, 557, 558, 868, 890, 901, 913, 930, 943, 988], "ON": 1429, "OR": [260, 356, 784, 785, 905, 915, 988, 994, 1420], "ORs": [437, 868, 1054, 1401], "On": [137, 774, 868, 917, 988], "One": [58, 222, 258, 276, 313, 318, 356, 383, 654, 786, 798, 814, 820, 823, 832, 834, 837, 838, 848, 868, 895, 913, 988, 994, 1086, 1401], "Or": [154, 243, 244, 259, 288, 302, 326, 335, 356, 359, 519, 675, 709, 806, 807, 809, 810, 855, 856, 864, 868, 908, 909, 914, 936, 945, 964, 988, 1148, 1401], "That": [157, 919, 988], "The": [10, 11, 22, 35, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 67, 72, 73, 75, 76, 77, 85, 89, 90, 97, 99, 100, 102, 131, 132, 134, 135, 136, 138, 139, 146, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 182, 183, 184, 186, 188, 196, 212, 214, 222, 223, 225, 226, 227, 228, 231, 232, 235, 242, 243, 244, 245, 250, 256, 258, 259, 260, 263, 264, 272, 278, 280, 284, 288, 289, 290, 291, 294, 295, 296, 303, 308, 313, 314, 319, 322, 326, 330, 331, 333, 334, 335, 342, 356, 366, 370, 371, 372, 373, 374, 381, 424, 425, 426, 427, 441, 442, 461, 462, 464, 467, 468, 469, 477, 481, 488, 492, 493, 497, 499, 502, 510, 511, 518, 520, 521, 522, 525, 528, 532, 533, 541, 550, 575, 580, 605, 613, 614, 628, 655, 662, 665, 668, 669, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 703, 706, 712, 716, 717, 721, 726, 727, 728, 729, 734, 735, 736, 737, 745, 746, 747, 748, 749, 750, 751, 761, 765, 771, 772, 773, 792, 795, 813, 817, 826, 827, 829, 843, 844, 845, 846, 847, 850, 858, 860, 861, 863, 864, 868, 869, 870, 873, 875, 876, 877, 885, 890, 891, 895, 896, 898, 899, 901, 902, 905, 908, 909, 912, 913, 914, 915, 919, 925, 930, 933, 936, 938, 939, 940, 943, 946, 950, 952, 957, 958, 961, 962, 964, 971, 988, 992, 993, 994, 1000, 1003, 1041, 1042, 1043, 1044, 1058, 1059, 1072, 1084, 1085, 1086, 1089, 1090, 1091, 1099, 1103, 1114, 1118, 1119, 1123, 1125, 1128, 1136, 1137, 1145, 1147, 1149, 1150, 1153, 1154, 1157, 1161, 1169, 1177, 1205, 1210, 1243, 1262, 1264, 1266, 1270, 1271, 1272, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1308, 1311, 1316, 1320, 1321, 1330, 1331, 1332, 1333, 1338, 1339, 1340, 1341, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1375, 1381, 1383, 1385, 1386, 1393, 1395, 1397, 1401, 1402, 1407, 1408, 1409, 1410, 1415, 1429, 1430, 1432], "Then": 171, "There": [172, 1429], "These": [1, 34, 42, 141, 148, 153, 154, 206, 320, 356, 867, 868], "To": [41, 65, 226, 227, 233, 234, 260, 356, 451, 467, 468, 526, 527, 713, 720, 721, 722, 725, 736, 737, 746, 747, 748, 749, 758, 868, 898, 899, 903, 904, 915, 988, 994, 1073, 1089, 1090, 1155, 1156, 1317, 1324, 1325, 1326, 1329, 1340, 1341, 1362, 1381, 1401, 1429], "Will": [64, 890, 901, 930, 943, 988, 1401], "With": [160, 254, 299, 356, 416, 598, 700, 868, 890, 942, 988, 1033, 1191, 1228, 1304, 1401], "_": [1, 58, 62, 206, 280, 311, 315, 356, 407, 446, 447, 584, 714, 722, 724, 726, 731, 732, 738, 741, 742, 1064, 1065, 1318, 1326, 1330, 1335, 1336, 1342, 1346, 1376, 1401], "__array_ufunc__": 996, "__arrow_c_schema__": 993, "__call__": 864, "__enter__": 1429, "__exit__": 1429, "__getattr__": 864, "__getitem__": [366, 761], "__init__": [1, 33, 34, 35, 36, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 142, 143, 144, 145, 179, 191, 197, 198, 200, 201, 962, 963, 1429], "__name__": [257, 356], "_auto_init_unhandled_kei": 34, "_awai": [695, 868], "_bar_": 816, "_btm_by_a": [442, 868], "_btm_by_b": [442, 868], "_by_ca": [442, 773, 868], "_by_cb": [442, 773, 868], "_check_ord": [943, 988], "_column_map": 171, "_default_valu": 171, "_deletion_fil": 171, "_df": [1, 59], "_expr": [1, 60], "_foo": 619, "_geventdataframeresult": [65, 891, 988], "_internal_cal": 56, "_is_not_nan": [558, 868], "_isnan": [557, 868], "_isnul": [560, 868], "_kwarg": [890, 930, 988], "_ldf": 1, "_lf": 61, "_lower_boundari": [244, 356, 909, 988], "_mean_squar": [335, 964], "_not_nul": [559, 868], "_o": [446, 447, 731, 732, 1064, 1065, 1335, 1336], "_revers": [639, 643, 672, 868], "_right": [258, 259, 260, 356, 913, 914, 915, 988], "_storage_account": 35, "_storage_options_has_endpoint_url": 34, "_suffix": 644, "_sum": [335, 964], "_table_statist": 171, "_to_even": [695, 868], "_top_by_a": [773, 868], "_top_by_b": [773, 868], "_train": [959, 988], "_type": [932, 988], "_type_check": [943, 988], "_upper_boundari": [244, 356, 909, 988], "_world": 816, "a1": [42, 59, 61, 356], "a101": 1432, "a123": [42, 356], "a2": [42, 59, 61, 356], "a_1": [742, 1346, 1376, 1401], "a_2": [1376, 1401], "a_3": [1376, 1401], "a_a": 848, "a_agg_list": [244, 356, 909, 988], "a_b_doubl": 812, "a_btm_by_a": [442, 868], "a_btm_by_b": [442, 868], "a_by_ca": [442, 773, 868], "a_by_cb": [442, 773, 868], "a_div_2": 1423, "a_div_5": 1423, "a_interpol": [548, 868], "a_is_even": [303, 356, 847, 946, 988], "a_is_integ": 374, "a_is_str": 374, "a_isnul": [560, 868], "a_lag_": 795, "a_log2": 1423, "a_mod_2": 1423, "a_not_nul": [559, 868], "a_revers": [639, 643, 672, 868], "a_rol": 795, "a_suffix": 644, "a_times_2": [614, 868], "a_times_b": [613, 868], "a_top_by_a": [773, 868], "a_top_by_b": [773, 868], "a_txt": 848, "aa": [522, 713, 725, 813, 868, 994, 1086, 1317, 1329, 1401, 1424], "aaa": [1, 42, 356, 713, 725, 761, 763, 764, 994, 1317, 1329], "aaaa": [1043, 1044], "aabcdef": 747, "aad": [1043, 1044], "aag": 28, "aazz": 1424, "ab": [246, 262, 307, 330, 356, 737, 761, 763, 764, 868, 957, 988, 994, 1170, 1196, 1372, 1401, 1422, 1424], "ab12": 737, "ab12cd34ef": 737, "abc": [7, 18, 20, 21, 22, 23, 24, 25, 26, 27, 379, 719, 722, 736, 746, 868, 994, 1323, 1326, 1340, 1341, 1424], "abc123": 1424, "abc456": [736, 1340, 1341, 1424], "abcabc": 737, "abcd": 1424, "abcdeff": 746, "abf": [155, 167, 168], "abl": [106, 153, 605], "about": [53, 54, 55, 106, 146, 148, 153, 706, 713, 721, 722, 725, 736, 737, 868, 1311, 1317, 1325, 1326, 1329, 1340, 1341, 1401, 1432], "abov": [42, 212, 259, 280, 356, 359, 914, 988], "abs_a": 1423, "abs_tol": [175, 176, 177, 178, 550, 868, 1177, 1401], "absolut": [148, 155, 167, 168, 175, 176, 177, 178, 378, 518, 520, 521, 550, 868, 999, 1147, 1149, 1150, 1177, 1401, 1423], "acc": [801, 802, 815, 841], "accent": 994, "accept": [39, 44, 48, 49, 50, 51, 52, 55, 146, 148, 149, 151, 152, 155, 157, 159, 161, 163, 164, 166, 169, 170, 171, 172, 182, 196, 214, 224, 243, 294, 295, 299, 302, 319, 330, 331, 335, 356, 379, 442, 451, 522, 549, 655, 669, 670, 709, 738, 765, 773, 781, 783, 785, 790, 793, 794, 795, 796, 804, 813, 831, 833, 836, 846, 850, 852, 858, 864, 868, 885, 897, 908, 938, 939, 942, 945, 950, 957, 958, 964, 988, 993, 994, 1059, 1073, 1176, 1262, 1271, 1272, 1304, 1342, 1386, 1401], "access": [39, 44, 48, 49, 50, 51, 52, 59, 60, 61, 62, 157, 161, 163, 164, 166, 168, 169, 170, 171, 196, 210, 218, 256, 280, 289, 290, 303, 356, 366, 723, 761, 892, 946, 959, 988, 993, 1327, 1432], "accord": [289, 356, 662, 806, 807, 809, 810, 855, 856, 868, 1105, 1264, 1401], "accordingli": [146, 149, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165], "account": [42, 139, 154, 168, 356, 492, 518, 520, 521, 868, 1118, 1147, 1149, 1150, 1401], "accumul": [801, 802, 815, 841], "acg": 28, "achiev": [264, 280, 342, 356, 447, 614, 732, 868, 1065, 1243, 1336, 1401], "aco": 1422, "acosd": 1422, "across": [42, 58, 154, 156, 223, 245, 258, 267, 269, 274, 296, 306, 356, 464, 541, 628, 783, 785, 801, 802, 804, 831, 833, 836, 852, 868, 896, 913, 940, 988, 1169, 1401], "action": [41, 356], "activ": [7, 8, 20, 21, 23, 24, 25, 26, 30, 31, 576, 722, 1206, 1326], "actual": [42, 135, 182, 186, 291, 356, 1306, 1401, 1424, 1431], "ad": [40, 42, 135, 156, 244, 265, 303, 313, 318, 320, 325, 330, 331, 356, 385, 502, 525, 621, 622, 765, 801, 802, 847, 868, 909, 920, 946, 954, 957, 958, 988, 994, 1128, 1154, 1379, 1384, 1401], "adbc": [40, 153, 154, 356], "adbc_driver_manag": 174, "adbc_ingest": [40, 356], "add": [41, 42, 43, 48, 52, 152, 212, 232, 244, 264, 330, 331, 332, 333, 356, 359, 462, 641, 642, 643, 644, 662, 765, 811, 815, 858, 868, 909, 913, 957, 958, 959, 960, 961, 988, 1153, 1401, 1406], "add_calendar_dai": 811, "add_calendar_month": 811, "add_calendar_year": 811, "add_chart": [42, 356], "add_dai": 811, "add_format": [42, 356], "add_hour": 811, "add_milli": 811, "add_second": 811, "add_seri": [42, 356], "add_week": 811, "add_worksheet": [42, 356], "addit": [31, 38, 40, 41, 42, 135, 150, 155, 156, 167, 168, 180, 182, 184, 186, 196, 227, 231, 243, 261, 265, 278, 294, 295, 302, 315, 322, 330, 331, 335, 356, 379, 478, 522, 525, 655, 709, 713, 721, 722, 725, 736, 737, 761, 765, 790, 793, 794, 795, 796, 813, 846, 847, 850, 864, 868, 902, 908, 920, 938, 939, 945, 952, 957, 958, 964, 988, 994, 1092, 1100, 1154, 1317, 1325, 1326, 1329, 1340, 1341, 1382, 1401, 1411, 1429], "addition": [66, 156, 289, 356, 994], "address": 722, "adjac": [42, 356], "adjust": [518, 520, 521, 706, 868, 1147, 1149, 1150, 1311, 1401], "adl": [155, 167, 168], "adlf": 168, "advanc": [42, 280, 356, 421, 605, 1038, 1235, 1432], "advantag": [42, 206, 279, 356], "advis": [42, 57, 99, 356], "aedt": 808, "aeiuo": [725, 1329], "af1": 58, "af2": 58, "af3": 58, "affect": [40, 137, 175, 176, 177, 178, 356, 613, 828, 829, 868], "afm": 168, "afoo": [959, 988], "after": [42, 135, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 214, 215, 232, 319, 322, 356, 441, 442, 443, 469, 522, 655, 665, 680, 689, 693, 754, 760, 772, 773, 792, 868, 885, 950, 952, 988, 994, 1058, 1059, 1091, 1153, 1266, 1358, 1364, 1385, 1386, 1401, 1416], "afterward": [57, 858], "ag": [272, 356, 925, 988, 1430], "again": [614, 868], "against": [40, 108, 151, 153, 235, 284, 303, 356, 576, 725, 847, 905, 933, 946, 988, 1206, 1329, 1410, 1429, 1431, 1432], "agg": [243, 244, 280, 288, 356, 380, 432, 437, 440, 442, 528, 530, 535, 538, 613, 614, 655, 708, 709, 773, 780, 806, 809, 829, 845, 868, 890, 891, 901, 908, 909, 930, 932, 936, 943, 988, 994], "agg_group": [818, 868], "agg_list": [613, 868], "aggreg": [148, 151, 152, 155, 163, 167, 237, 243, 244, 266, 268, 270, 273, 276, 280, 281, 282, 288, 304, 305, 324, 327, 335, 336, 338, 340, 356, 380, 432, 437, 440, 528, 544, 613, 655, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 782, 783, 784, 785, 801, 802, 803, 804, 815, 820, 830, 831, 833, 835, 836, 841, 851, 852, 868, 909, 919, 921, 922, 923, 926, 927, 931, 936, 947, 948, 955, 964, 965, 967, 969, 988, 1049, 1054, 1057, 1172, 1278, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1288, 1290, 1291, 1292, 1293, 1294, 1295, 1401, 1417, 1419, 1422, 1428], "aggregate_funct": [280, 356, 994], "aho": [714, 724, 726, 738, 1318, 1328, 1330, 1342], "aiosqlit": 153, "alchemy_conn": 153, "algorithm": [213, 356, 386, 714, 724, 726, 738, 786, 868, 884, 988, 1004, 1318, 1328, 1330, 1342, 1401], "alia": [1, 14, 58, 60, 62, 66, 96, 199, 203, 218, 244, 249, 262, 280, 288, 322, 330, 333, 356, 359, 379, 383, 424, 425, 426, 427, 428, 431, 441, 444, 446, 447, 448, 456, 457, 458, 459, 460, 462, 465, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 509, 510, 511, 512, 513, 516, 517, 530, 532, 533, 537, 539, 545, 546, 549, 550, 553, 556, 564, 566, 589, 601, 607, 612, 614, 618, 621, 622, 624, 631, 634, 636, 638, 649, 650, 654, 656, 660, 662, 665, 667, 696, 698, 713, 714, 715, 716, 718, 719, 721, 722, 724, 725, 726, 727, 731, 732, 738, 739, 740, 741, 742, 743, 744, 748, 749, 751, 761, 762, 763, 764, 766, 771, 772, 774, 780, 781, 787, 788, 789, 793, 794, 795, 796, 806, 809, 811, 812, 815, 816, 821, 824, 825, 828, 829, 841, 846, 850, 855, 858, 868, 909, 911, 918, 936, 952, 957, 961, 988, 1041, 1085, 1092, 1093, 1096, 1099, 1100, 1101, 1102, 1108, 1109, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1125, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1161, 1196, 1264, 1269, 1325, 1326, 1330, 1341, 1346, 1347, 1401], "alias": [303, 356, 621, 622, 946, 988], "alic": [151, 368, 1430], "align": [12, 17, 18, 42, 58, 66, 356, 1430], "align_fram": 66, "align_ful": 66, "align_inn": 66, "align_left": 66, "align_right": 66, "all": [1, 4, 5, 8, 15, 19, 22, 27, 32, 39, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 58, 64, 71, 117, 119, 132, 133, 137, 147, 151, 152, 153, 155, 156, 157, 159, 161, 162, 163, 166, 167, 169, 170, 179, 180, 183, 186, 206, 211, 213, 215, 222, 224, 226, 227, 234, 246, 251, 253, 255, 256, 257, 258, 260, 261, 262, 263, 269, 271, 275, 276, 280, 283, 285, 289, 290, 291, 295, 301, 302, 306, 307, 311, 313, 314, 318, 321, 323, 324, 325, 326, 331, 333, 356, 359, 374, 383, 385, 407, 442, 455, 461, 467, 468, 469, 470, 481, 502, 510, 522, 527, 540, 541, 544, 547, 552, 555, 559, 560, 565, 575, 576, 584, 602, 605, 613, 635, 638, 639, 641, 642, 643, 644, 645, 646, 653, 655, 665, 670, 672, 677, 695, 701, 707, 709, 715, 719, 722, 723, 727, 730, 733, 737, 745, 746, 747, 751, 773, 783, 792, 794, 801, 802, 803, 804, 813, 815, 820, 821, 824, 828, 829, 833, 841, 850, 851, 852, 858, 864, 868, 874, 880, 883, 884, 887, 890, 891, 895, 897, 898, 899, 901, 904, 913, 915, 919, 924, 930, 934, 939, 943, 944, 945, 951, 953, 954, 958, 959, 961, 988, 994, 1025, 1084, 1086, 1089, 1090, 1091, 1092, 1103, 1128, 1136, 1170, 1178, 1190, 1196, 1205, 1206, 1214, 1232, 1235, 1266, 1272, 1278, 1312, 1319, 1323, 1326, 1327, 1330, 1331, 1334, 1341, 1349, 1350, 1351, 1355, 1372, 1381, 1401, 1405, 1406, 1411, 1413, 1418, 1419, 1424, 1428, 1429, 1431, 1432], "all_compat": 1413, "all_data": 1429, "all_horizont": [226, 227, 356, 782, 858, 898, 899, 988], "all_stat": 32, "alloc": [148, 151, 152, 230, 283, 356, 868, 963, 1146, 1401], "allow": [1, 8, 41, 42, 49, 50, 51, 52, 56, 57, 66, 99, 108, 133, 153, 156, 166, 168, 169, 170, 171, 172, 179, 182, 183, 186, 206, 210, 256, 259, 261, 265, 289, 290, 292, 314, 315, 318, 321, 334, 356, 374, 444, 448, 492, 499, 502, 550, 593, 621, 622, 667, 697, 750, 752, 753, 868, 913, 914, 919, 920, 924, 929, 932, 951, 959, 988, 992, 994, 1118, 1125, 1128, 1177, 1223, 1243, 1268, 1298, 1354, 1356, 1357, 1381, 1382, 1401, 1424, 1432], "allow_alias": [621, 622], "allow_chunk": [182, 186], "allow_copi": [133, 210, 314, 356, 1381, 1401], "allow_dupl": [662, 868, 1264, 1401], "allow_exact_match": [259, 356, 914, 988], "allow_infin": [182, 186], "allow_masked_out": [182, 186], "allow_missing_column": [163, 171], "allow_nul": [179, 182, 186, 1432], "allow_object": 827, "allow_parallel": [259, 356, 913, 914, 988], "allow_pyarrow_filt": 172, "allow_time_zon": [182, 183, 186], "allowed_dtyp": [182, 183, 186, 1432], "almost": [42, 65, 263, 264, 342, 356, 550, 750, 752, 753, 868, 891, 988, 992, 1243, 1354, 1356, 1357, 1401], "along": [10, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 196, 356, 988], "alpha": [518, 520, 521, 868, 994, 1147, 1149, 1150, 1401], "alpha_i": [519, 868, 1148, 1401], "alphabet": [994, 1432], "alphanumer": [758, 994, 1362], "alreadi": [40, 41, 107, 313, 356, 576, 629, 778, 868, 943, 988, 1084, 1206, 1390, 1401], "also": [10, 29, 39, 42, 49, 50, 51, 52, 57, 64, 65, 132, 135, 139, 153, 156, 157, 162, 163, 166, 171, 181, 182, 185, 186, 191, 200, 206, 228, 243, 244, 265, 272, 276, 280, 288, 290, 294, 302, 313, 325, 330, 333, 356, 366, 457, 460, 469, 481, 492, 496, 502, 528, 549, 614, 621, 622, 655, 665, 669, 670, 695, 709, 736, 737, 738, 745, 746, 761, 792, 801, 802, 805, 808, 815, 817, 841, 858, 867, 868, 874, 890, 891, 901, 908, 909, 920, 925, 929, 930, 936, 938, 943, 945, 954, 957, 959, 961, 988, 994, 1091, 1103, 1122, 1176, 1266, 1271, 1272, 1296, 1319, 1340, 1341, 1342, 1349, 1401, 1405, 1411, 1413, 1416, 1420, 1424, 1427, 1429, 1430], "alt": [356, 359, 1401, 1406], "altair": [174, 356, 359, 1401, 1406], "alter": [929, 988], "altern": [42, 191, 356, 864, 1421], "although": [303, 356, 946, 988], "alwai": [15, 39, 41, 49, 55, 70, 74, 80, 151, 157, 161, 163, 214, 243, 258, 259, 263, 264, 319, 342, 356, 441, 442, 613, 625, 750, 772, 773, 828, 858, 868, 885, 913, 914, 919, 950, 988, 994, 1058, 1059, 1063, 1243, 1354, 1385, 1386, 1401, 1410, 1411, 1429, 1432], "am": [739, 1343], "amarillo": 1424, "amaz": [356, 359, 1401, 1406], "amazonaw": 34, "ambigu": [495, 496, 497, 510, 750, 753, 808, 1121, 1122, 1123, 1136, 1354, 1357], "america": 809, "amount": [53, 57, 75, 99, 161, 166, 169, 170, 374, 614, 811, 868, 1418], "amsterdam": [496, 1122], "an": [1, 10, 32, 35, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 56, 59, 61, 62, 66, 74, 75, 76, 97, 104, 108, 111, 114, 121, 123, 132, 134, 135, 138, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 180, 182, 186, 196, 212, 216, 217, 218, 224, 230, 233, 237, 239, 244, 255, 256, 257, 259, 260, 264, 265, 276, 280, 285, 286, 288, 289, 293, 303, 308, 314, 318, 320, 324, 325, 330, 333, 342, 356, 359, 374, 381, 403, 406, 420, 424, 426, 429, 432, 435, 437, 438, 440, 457, 458, 459, 460, 461, 462, 469, 473, 474, 492, 496, 499, 513, 519, 527, 528, 533, 534, 535, 538, 573, 576, 580, 582, 604, 605, 613, 614, 626, 628, 638, 639, 660, 661, 662, 670, 671, 675, 677, 678, 680, 682, 684, 686, 689, 691, 693, 712, 713, 716, 722, 725, 729, 750, 752, 753, 755, 757, 771, 774, 782, 787, 791, 793, 797, 799, 806, 807, 809, 810, 812, 814, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 839, 841, 842, 846, 850, 855, 856, 858, 859, 864, 868, 887, 888, 889, 891, 895, 897, 901, 905, 909, 914, 915, 919, 920, 934, 936, 937, 946, 954, 957, 959, 961, 963, 971, 985, 988, 992, 993, 994, 1021, 1024, 1037, 1041, 1043, 1046, 1049, 1052, 1054, 1055, 1057, 1072, 1074, 1080, 1081, 1082, 1083, 1084, 1091, 1095, 1125, 1139, 1146, 1148, 1161, 1191, 1203, 1206, 1210, 1212, 1234, 1243, 1272, 1273, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1299, 1301, 1316, 1317, 1320, 1326, 1329, 1333, 1354, 1356, 1357, 1359, 1361, 1381, 1383, 1401, 1419, 1421, 1424, 1428, 1429, 1431], "ana": [739, 1343], "anan": [739, 1343], "ananab": 1424, "and_": 868, "ang": 1424, "angl": [788, 789], "ani": [4, 10, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 70, 73, 74, 80, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 206, 208, 211, 212, 214, 220, 224, 226, 227, 232, 234, 235, 237, 239, 254, 256, 257, 258, 259, 260, 263, 264, 265, 269, 278, 279, 284, 285, 289, 290, 291, 303, 306, 309, 310, 313, 314, 315, 318, 319, 321, 324, 325, 333, 356, 359, 360, 368, 369, 374, 379, 382, 383, 407, 441, 442, 443, 461, 462, 469, 481, 498, 516, 517, 527, 528, 532, 535, 537, 539, 543, 554, 564, 571, 576, 584, 594, 595, 596, 597, 612, 613, 614, 621, 631, 634, 636, 649, 650, 654, 659, 662, 669, 670, 671, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 694, 698, 702, 712, 714, 728, 746, 747, 748, 749, 750, 752, 753, 754, 755, 757, 766, 772, 773, 774, 781, 782, 783, 785, 792, 794, 796, 797, 798, 825, 826, 827, 828, 829, 833, 845, 852, 858, 868, 885, 890, 891, 897, 898, 899, 901, 904, 905, 913, 914, 915, 920, 928, 929, 930, 933, 934, 946, 950, 951, 954, 961, 962, 963, 988, 992, 993, 994, 996, 998, 1001, 1025, 1058, 1059, 1068, 1084, 1085, 1091, 1103, 1124, 1143, 1144, 1153, 1156, 1162, 1164, 1166, 1171, 1182, 1191, 1194, 1201, 1206, 1214, 1224, 1225, 1226, 1227, 1242, 1243, 1254, 1255, 1264, 1271, 1272, 1273, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1299, 1300, 1316, 1318, 1332, 1354, 1356, 1357, 1359, 1361, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1401, 1406, 1429, 1432], "anna": [272, 356, 925, 988], "annex": [733, 1337], "announc": [932, 988], "anoth": [101, 181, 215, 223, 229, 243, 259, 296, 356, 429, 464, 471, 548, 580, 618, 624, 628, 669, 679, 681, 683, 685, 687, 690, 692, 694, 725, 868, 887, 896, 908, 914, 940, 959, 988, 1046, 1084, 1093, 1145, 1153, 1175, 1210, 1271, 1272, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1329, 1401, 1423, 1424], "another_index": 845, "anti": [258, 356, 913, 971, 988, 1299, 1301, 1401, 1417], "antipattern": [151, 157, 161, 163], "any_horizont": [784, 858], "anyth": [41, 289, 356], "anywher": [428, 431, 750, 752, 753, 1354, 1356, 1357], "ap": 1424, "apach": [37, 44, 45, 48, 133, 149, 153, 154, 157, 159, 168, 209, 356, 997], "apaya": [751, 1355], "api": [0, 34, 39, 44, 48, 49, 50, 51, 52, 133, 161, 163, 164, 166, 169, 170, 171, 172, 191, 196, 210, 264, 342, 356, 614, 828, 829, 868, 971, 988, 1243, 1401, 1428], "apia": [470, 1092], "app": [448, 744, 1066, 1348], "appear": [42, 70, 135, 177, 178, 356, 737, 776, 868, 994, 1388, 1401, 1430], "append": [40, 41, 43, 182, 232, 258, 259, 260, 356, 666, 858, 868, 913, 914, 915, 988, 1153, 1401], "appl": [219, 248, 258, 285, 286, 309, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 356, 442, 444, 448, 672, 718, 744, 773, 868, 913, 934, 966, 967, 969, 970, 972, 973, 974, 975, 976, 977, 978, 988, 1061, 1066, 1322, 1348, 1417, 1424], "appli": [12, 22, 39, 42, 49, 64, 66, 131, 146, 153, 166, 179, 182, 186, 206, 222, 237, 260, 263, 264, 279, 302, 303, 313, 342, 356, 395, 472, 475, 476, 477, 480, 482, 483, 484, 485, 486, 487, 488, 491, 493, 494, 498, 500, 511, 512, 514, 520, 521, 613, 614, 659, 678, 679, 680, 681, 684, 685, 691, 692, 709, 736, 737, 750, 752, 753, 757, 790, 801, 802, 815, 828, 829, 841, 847, 858, 868, 895, 915, 919, 928, 945, 946, 971, 988, 994, 1073, 1094, 1097, 1098, 1099, 1102, 1104, 1105, 1109, 1110, 1111, 1113, 1114, 1117, 1119, 1120, 1124, 1126, 1137, 1138, 1140, 1149, 1150, 1243, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1288, 1291, 1292, 1293, 1295, 1340, 1341, 1354, 1356, 1357, 1361, 1401, 1410], "applic": [55, 154, 314, 356, 614, 868], "apply_on_context_ent": 206, "appropri": [42, 172, 235, 284, 314, 356, 502, 665, 868, 905, 933, 988, 1128, 1266, 1401], "approx": [386, 868], "approx_n_uniqu": [356, 868, 988, 1401], "approxim": [48, 213, 356, 386, 519, 786, 868, 884, 988, 1004, 1148, 1401, 1423, 1432], "april": [499, 1125, 1424, 1425], "ar": [1, 12, 13, 19, 22, 32, 34, 36, 39, 41, 42, 44, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 64, 65, 66, 97, 98, 99, 106, 112, 128, 132, 133, 134, 135, 136, 137, 138, 139, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 180, 182, 183, 184, 186, 196, 206, 210, 214, 215, 220, 222, 226, 227, 230, 235, 236, 237, 242, 243, 244, 256, 258, 259, 260, 261, 263, 264, 271, 272, 278, 280, 284, 288, 289, 290, 291, 294, 295, 299, 302, 309, 311, 313, 314, 315, 318, 319, 323, 325, 326, 330, 331, 334, 335, 356, 370, 371, 372, 373, 374, 382, 384, 398, 416, 421, 429, 441, 442, 443, 451, 457, 459, 460, 469, 497, 502, 510, 515, 517, 518, 519, 520, 521, 528, 543, 549, 550, 552, 554, 555, 557, 558, 559, 560, 562, 567, 568, 598, 602, 605, 650, 655, 661, 662, 665, 668, 669, 670, 671, 675, 676, 679, 680, 681, 683, 685, 687, 688, 689, 690, 692, 693, 694, 698, 700, 703, 706, 708, 709, 714, 723, 727, 729, 730, 734, 735, 736, 737, 738, 740, 751, 753, 755, 760, 765, 767, 771, 772, 773, 782, 783, 784, 785, 790, 793, 794, 795, 796, 797, 804, 806, 807, 809, 810, 825, 826, 831, 833, 836, 846, 850, 851, 852, 855, 856, 858, 860, 861, 863, 867, 868, 869, 870, 873, 874, 875, 876, 877, 880, 883, 885, 890, 891, 895, 898, 899, 905, 908, 909, 913, 914, 915, 919, 924, 925, 930, 932, 933, 934, 936, 938, 939, 942, 943, 945, 950, 953, 954, 957, 958, 959, 964, 988, 992, 994, 1001, 1002, 1016, 1017, 1033, 1036, 1038, 1046, 1058, 1059, 1067, 1073, 1082, 1083, 1091, 1123, 1128, 1136, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1157, 1159, 1171, 1176, 1177, 1180, 1182, 1183, 1185, 1186, 1187, 1188, 1192, 1197, 1198, 1228, 1232, 1235, 1255, 1263, 1264, 1266, 1270, 1271, 1272, 1273, 1277, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1295, 1300, 1304, 1308, 1311, 1318, 1327, 1331, 1333, 1338, 1339, 1340, 1341, 1344, 1355, 1357, 1359, 1364, 1371, 1376, 1379, 1381, 1382, 1383, 1385, 1386, 1393, 1395, 1397, 1401, 1402, 1405, 1407, 1408, 1409, 1411, 1413, 1416, 1421, 1429, 1432], "arbitrari": [53, 87, 239, 356, 464, 613, 614, 828, 829, 868, 896, 988, 994], "arbitrarili": [264, 356], "arcco": [868, 1401], "arccosh": [868, 1401], "arcsin": [868, 1401], "arcsinh": [868, 1401], "arctan": [788, 789, 868, 1401], "arctan2": 789, "arctanh": [868, 1401], "aren": [39, 49, 356, 988], "arg": [33, 57, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 148, 199, 203, 235, 263, 279, 284, 356, 395, 659, 790, 816, 868, 905, 928, 933, 988, 1243, 1401, 1414], "arg_max": [868, 1401], "arg_min": [868, 1401], "arg_sort": [868, 1401], "arg_tru": [791, 868, 1401], "arg_uniqu": [868, 1401], "arg_wher": [396, 868], "argmax": [613, 868], "argument": [38, 41, 48, 97, 146, 148, 150, 151, 155, 163, 166, 167, 182, 184, 186, 196, 220, 224, 231, 243, 244, 259, 263, 278, 279, 288, 294, 295, 302, 315, 322, 326, 330, 331, 335, 356, 469, 497, 510, 522, 528, 549, 613, 614, 655, 659, 675, 709, 745, 746, 747, 754, 765, 782, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 813, 828, 829, 846, 850, 858, 864, 868, 897, 902, 908, 909, 914, 919, 928, 936, 938, 939, 945, 952, 957, 958, 964, 985, 988, 994, 1091, 1123, 1136, 1176, 1243, 1349, 1350, 1351, 1358, 1382, 1401, 1423, 1424], "aris": 153, "arithmet": [237, 356], "arm": 174, "arm64": 174, "around": [39, 49, 356, 988], "arr": [314, 356, 370, 860, 1381, 1393, 1401, 1424], "arr_bar": 1419, "arr_foo": 1419, "arrai": [132, 136, 151, 152, 155, 163, 167, 208, 212, 230, 231, 308, 313, 314, 315, 356, 362, 363, 364, 374, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 429, 457, 458, 459, 460, 571, 587, 588, 589, 590, 592, 601, 602, 604, 607, 609, 613, 671, 678, 680, 682, 684, 686, 689, 691, 693, 699, 771, 794, 812, 826, 847, 868, 902, 988, 993, 994, 996, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1046, 1080, 1081, 1082, 1083, 1088, 1146, 1201, 1217, 1218, 1219, 1220, 1222, 1230, 1231, 1232, 1234, 1237, 1239, 1240, 1273, 1279, 1281, 1285, 1290, 1292, 1294, 1302, 1306, 1375, 1379, 1381, 1382, 1383, 1401, 1422, 1424, 1428, 1431], "array_agg": 1422, "array_contain": 1422, "array_get": 1422, "array_length": 1422, "array_low": 1422, "array_mean": 1422, "array_revers": 1422, "array_sum": 1422, "array_to_str": 1422, "array_uniqu": 1422, "array_upp": 1422, "arraylik": [1088, 1401], "arrow": [44, 45, 50, 132, 133, 153, 154, 157, 159, 169, 209, 256, 290, 291, 308, 310, 314, 356, 988, 997, 1375, 1381, 1401], "arrowarrayexport": [132, 133], "arrowinvaliderror": [41, 356], "arrowschemaexport": 993, "arrowstreamexport": [132, 133], "as_": [1401, 1406], "as_arrai": 826, "as_dict": [152, 278, 356], "as_expr": 994, "as_seri": [215, 309, 356, 887, 988, 994], "asarrai": [208, 996], "ascend": [244, 272, 288, 356, 655, 675, 868, 909, 925, 936, 988], "ascii": [7, 22, 446, 447, 714, 724, 726, 727, 731, 732, 738, 740, 751, 760, 994, 1064, 1065, 1318, 1328, 1330, 1331, 1335, 1336, 1342, 1344, 1355, 1364], "ascii_borders_onli": 22, "ascii_borders_only_condens": 22, "ascii_case_insensit": [714, 724, 726, 738, 1318, 1328, 1330, 1342], "ascii_ful": 22, "ascii_full_condens": 22, "ascii_horizontal_onli": 22, "ascii_lett": 1432, "ascii_markdown": 22, "ascii_no_bord": 22, "ascii_onli": 994, "ascii_t": 206, "ascii_uppercas": [324, 356], "asd": [715, 722, 1319, 1326], "asia": [139, 994, 1097, 1098, 1126], "asid": 502, "asin": 1422, "asind": 1422, "asof": [259, 356, 914, 988], "asofjoinstrategi": [259, 356, 914, 988], "assert": [175, 176, 177, 178, 182, 186, 288, 356, 880, 994], "assert_frame_equ": [176, 177, 229, 356, 1432], "assert_frame_not_equ": [175, 178], "assert_series_equ": [175, 178, 1145, 1401, 1432], "assert_series_not_equ": [176, 177], "assert_someth": 180, "assertionerror": [175, 176, 177, 178], "assign": [180, 212, 244, 341, 356, 421, 605, 655, 665, 742, 743, 868, 909, 970, 988, 1038, 1235, 1266, 1346, 1347, 1401], "associ": [40, 42, 58, 154, 156, 181, 184, 291, 356, 993, 1412, 1414, 1418], "assum": [34, 291, 356, 919, 971, 988, 1424], "assume_rol": [10, 34], "assumpt": [613, 828, 868], "async": [64, 65, 153, 891, 988], "async_engin": 153, "asynchron": [65, 153, 891, 988], "asyncio": [65, 153, 891, 988], "asyncresult": [65, 891, 988], "asyncsurrealdb": 153, "ata": 28, "atan": 1422, "atan2": [788, 789, 1422], "atan2_ab": 1426, "atan2d": [789, 1422], "atan2d_ab": 1426, "atand": 1422, "atg": 28, "atgataaaggag": 28, "atol": [175, 176, 177, 178], "attack": 172, "attain": [709, 868], "attempt": [1, 11, 49, 50, 51, 52, 64, 65, 212, 464, 868, 890, 891, 896, 901, 930, 943, 988], "attr": [356, 359, 1401, 1406], "attribut": [67, 70, 73, 74, 75, 76, 77, 85, 89, 142, 143, 144, 145, 179, 197, 198, 200, 201, 356, 359, 370, 372, 373, 860, 861, 863, 864, 869, 870, 873, 875, 876, 877, 962, 963, 988, 1393, 1395, 1397, 1401, 1402, 1406, 1407, 1408, 1409], "attributeerror": 1, "audi": [309, 356, 672, 868], "august": 502, "australia": 808, "auth": 36, "authent": [41, 155, 163, 165, 166, 167, 168, 169, 171, 191, 356], "author": 1, "auto": [10, 11, 39, 41, 44, 48, 49, 50, 51, 52, 64, 65, 66, 132, 134, 135, 136, 138, 155, 160, 161, 163, 164, 166, 167, 169, 170, 171, 191, 196, 320, 356, 890, 891, 901, 930, 943, 988, 1432], "autofilt": [42, 356], "autofit": [42, 356], "autogener": [151, 152, 156, 162, 166], "automat": [8, 39, 49, 66, 132, 134, 135, 136, 138, 139, 148, 151, 152, 153, 154, 160, 161, 163, 166, 168, 169, 170, 182, 186, 188, 191, 303, 356, 613, 670, 745, 746, 747, 847, 868, 946, 988, 1271, 1272, 1349, 1350, 1351, 1384, 1401, 1411, 1413, 1416, 1429], "autumn": [736, 737], "avail": [42, 48, 52, 141, 153, 154, 155, 164, 167, 168, 180, 193, 194, 195, 206, 265, 280, 303, 355, 356, 370, 372, 373, 502, 665, 847, 860, 861, 863, 867, 868, 869, 870, 873, 874, 875, 876, 877, 880, 920, 946, 986, 987, 988, 994, 1086, 1266, 1393, 1395, 1397, 1401, 1402, 1405, 1407, 1408, 1409, 1420], "available_timezon": [73, 994], "averag": [42, 356, 518, 519, 520, 521, 665, 868, 1147, 1148, 1149, 1150, 1266, 1401, 1418], "avg": 1422, "avocado": 1424, "avoid": [132, 153, 182, 186, 235, 284, 290, 356, 381, 868, 905, 933, 988], "avro": [37, 149, 199, 356, 880], "avrocompress": [37, 356], "aw": [34, 39, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 196, 356, 988], "awai": [695, 868, 1423], "await": [65, 153, 891, 982, 988], "await_result": [932, 988], "awar": [12, 153, 256, 290, 291, 310, 356, 519, 714, 724, 726, 738, 753, 868, 988, 1148, 1318, 1328, 1330, 1342, 1357, 1401], "aws_access_key_id": [41, 155, 167, 171, 356], "aws_region": [41, 167, 171, 356], "aws_secret_access_kei": [41, 155, 167, 171, 356], "awsassumerolekwarg": 34, "axi": [271, 323, 356, 359, 788, 789, 924, 953, 988, 1401, 1406], "aya": [740, 1344, 1355], "az": [155, 167, 168], "azur": [35, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 196, 356, 988], "azure_storage_account_kei": [155, 167, 168], "azure_storage_account_nam": [155, 167, 168], "b": [1, 12, 37, 39, 41, 44, 45, 48, 53, 61, 66, 89, 97, 103, 106, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 153, 156, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 256, 257, 258, 261, 262, 263, 265, 266, 268, 270, 273, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 299, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 374, 379, 381, 382, 384, 385, 395, 397, 402, 407, 425, 426, 427, 428, 429, 430, 431, 432, 437, 440, 442, 443, 455, 462, 466, 499, 502, 522, 524, 526, 527, 528, 530, 540, 541, 544, 547, 548, 549, 550, 552, 555, 557, 558, 559, 560, 565, 571, 576, 578, 584, 594, 595, 596, 597, 613, 614, 619, 635, 638, 639, 640, 641, 642, 643, 644, 652, 653, 655, 659, 662, 665, 669, 670, 672, 674, 701, 707, 709, 716, 720, 725, 729, 736, 737, 761, 762, 773, 776, 780, 782, 783, 784, 785, 786, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 812, 813, 814, 815, 816, 819, 820, 821, 823, 824, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 843, 844, 845, 847, 849, 850, 851, 852, 853, 857, 864, 868, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 916, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 933, 934, 935, 937, 938, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 988, 994, 1000, 1003, 1025, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1068, 1085, 1088, 1125, 1128, 1142, 1145, 1146, 1153, 1156, 1176, 1177, 1182, 1201, 1224, 1225, 1226, 1227, 1264, 1269, 1320, 1324, 1329, 1333, 1340, 1341, 1365, 1367, 1368, 1370, 1382, 1388, 1401, 1411, 1413, 1414, 1416, 1417, 1418, 1419, 1424, 1425, 1426, 1429], "b1": [59, 61], "b2": [59, 61], "b345": [42, 356], "b4": [42, 356], "b_b": [303, 356], "b_btm_by_a": [442, 868], "b_btm_by_b": [442, 868], "b_by_ca": [442, 773, 868], "b_by_cb": [442, 773, 868], "b_div_a": [249, 356], "b_is_not_nan": [558, 868], "b_isnan": [557, 868], "b_isnul": [560, 868], "b_not_nul": [559, 868], "b_revers": [639, 643, 672, 868], "b_suffix": 644, "b_sum": [335, 964], "b_top_by_a": [773, 868], "b_top_by_b": [773, 868], "ba": [464, 522, 628, 744, 813, 868, 994], "back": [4, 58, 171, 232, 244, 296, 314, 315, 356, 628, 655, 737, 868, 890, 901, 909, 930, 940, 943, 963, 988, 1153, 1382, 1401], "backend": [41, 153, 154, 155, 167, 168, 356, 359, 1401, 1406], "background": [64, 65, 356, 360, 890, 891, 987, 988], "backward": [48, 52, 234, 259, 356, 424, 469, 490, 527, 868, 904, 914, 988, 1041, 1091, 1116, 1156, 1401], "backward_fil": [527, 533, 868, 1156, 1161, 1401], "bad": [736, 737, 1340, 1341], "balanc": [185, 187, 1432], "ballon_dor": [721, 723, 1325, 1327], "banana": [219, 309, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 442, 672, 718, 744, 773, 868, 967, 969, 972, 973, 974, 975, 976, 977, 978, 1424], "banded_column": [42, 356], "banded_row": [42, 356], "banker": [695, 868, 1296, 1401], "bar": [37, 39, 41, 44, 45, 46, 47, 48, 147, 160, 161, 215, 218, 219, 220, 224, 225, 226, 227, 228, 229, 232, 235, 237, 239, 240, 241, 246, 248, 249, 250, 252, 258, 262, 264, 266, 267, 268, 269, 270, 273, 274, 277, 280, 282, 284, 285, 286, 289, 292, 293, 294, 296, 301, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 321, 322, 327, 328, 329, 334, 356, 359, 445, 464, 546, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 706, 715, 717, 720, 722, 723, 739, 741, 743, 748, 749, 786, 797, 798, 799, 814, 819, 820, 823, 824, 830, 832, 834, 835, 837, 838, 846, 849, 853, 857, 858, 864, 868, 887, 892, 893, 897, 898, 899, 900, 905, 911, 912, 913, 927, 933, 934, 937, 938, 951, 952, 956, 988, 993, 994, 1062, 1214, 1311, 1319, 1321, 1324, 1326, 1327, 1343, 1347, 1352, 1353, 1401, 1415, 1417, 1418, 1419, 1421, 1424, 1427], "bar2": 1424, "bar22": [237, 356], "bar_": 741, "bar_3": [311, 356], "bar_4": [311, 356], "bar_a": [280, 356], "bar_at_2": 1419, "bar_avg": 1418, "bar_b": [280, 356], "bar_color": [42, 356], "bar_max": 1418, "bar_median": 1418, "bar_min": 1418, "bar_negative_border_color_sam": [42, 356], "bar_negative_color_sam": [42, 356], "bar_std": 1418, "bar_sum": 1418, "bar_var": 1418, "bare": [621, 622, 994], "base": [33, 42, 53, 54, 55, 71, 117, 119, 156, 184, 212, 227, 235, 244, 260, 284, 288, 356, 470, 478, 515, 518, 519, 520, 521, 528, 543, 548, 608, 609, 660, 662, 670, 675, 679, 681, 683, 685, 687, 690, 692, 694, 755, 801, 802, 815, 841, 868, 905, 909, 915, 933, 936, 988, 994, 1092, 1100, 1142, 1147, 1148, 1149, 1150, 1171, 1175, 1238, 1239, 1243, 1262, 1264, 1271, 1272, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1359, 1392, 1401, 1417, 1423, 1432], "base64": [426, 427, 716, 717, 1043, 1044, 1320, 1321], "base_nam": [320, 356], "base_path": [53, 54, 55], "base_utc_offset": [478, 1100], "baseexcept": 1429, "basepartitioncontext": 54, "basi": [42, 156, 182, 356], "basic": [42, 208, 356, 620, 996, 1432], "basic_chart": [42, 356], "batch": [45, 97, 141, 146, 152, 153, 159, 161, 170, 172, 290, 318, 356, 890, 919, 988], "batch_siz": [39, 49, 146, 151, 152, 153, 161, 170, 172, 318, 356, 988], "batchedcsvread": 152, "baz": [239, 249, 250, 322, 356, 723, 741, 743, 814, 823, 838, 864, 912, 952, 988, 993, 994, 1327, 1347, 1415, 1421, 1424], "bb": [994, 1086, 1401, 1424, 1429], "bbb": [1, 42, 356, 761, 763, 764, 994], "bc": [725, 737, 851, 1329], "bcbc45": 1424, "bea": 14, "bear": 994, "bearer": 191, "bearer_token": 191, "beauti": 14, "becaus": [161, 170, 230, 244, 261, 264, 324, 342, 356, 532, 576, 868, 909, 971, 988, 1146, 1206, 1243, 1401], "becom": [184, 355, 429, 986, 987, 1046], "bed3": [42, 356], "been": [5, 32, 42, 189, 210, 337, 356, 534, 632, 665, 868, 966, 1266, 1401], "beetl": [309, 356, 672, 868], "befor": [42, 49, 50, 51, 52, 53, 72, 73, 146, 148, 151, 153, 154, 156, 166, 172, 175, 176, 177, 178, 188, 206, 232, 244, 259, 303, 313, 318, 322, 356, 435, 436, 438, 439, 459, 460, 461, 655, 656, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 720, 760, 767, 795, 843, 844, 868, 909, 911, 914, 952, 988, 1052, 1053, 1055, 1056, 1082, 1083, 1084, 1153, 1259, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1324, 1364, 1371, 1401, 1417], "beforehand": [750, 752, 753, 1354, 1356, 1357], "begin": [14, 42, 250, 356, 518, 520, 521, 547, 548, 721, 751, 868, 912, 988, 1147, 1149, 1150, 1174, 1175, 1325, 1355, 1401], "behav": [70, 235, 284, 356, 528, 614, 746, 747, 858, 868, 905, 933, 988], "behavior": [10, 48, 52, 56, 151, 163, 171, 212, 226, 227, 235, 258, 259, 356, 406, 534, 550, 580, 582, 720, 814, 823, 868, 898, 899, 913, 914, 985, 988, 1024, 1177, 1210, 1212, 1324, 1401], "behaviour": [12, 58, 153, 226, 227, 235, 284, 303, 356, 713, 721, 722, 725, 736, 737, 774, 847, 868, 898, 899, 905, 933, 946, 988, 1317, 1325, 1326, 1329, 1340, 1341], "behind": 188, "being": [10, 15, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 131, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 215, 231, 260, 265, 303, 311, 313, 318, 325, 356, 359, 360, 368, 369, 374, 461, 462, 469, 481, 543, 613, 614, 662, 676, 677, 679, 680, 681, 683, 685, 687, 688, 689, 690, 692, 693, 694, 720, 754, 792, 794, 812, 825, 826, 828, 829, 845, 858, 868, 887, 890, 891, 901, 902, 915, 920, 929, 930, 946, 954, 962, 988, 994, 1068, 1084, 1085, 1091, 1103, 1171, 1177, 1264, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1324, 1376, 1379, 1384, 1401, 1406, 1432], "belong": [1, 244, 356, 909, 988], "below": [21, 41, 155, 156, 167, 168, 227, 235, 280, 284, 356, 502, 527, 727, 736, 737, 751, 806, 807, 809, 810, 855, 856, 858, 864, 868, 905, 933, 988, 1128, 1331, 1340, 1341, 1355], "best": [168, 264, 342, 356, 614, 868, 1243, 1401], "better": [264, 313, 314, 342, 356, 447, 613, 614, 732, 828, 829, 868, 886, 971, 988, 1065, 1299, 1301, 1336, 1401], "between": [26, 66, 102, 154, 179, 180, 182, 186, 211, 220, 258, 272, 282, 290, 348, 356, 407, 443, 465, 466, 502, 549, 550, 574, 584, 594, 595, 596, 597, 656, 662, 663, 686, 687, 712, 728, 788, 789, 792, 797, 799, 826, 840, 843, 844, 868, 913, 925, 931, 977, 988, 1025, 1060, 1087, 1088, 1128, 1176, 1177, 1204, 1214, 1224, 1225, 1226, 1227, 1259, 1264, 1265, 1287, 1288, 1316, 1332, 1401, 1418, 1426], "between_ab": [549, 868], "beyond": [53, 758, 1362], "bia": [520, 521, 562, 676, 688, 706, 868, 1149, 1150, 1192, 1277, 1289, 1311, 1401], "bias": [562, 706, 868, 1192, 1311, 1401], "big": [152, 429, 1046], "big_fil": 152, "bigidx": 140, "bigqueri": 154, "bigquery_format": 199, "bin": [462, 543, 662, 755, 781, 861, 868, 1085, 1171, 1264, 1359, 1395, 1401, 1406], "bin2int": 429, "bin_count": [543, 868, 1171, 1401], "bin_i": [781, 868], "bin_x": [781, 868], "bin_xor_xi": [781, 868], "binari": [42, 44, 147, 153, 223, 296, 356, 374, 425, 426, 427, 428, 429, 430, 431, 464, 628, 716, 868, 896, 940, 988, 994, 1042, 1043, 1045, 1046, 1047, 1048, 1320, 1420], "binary_str": [781, 868], "bind": 156, "birthdai": 151, "bit": [72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 433, 434, 435, 436, 438, 439, 667, 713, 868, 1050, 1052, 1053, 1055, 1056, 1268, 1317, 1401, 1420, 1424], "bit_and": 1422, "bit_count": 1422, "bit_length": 1422, "bit_or": 1422, "bit_xor": 1422, "bitmap": [230, 356, 1146, 1401], "bitsiz": 374, "bitwis": [383, 432, 437, 440, 654, 781, 782, 783, 784, 785, 868, 1049, 1054, 1057, 1401, 1422, 1428], "bitwise_and": [868, 1401], "bitwise_count_on": [868, 1401], "bitwise_count_zero": [868, 1401], "bitwise_leading_on": [868, 1401], "bitwise_leading_zero": [868, 1401], "bitwise_or": [868, 1401], "bitwise_trailing_on": [868, 1401], "bitwise_trailing_zero": [868, 1401], "bitwise_xor": [868, 1401], "bla": [715, 722, 1319, 1326], "black": [264, 356, 425, 426, 427, 428, 431], "blindli": [576, 1206], "block": [22, 65, 243, 321, 356, 891, 908, 934, 951, 960, 961, 971, 988, 1299, 1301, 1401], "blue": [57, 98, 99, 425, 426, 427, 428, 431, 778, 868, 1390, 1401], "bob": [151, 272, 356, 368, 925, 988, 1430], "bodi": [42, 356, 360], "bold": [42, 356], "bom": [39, 49, 356, 988], "bool": [5, 7, 8, 9, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 39, 41, 42, 48, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 66, 97, 132, 133, 134, 135, 137, 138, 139, 142, 146, 147, 148, 151, 152, 153, 155, 156, 157, 159, 161, 162, 163, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 208, 210, 214, 215, 216, 217, 222, 224, 229, 234, 235, 236, 237, 241, 242, 243, 244, 248, 251, 252, 253, 256, 258, 259, 269, 278, 280, 284, 285, 289, 290, 291, 292, 297, 300, 302, 303, 306, 309, 311, 314, 315, 319, 320, 321, 322, 325, 326, 328, 330, 338, 340, 343, 346, 356, 374, 381, 382, 383, 384, 385, 395, 398, 399, 402, 406, 407, 417, 422, 425, 426, 428, 431, 442, 443, 444, 448, 456, 457, 458, 459, 460, 462, 469, 481, 482, 498, 515, 516, 517, 518, 520, 521, 537, 539, 540, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 572, 576, 580, 582, 584, 593, 600, 606, 612, 613, 614, 618, 619, 620, 621, 622, 623, 624, 625, 629, 630, 649, 650, 652, 654, 655, 657, 658, 662, 665, 667, 676, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 697, 698, 699, 701, 706, 708, 709, 712, 713, 714, 715, 716, 718, 724, 725, 726, 728, 736, 737, 738, 741, 742, 744, 750, 752, 753, 755, 757, 761, 763, 764, 773, 775, 778, 781, 782, 783, 784, 785, 787, 790, 791, 792, 793, 796, 797, 799, 800, 801, 802, 806, 807, 809, 810, 815, 821, 822, 825, 826, 827, 828, 829, 833, 838, 839, 841, 842, 846, 847, 850, 852, 855, 856, 858, 859, 868, 885, 887, 888, 890, 891, 895, 897, 901, 904, 905, 908, 909, 913, 914, 919, 924, 930, 933, 934, 941, 943, 945, 946, 950, 951, 952, 953, 954, 957, 962, 963, 967, 969, 972, 975, 988, 993, 994, 996, 1001, 1002, 1013, 1016, 1017, 1020, 1024, 1025, 1034, 1039, 1042, 1043, 1045, 1048, 1059, 1060, 1061, 1063, 1066, 1068, 1072, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1091, 1103, 1104, 1124, 1142, 1144, 1145, 1147, 1149, 1150, 1157, 1159, 1167, 1168, 1171, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1197, 1198, 1202, 1206, 1210, 1212, 1214, 1223, 1230, 1236, 1243, 1255, 1257, 1260, 1261, 1264, 1266, 1267, 1268, 1277, 1278, 1279, 1281, 1283, 1285, 1287, 1289, 1290, 1292, 1294, 1298, 1300, 1301, 1302, 1306, 1311, 1313, 1316, 1317, 1318, 1319, 1320, 1322, 1328, 1329, 1330, 1332, 1340, 1341, 1342, 1345, 1346, 1348, 1354, 1356, 1357, 1359, 1361, 1376, 1381, 1382, 1386, 1387, 1390, 1401, 1410, 1411, 1413, 1419, 1424, 1429], "boolean": [58, 97, 182, 214, 235, 237, 284, 302, 319, 356, 382, 383, 384, 398, 399, 402, 425, 428, 431, 442, 481, 482, 528, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 567, 568, 572, 578, 652, 654, 657, 658, 698, 709, 729, 773, 780, 781, 790, 791, 850, 858, 868, 885, 905, 933, 945, 950, 988, 994, 1001, 1002, 1014, 1016, 1017, 1020, 1042, 1059, 1103, 1104, 1157, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1197, 1198, 1202, 1208, 1257, 1260, 1261, 1300, 1301, 1317, 1386, 1392, 1401, 1421], "border": 22, "both": [12, 27, 39, 49, 57, 98, 99, 153, 156, 171, 218, 244, 258, 259, 260, 272, 288, 289, 315, 325, 356, 385, 451, 462, 502, 522, 549, 662, 675, 679, 681, 683, 685, 687, 690, 692, 694, 740, 806, 807, 809, 810, 825, 826, 855, 856, 858, 864, 868, 879, 909, 913, 914, 915, 925, 936, 943, 954, 988, 994, 1073, 1128, 1176, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1344, 1382, 1401, 1429, 1430], "boto3": 34, "bottom": [214, 356, 442, 868, 885, 988], "bottom_k": [319, 356, 442, 772, 773, 868, 950, 988, 1059, 1385, 1386, 1401], "bottom_k_bi": [441, 772, 773, 868, 1058, 1385, 1386, 1401], "bound": [113, 151, 152, 230, 244, 356, 406, 451, 549, 580, 582, 605, 611, 777, 787, 806, 807, 809, 810, 825, 826, 855, 856, 868, 909, 988, 1024, 1073, 1146, 1176, 1210, 1212, 1241, 1389, 1401, 1419], "boundari": [244, 356, 451, 758, 868, 909, 988, 1073, 1362, 1401], "box": [22, 264, 356], "box_draw": 22, "branch": [64, 858, 890, 901, 930, 943, 988], "break": [10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 131, 142, 143, 144, 145, 146, 147, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 258, 260, 265, 303, 313, 318, 325, 356, 359, 360, 368, 369, 374, 461, 462, 469, 481, 543, 614, 662, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 694, 754, 792, 794, 825, 826, 845, 868, 890, 891, 901, 913, 915, 920, 929, 930, 946, 954, 962, 988, 994, 1068, 1084, 1085, 1091, 1103, 1171, 1264, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1379, 1384, 1401, 1406], "breakpoint": [462, 543, 662, 868, 1085, 1171, 1264, 1401], "breezah": 166, "breviti": 206, "broadcast": [738, 794, 994, 1342], "broader": 994, "brotli": [48, 52, 356, 988], "brussel": [496, 1122], "bst": [474, 478, 496, 1096, 1100, 1122], "bucket": [41, 155, 167, 168, 171, 356, 497, 510, 543, 868, 1123, 1136, 1171, 1401], "bud": [736, 737, 1340, 1341], "budget": 1410, "buffer": [53, 151, 152, 153, 230, 256, 356, 1146, 1401], "buffer_s": [256, 356], "bug": [97, 146, 919, 971, 988, 1243, 1401], "build": [63, 133, 994, 1432], "built": 102, "builtin": [149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 223, 356, 464, 868, 896, 988], "bundl": 206, "busi": [469, 481, 792, 1091, 1103], "by_alternate_row": 1, "by_dtyp": 994, "by_first_letter_of_column_nam": 59, "by_first_letter_of_column_valu": 59, "by_index": 994, "by_left": [259, 356, 914, 988], "by_nam": 994, "by_pred": [289, 356], "by_right": [259, 356, 914, 988], "bye": 1, "byi": 1424, "bys": [244, 356, 909, 988], "byte": [37, 39, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 147, 149, 150, 151, 152, 157, 158, 159, 160, 161, 164, 165, 166, 169, 170, 223, 230, 296, 356, 429, 446, 447, 464, 628, 725, 726, 727, 731, 732, 740, 751, 868, 896, 940, 988, 1046, 1064, 1065, 1146, 1329, 1330, 1331, 1335, 1336, 1344, 1355, 1401, 1424], "bytesio": [42, 44, 45, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 223, 296, 356, 464, 628, 868, 896, 940, 988], "c": [1, 12, 37, 39, 41, 42, 44, 45, 48, 53, 59, 61, 66, 106, 133, 135, 137, 139, 142, 148, 156, 166, 210, 211, 214, 215, 216, 217, 218, 219, 221, 224, 225, 226, 227, 228, 229, 231, 235, 237, 240, 241, 242, 243, 244, 246, 248, 249, 257, 258, 261, 262, 263, 265, 266, 268, 270, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 289, 292, 293, 294, 301, 302, 303, 304, 305, 307, 308, 311, 312, 313, 314, 315, 316, 319, 323, 324, 325, 327, 328, 330, 335, 338, 339, 340, 343, 344, 346, 349, 350, 356, 360, 374, 379, 381, 382, 384, 402, 442, 462, 502, 540, 549, 571, 584, 614, 621, 638, 639, 653, 655, 659, 662, 701, 742, 750, 773, 776, 783, 785, 786, 788, 789, 790, 793, 794, 796, 797, 798, 799, 801, 802, 804, 814, 815, 816, 819, 820, 823, 824, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 847, 849, 851, 852, 853, 857, 864, 868, 885, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 905, 908, 909, 913, 917, 920, 927, 929, 930, 933, 934, 935, 937, 938, 943, 944, 945, 946, 950, 953, 954, 957, 959, 964, 967, 968, 969, 972, 973, 975, 978, 979, 988, 994, 1085, 1176, 1201, 1264, 1346, 1354, 1368, 1388, 1401, 1411, 1413, 1414, 1416, 1417, 1418, 1419, 1424, 1429], "c00": 994, "c01": 994, "c02": 994, "c03": 994, "c05": 994, "c1": 421, "c123": 1424, "c2": 421, "c20": 994, "c25": 994, "c3": 421, "c40": 994, "c45": 1424, "c4d79b": [42, 356], "c50": 994, "c567": [42, 356], "c60": 994, "c75": 994, "c80": 994, "c8ae6d2b276": [42, 356], "c93": 994, "c95": 994, "c96": 994, "c97": 994, "c98": 994, "c99": 994, "c_btm_by_a": [442, 868], "c_btm_by_b": [442, 868], "c_by_ca": [442, 773, 868], "c_by_cb": [442, 773, 868], "c_c_c": [847, 946, 988], "c_contigu": [314, 356], "c_max": [655, 868], "c_mean_squar": [335, 964], "c_min": [655, 868], "c_top_by_a": [773, 868], "c_top_by_b": [773, 868], "c_total": 1429, "ca": 800, "cach": [57, 64, 98, 99, 126, 157, 166, 169, 171, 175, 176, 177, 178, 190, 669, 670, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 750, 752, 753, 757, 868, 879, 890, 901, 930, 943, 988, 1271, 1272, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1354, 1356, 1357, 1361, 1401], "cadi": [280, 356], "cafe": [755, 1359], "caf\u00e9": [446, 447, 731, 732, 994, 1064, 1065, 1335, 1336], "calamin": 156, "calcul": [42, 48, 52, 58, 222, 244, 304, 327, 356, 465, 518, 519, 520, 521, 562, 574, 594, 601, 607, 611, 676, 688, 706, 711, 777, 779, 799, 843, 844, 849, 857, 868, 895, 909, 947, 955, 988, 1086, 1087, 1147, 1148, 1149, 1150, 1192, 1204, 1224, 1277, 1289, 1311, 1315, 1391, 1401], "calendar": [72, 73, 244, 259, 288, 326, 356, 472, 483, 485, 492, 497, 510, 514, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 811, 855, 856, 868, 909, 914, 936, 988, 1094, 1105, 1110, 1118, 1123, 1136, 1140, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "calendar_year": [483, 514], "call": [10, 11, 39, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 57, 64, 137, 146, 148, 151, 152, 153, 155, 156, 157, 161, 163, 164, 166, 167, 169, 170, 171, 175, 176, 177, 178, 182, 186, 196, 206, 214, 243, 244, 261, 264, 288, 303, 314, 319, 355, 356, 441, 442, 457, 460, 469, 481, 613, 614, 669, 670, 702, 772, 773, 792, 798, 828, 829, 864, 868, 885, 890, 901, 908, 909, 930, 936, 943, 946, 950, 985, 986, 987, 988, 994, 1058, 1059, 1091, 1103, 1243, 1272, 1307, 1381, 1385, 1386, 1401, 1411, 1415, 1429], "callabl": [53, 54, 55, 59, 60, 61, 62, 97, 146, 166, 237, 263, 264, 279, 285, 342, 356, 421, 605, 613, 614, 639, 640, 659, 677, 801, 802, 815, 828, 829, 841, 868, 919, 928, 929, 934, 971, 988, 1038, 1235, 1243, 1278, 1401], "callback": [48, 52, 53, 54, 55, 143, 145, 356, 988], "caller": [97, 154, 272, 356, 605, 919, 925, 971, 988], "cam": [285, 356, 934, 988], "can": [1, 10, 16, 29, 39, 41, 42, 44, 48, 49, 50, 51, 52, 53, 57, 58, 64, 72, 73, 75, 89, 97, 98, 99, 132, 135, 146, 151, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 180, 181, 182, 186, 188, 191, 196, 206, 208, 214, 216, 226, 227, 228, 237, 239, 243, 244, 251, 253, 255, 258, 259, 264, 265, 276, 280, 288, 290, 291, 294, 296, 297, 302, 313, 314, 318, 319, 320, 324, 330, 333, 342, 356, 359, 366, 374, 382, 421, 442, 457, 460, 461, 464, 469, 481, 489, 490, 492, 496, 499, 502, 519, 525, 528, 549, 576, 578, 605, 613, 614, 621, 625, 628, 629, 635, 655, 660, 661, 662, 667, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 699, 701, 706, 709, 714, 723, 729, 730, 734, 736, 737, 738, 745, 746, 747, 750, 761, 767, 773, 790, 792, 805, 808, 815, 817, 821, 822, 825, 828, 829, 847, 851, 858, 864, 867, 868, 879, 885, 886, 890, 891, 896, 898, 899, 901, 909, 913, 914, 920, 936, 938, 940, 941, 943, 945, 946, 950, 957, 960, 961, 988, 994, 996, 1038, 1059, 1084, 1091, 1103, 1115, 1116, 1118, 1122, 1125, 1128, 1148, 1154, 1176, 1206, 1235, 1243, 1248, 1262, 1263, 1264, 1268, 1272, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1299, 1301, 1302, 1305, 1311, 1318, 1319, 1327, 1334, 1340, 1341, 1342, 1349, 1350, 1351, 1354, 1371, 1379, 1381, 1386, 1401, 1406, 1416, 1429], "cancel": [890, 988], "candid": [721, 723, 1325, 1327], "cannot": [1, 48, 49, 50, 51, 52, 64, 65, 108, 111, 151, 152, 156, 157, 159, 161, 162, 163, 171, 188, 206, 259, 263, 264, 291, 292, 314, 333, 342, 356, 426, 502, 522, 593, 613, 614, 629, 697, 701, 716, 742, 763, 828, 829, 868, 890, 891, 901, 914, 919, 930, 943, 961, 963, 971, 988, 994, 1043, 1128, 1223, 1243, 1298, 1320, 1346, 1381, 1401], "capabl": [1, 42, 356], "capac": [230, 300, 356, 1146, 1306, 1401], "capit": [758, 1362], "captur": [721, 723, 736, 737, 1325, 1327, 1340, 1341], "car": [285, 309, 356, 672, 868, 934, 988], "cardin": [213, 356, 386, 786, 868, 884, 988, 1004, 1401], "care": [42, 297, 356, 614, 655, 699, 868, 941, 988, 1302, 1401], "cars_revers": [672, 868], "cartesian": [258, 356, 913, 988], "case": [42, 57, 58, 65, 97, 106, 132, 134, 135, 136, 138, 146, 148, 153, 160, 161, 170, 171, 188, 232, 244, 256, 263, 264, 280, 288, 290, 291, 310, 313, 314, 356, 470, 519, 613, 625, 626, 639, 655, 675, 713, 714, 722, 724, 725, 726, 736, 737, 738, 758, 858, 868, 891, 909, 933, 936, 988, 994, 1092, 1148, 1153, 1317, 1318, 1326, 1328, 1329, 1330, 1340, 1341, 1342, 1362, 1379, 1401], "cast": [1, 41, 56, 60, 61, 132, 134, 135, 138, 148, 171, 175, 176, 177, 178, 237, 244, 265, 279, 288, 313, 314, 318, 330, 356, 385, 459, 460, 471, 499, 502, 513, 654, 659, 660, 667, 669, 675, 729, 730, 760, 767, 771, 795, 796, 848, 868, 880, 909, 920, 928, 929, 936, 957, 988, 994, 1068, 1082, 1083, 1093, 1125, 1128, 1139, 1262, 1268, 1333, 1334, 1359, 1364, 1371, 1377, 1381, 1383, 1384, 1401, 1422], "cast_opt": 171, "cast_str_to_int": [279, 356, 928, 988], "cast_to_float_if_necessari": [929, 988], "cast_to_supertyp": [148, 868], "cat": [28, 57, 98, 99, 462, 662, 713, 715, 756, 759, 771, 796, 863, 868, 994, 1085, 1171, 1264, 1317, 1319, 1360, 1363, 1397, 1401], "catalog": [0, 880], "catalog_nam": [192, 194, 195, 196], "cataloginfo": [193, 204], "categor": [41, 57, 76, 98, 99, 101, 175, 176, 177, 178, 258, 311, 356, 374, 444, 445, 446, 447, 448, 462, 662, 669, 670, 771, 868, 994, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1085, 1264, 1271, 1272, 1383, 1401], "categori": [42, 57, 70, 76, 99, 311, 356, 374, 445, 462, 543, 662, 868, 1062, 1085, 1171, 1264, 1376, 1401], "categorical_as_str": [175, 176, 177, 178], "categoricalord": 70, "categoricaltyp": [308, 356], "caus": [114, 123, 133, 151, 152, 153, 166, 210, 232, 314, 356, 1153, 1381, 1401], "cb": 800, "cba": 747, "cbrt": [868, 1401, 1422], "cbrt_a": 1423, "cc": [522, 813, 868, 994, 1086, 1401, 1424], "ccc": [1, 42, 356, 761, 763, 764, 994, 1424], "ccy": 1432, "cd": [737, 761, 763, 764, 994], "cd34": 737, "cdatainterfac": [133, 209, 997], "cde": [994, 1424], "cdot": [550, 868, 1177, 1401], "cdt": [497, 510, 1123, 1136], "ceil": [60, 868, 1401, 1422], "ceil_a": 1423, "cell": [17, 18, 42, 280, 356], "cent": [472, 1340], "center": [17, 18, 42, 356, 518, 520, 521, 676, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 868, 1147, 1149, 1150, 1277, 1278, 1279, 1281, 1283, 1285, 1287, 1289, 1290, 1292, 1294, 1401], "central": [167, 168, 206, 562, 706, 868, 1192, 1311, 1401], "centuri": 1425, "certain": [53, 249, 326, 356, 374, 746, 747, 864, 883, 890, 930, 988, 994, 1401], "certainli": [750, 752, 753, 1354, 1356, 1357], "cest": [496, 1122], "cet": [496, 1122], "cfg": [2, 4, 19, 206], "cfg_ascii_fram": 206, "cfg_markdown": 206, "cfg_verbos": 206, "cfoo": [959, 988], "chain": 858, "chanc": [179, 182, 186, 1432], "chang": [10, 32, 33, 34, 35, 36, 39, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 64, 65, 74, 80, 131, 133, 139, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 214, 244, 258, 260, 265, 280, 288, 303, 308, 313, 318, 319, 325, 326, 332, 356, 359, 360, 368, 369, 374, 442, 461, 462, 465, 469, 481, 502, 518, 520, 521, 543, 614, 655, 656, 662, 669, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 701, 754, 773, 792, 794, 825, 826, 843, 844, 845, 858, 868, 885, 890, 891, 901, 909, 913, 915, 920, 929, 930, 936, 946, 950, 954, 960, 962, 988, 994, 1068, 1084, 1085, 1091, 1103, 1128, 1145, 1147, 1149, 1150, 1171, 1259, 1264, 1271, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1306, 1358, 1375, 1379, 1384, 1401, 1406, 1429], "changes_length": [148, 868], "char": [29, 151, 152, 166, 722, 1326], "char_length": 1424, "charact": [7, 9, 14, 22, 28, 29, 30, 39, 40, 49, 100, 150, 151, 152, 154, 166, 356, 446, 447, 492, 719, 720, 722, 727, 731, 732, 734, 735, 736, 737, 740, 741, 742, 745, 746, 747, 748, 749, 751, 758, 760, 930, 988, 994, 1064, 1065, 1118, 1323, 1324, 1326, 1331, 1335, 1336, 1338, 1339, 1340, 1341, 1344, 1345, 1346, 1349, 1350, 1351, 1355, 1362, 1364, 1424], "character_length": 1424, "characterist": [182, 186], "charli": [151, 368, 1430], "chart": [42, 356, 359, 930, 988, 1401, 1406], "cheap": [216, 217, 295, 331, 356, 888, 889, 939, 958, 988, 1072, 1074, 1401], "cheaper": [580, 1210], "check": [41, 73, 108, 151, 152, 153, 166, 175, 176, 177, 178, 190, 229, 254, 258, 259, 356, 402, 425, 428, 431, 444, 448, 540, 549, 550, 554, 572, 713, 718, 725, 744, 868, 913, 914, 919, 988, 1020, 1042, 1045, 1048, 1061, 1066, 1145, 1167, 1168, 1179, 1182, 1189, 1191, 1202, 1317, 1322, 1329, 1348, 1401], "check_column_ord": [175, 176], "check_dtyp": [175, 176, 177, 178, 993, 1145, 1401], "check_exact": [175, 176, 177, 178], "check_nam": [177, 178, 1145, 1401], "check_ord": [177, 178], "check_order_observ": 962, "check_row_ord": [175, 176], "check_sorted": [259, 356, 914, 988], "children": 142, "choos": [48, 50, 52, 244, 280, 356, 502, 909, 988, 994, 1128], "chrono": [39, 49, 102, 356, 499, 502, 750, 752, 753, 757, 988, 1125, 1128, 1354, 1356, 1357, 1361, 1424, 1425], "chunk": [16, 52, 141, 151, 152, 155, 161, 163, 166, 167, 169, 170, 171, 182, 186, 232, 257, 275, 314, 356, 385, 666, 868, 988, 1003, 1071, 1153, 1165, 1249, 1267, 1375, 1381, 1401], "chunk_length": 1401, "chunkedarrai": [132, 275, 356], "citi": [736, 737], "clang": 174, "clarifi": 368, "clariti": [289, 356], "class": [1, 10, 19, 33, 34, 35, 36, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 117, 119, 142, 143, 144, 145, 179, 180, 191, 197, 198, 200, 201, 291, 296, 356, 374, 628, 825, 855, 864, 868, 874, 880, 893, 900, 937, 956, 962, 963, 988, 993, 994, 1380, 1401, 1405, 1413, 1429], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 223, 356, 464, 534, 868, 896, 988, 1411, 1429], "claus": [880, 1419, 1428], "clean": [750, 752, 753, 1354, 1356, 1357], "cleaner": 206, "cleanli": [12, 242, 356, 1429], "clear": [57, 98, 217, 356, 889, 988, 1074, 1401], "clearer": 135, "clickhous": 154, "client": [34, 153, 191], "clip": [868, 1401], "clipboard": [38, 150, 356, 880], "clone": [134, 135, 136, 137, 138, 216, 314, 356, 888, 988, 1072, 1401], "close": [42, 49, 50, 51, 52, 54, 153, 244, 288, 303, 356, 462, 549, 550, 610, 662, 675, 679, 681, 683, 685, 687, 690, 692, 694, 706, 806, 807, 809, 810, 825, 826, 855, 856, 868, 909, 936, 946, 988, 1085, 1176, 1177, 1264, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1311, 1401], "closedinterv": [244, 288, 356, 549, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 825, 826, 855, 856, 868, 909, 936, 988, 1176, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "closest": [132, 259, 356, 914, 988, 1418, 1423], "closur": [679, 681, 690, 692, 694, 868], "cloud": [10, 36, 39, 41, 44, 48, 49, 50, 51, 52, 97, 153, 155, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 196, 356, 880, 932, 988], "cloudi": [736, 737], "cloudpickl": 174, "cluster": 171, "cluster_with_column": [64, 890, 901, 930, 943, 962, 988], "co": [722, 868, 1326, 1401, 1422], "coalesc": [66, 258, 259, 325, 356, 547, 724, 726, 750, 858, 868, 913, 914, 954, 988, 1330, 1354, 1417, 1422], "code": [206, 218, 258, 356, 425, 426, 427, 428, 431, 464, 614, 699, 868, 896, 913, 917, 988, 1302, 1401, 1411], "codebas": 206, "coeffici": [220, 356, 706, 868, 1311, 1401, 1418], "coerc": [66, 668, 868, 1270, 1401], "coerce_int96_timestamp_unit": 56, "coercion": [64, 265, 356, 668, 868, 890, 901, 920, 930, 943, 988, 1270, 1401], "col": [1, 14, 39, 42, 49, 53, 58, 59, 60, 61, 136, 138, 166, 180, 182, 235, 243, 244, 249, 252, 254, 258, 259, 260, 264, 265, 276, 279, 280, 284, 288, 289, 294, 302, 313, 318, 322, 324, 330, 335, 356, 360, 368, 374, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 437, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 636, 637, 638, 640, 642, 644, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 790, 791, 793, 794, 795, 796, 798, 800, 803, 805, 806, 808, 809, 811, 815, 816, 817, 818, 819, 820, 830, 832, 834, 835, 837, 840, 841, 846, 847, 849, 851, 853, 854, 857, 858, 868, 905, 908, 909, 911, 913, 914, 915, 920, 928, 929, 933, 936, 938, 945, 946, 952, 957, 959, 964, 988, 994, 1118, 1122, 1206, 1299, 1301, 1330, 1334, 1354, 1401, 1432], "col0": [182, 1432], "col1": [182, 280, 356, 988, 1432], "col2": [182, 280, 356, 988, 1432], "col3": [280, 356, 1432], "col4": 1432, "col_idx": 212, "col_nam": [279, 356, 614, 858, 868, 928, 988], "col_or_expr": 368, "cole": 147, "coli": [42, 356, 645, 646, 994, 1432], "collaps": [64, 890, 901, 930, 943, 988], "collapse_join": [64, 890, 901, 930, 943, 962, 988], "collect": [11, 49, 50, 51, 52, 56, 61, 64, 65, 97, 131, 166, 167, 168, 172, 182, 183, 186, 226, 227, 261, 280, 303, 308, 321, 322, 356, 374, 522, 554, 594, 595, 596, 597, 614, 795, 813, 817, 846, 847, 850, 868, 883, 884, 885, 887, 888, 891, 894, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 938, 940, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 961, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 985, 987, 988, 994, 1182, 1224, 1225, 1226, 1227, 1401, 1411, 1412, 1413, 1416, 1417, 1429, 1430, 1432], "collect_al": [61, 65, 131, 890, 891, 988], "collect_all_async": [891, 988], "collect_async": [65, 988], "collect_dtyp": [361, 366, 374], "collect_schema": [61, 165, 261, 356, 893, 900, 928, 937, 956, 988], "collis": 66, "colnam": [26, 42, 166, 356], "color": [57, 98, 99, 342, 356, 359, 425, 426, 427, 428, 431, 716, 778, 868, 971, 1042, 1043, 1044, 1045, 1048, 1320, 1390, 1401, 1424], "column": [12, 18, 19, 20, 23, 24, 26, 41, 42, 48, 52, 53, 54, 55, 57, 58, 59, 66, 73, 89, 99, 103, 107, 132, 134, 135, 136, 137, 138, 139, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 182, 198, 201, 211, 212, 214, 215, 218, 220, 221, 224, 225, 226, 227, 228, 231, 235, 236, 239, 240, 242, 243, 244, 248, 249, 254, 255, 256, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 297, 302, 304, 305, 306, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 341, 356, 359, 360, 368, 374, 381, 382, 384, 395, 404, 415, 417, 420, 429, 442, 451, 455, 456, 462, 472, 473, 475, 476, 477, 480, 482, 483, 484, 485, 486, 487, 488, 491, 493, 494, 495, 498, 499, 500, 502, 511, 512, 514, 522, 524, 528, 530, 543, 548, 549, 565, 571, 577, 580, 600, 604, 614, 620, 621, 623, 625, 627, 638, 640, 641, 642, 643, 644, 645, 646, 655, 662, 666, 668, 669, 670, 671, 673, 674, 675, 679, 681, 683, 685, 687, 690, 692, 694, 701, 702, 708, 709, 712, 720, 725, 727, 728, 738, 742, 743, 750, 751, 752, 753, 754, 755, 757, 762, 765, 773, 778, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 868, 885, 887, 894, 897, 898, 899, 900, 902, 905, 908, 909, 913, 914, 915, 919, 920, 921, 922, 923, 924, 926, 927, 931, 933, 934, 936, 937, 938, 939, 941, 945, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 970, 971, 988, 993, 994, 1001, 1002, 1022, 1032, 1034, 1037, 1046, 1059, 1063, 1067, 1073, 1078, 1079, 1085, 1094, 1097, 1098, 1099, 1102, 1104, 1105, 1109, 1110, 1111, 1113, 1114, 1117, 1119, 1120, 1124, 1125, 1126, 1128, 1137, 1138, 1140, 1152, 1171, 1175, 1201, 1207, 1210, 1230, 1234, 1264, 1270, 1272, 1273, 1276, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1305, 1316, 1324, 1329, 1332, 1346, 1347, 1354, 1356, 1357, 1358, 1359, 1361, 1367, 1370, 1376, 1377, 1386, 1390, 1401, 1417, 1418, 1419, 1421, 1423, 1424, 1426, 1427, 1430, 1431, 1432], "column_0": [1, 264, 320, 356, 932, 988], "column_1": [264, 320, 356, 1426], "column_2": [320, 356, 1426], "column_abc": 17, "column_format": [42, 356], "column_nam": [263, 285, 320, 356, 374, 934, 988], "column_tot": [42, 356], "column_width": [42, 356], "column_x": [151, 152, 156, 162, 166], "column_xyz": 17, "columnar": [136, 138, 256, 290, 356], "columnformatdict": [42, 356], "columninfo": [201, 204], "columnmap": 171, "columnnameorselector": [215, 224, 226, 227, 231, 271, 278, 280, 291, 311, 321, 322, 323, 324, 356, 887, 897, 898, 899, 902, 924, 951, 952, 953, 988], "columnnotfounderror": [239, 240, 356], "columntotalsdefinit": [42, 356], "columnwidthsdefinit": [42, 356], "colx": [42, 356, 645, 646, 994, 1416, 1432], "colz": [994, 1432], "com": [34, 42, 154, 356, 518, 520, 521, 721, 722, 723, 868, 1147, 1149, 1150, 1325, 1326, 1327, 1401], "combin": [48, 52, 64, 66, 131, 235, 244, 245, 259, 280, 284, 288, 326, 356, 383, 396, 519, 532, 629, 654, 670, 675, 745, 746, 747, 806, 807, 809, 810, 855, 856, 858, 868, 890, 901, 909, 914, 930, 933, 936, 943, 988, 1148, 1272, 1349, 1350, 1351, 1401, 1417, 1430], "come": [126, 154, 244, 321, 323, 356, 469, 481, 489, 490, 562, 792, 858, 868, 909, 951, 953, 988, 1091, 1103, 1115, 1116, 1192, 1401], "comm_subexpr_elim": [64, 890, 901, 930, 943, 962, 988], "comm_subplan_elim": [64, 890, 901, 930, 943, 962, 988], "comma": [38, 39, 49, 151, 152, 166, 356, 754, 988, 1358], "comment": [151, 152, 166, 197, 198, 200, 201], "comment_prefix": [151, 152, 166], "common": [56, 58, 64, 66, 106, 131, 151, 152, 166, 325, 356, 639, 874, 890, 901, 930, 943, 954, 988, 1405], "commonli": 858, "compact": 1427, "compani": 154, "compar": [171, 175, 176, 177, 178, 229, 235, 284, 356, 516, 517, 537, 539, 549, 564, 612, 649, 650, 868, 905, 933, 988, 1144, 1145, 1255, 1401], "comparison": [172, 235, 284, 356, 905, 933, 988], "compat": [22, 42, 44, 45, 48, 50, 52, 101, 139, 308, 356, 713, 715, 721, 722, 723, 725, 736, 737, 988, 994, 1128, 1317, 1319, 1325, 1326, 1327, 1329, 1340, 1341, 1375, 1401, 1411, 1424, 1425, 1429], "compat_level": [44, 45, 50, 308, 356, 988, 1375, 1401], "compatibleframetyp": [1412, 1414, 1429], "compatlevel": [44, 45, 50, 308, 356, 988, 1375, 1401], "competit": [665, 868, 1266, 1401], "compil": [63, 400, 401, 569, 570, 992, 1018, 1019, 1199, 1200], "complement": 994, "complet": [151, 153, 166, 1430], "complex": [183, 441, 442, 461, 772, 773, 868, 1058, 1059, 1084, 1385, 1386, 1401], "compliant": [42, 356, 502, 1128], "compon": [473, 498, 502, 750, 753, 811, 1095, 1124, 1128, 1354, 1357], "compos": 1430, "composit": [89, 1432], "compound": [139, 291, 356, 994], "comprehens": 180, "compress": [37, 41, 44, 45, 48, 50, 52, 356, 673, 868, 988, 1275, 1401], "compression_level": [48, 52, 356, 988], "comput": [64, 66, 104, 230, 243, 259, 280, 315, 321, 335, 348, 356, 378, 387, 388, 389, 390, 391, 392, 410, 411, 412, 413, 418, 419, 423, 449, 452, 453, 454, 457, 458, 459, 460, 466, 515, 518, 519, 520, 521, 523, 562, 587, 588, 589, 590, 594, 595, 596, 597, 601, 607, 608, 609, 610, 635, 655, 656, 661, 665, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 703, 704, 705, 706, 710, 769, 770, 778, 783, 785, 788, 789, 790, 797, 799, 812, 833, 843, 844, 858, 868, 883, 890, 908, 911, 913, 914, 932, 951, 959, 964, 977, 988, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1028, 1029, 1030, 1035, 1036, 1040, 1069, 1075, 1076, 1077, 1080, 1081, 1082, 1083, 1088, 1142, 1146, 1147, 1148, 1149, 1150, 1151, 1192, 1217, 1218, 1219, 1220, 1224, 1225, 1226, 1227, 1231, 1237, 1238, 1239, 1240, 1248, 1259, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1308, 1309, 1310, 1311, 1314, 1373, 1374, 1382, 1390, 1401, 1423, 1426], "computecontext": [932, 988], "computeerror": [625, 755, 858, 1359], "concat": [57, 98, 99, 107, 152, 259, 356, 914, 959, 988, 1071, 1165, 1249, 1267, 1401, 1422], "concat_list": [576, 578, 812], "concat_w": [303, 356, 847, 946, 988, 1422, 1429], "concaten": [57, 66, 98, 99, 237, 279, 356, 659, 712, 728, 794, 795, 796, 868, 928, 988, 1071, 1249, 1316, 1332, 1401, 1424], "concatmethod": 66, "conclus": [136, 138, 356, 988], "concret": [182, 186], "condit": [42, 227, 235, 260, 284, 289, 356, 444, 448, 528, 549, 550, 718, 744, 791, 815, 858, 868, 905, 915, 933, 988, 1176, 1177, 1401, 1417, 1422, 1428], "conditional_format": [42, 356], "conditionalformatdict": [42, 356], "config": [0, 58, 222, 313, 356, 714, 724, 726, 738, 806, 807, 809, 810, 811, 880, 890, 895, 988, 1318, 1330, 1342], "configur": [5, 34, 41, 56, 153, 154, 155, 163, 165, 167, 168, 171, 206, 356, 359, 881, 890, 901, 930, 943, 963, 988, 1401, 1406], "configure_axisx": [356, 359, 1401, 1406], "configure_point": [356, 359, 1401, 1406], "conflat": [549, 868], "conform": [151, 1432], "confus": [106, 382, 557, 558, 738, 868], "conjunct": [42, 98, 153, 156, 162, 180, 356, 821, 824, 988], "conn": 153, "connect": [39, 40, 44, 48, 49, 50, 51, 52, 76, 151, 153, 154, 157, 159, 161, 163, 164, 166, 169, 170, 171, 172, 196, 356, 881, 988], "connectionorcursor": [40, 153, 356], "connector": 154, "connectorx": [153, 154, 174], "consecut": [234, 356, 424, 527, 533, 712, 728, 736, 868, 904, 988, 1041, 1156, 1161, 1316, 1332, 1341, 1401], "consid": [10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 98, 99, 131, 137, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 214, 226, 227, 229, 255, 260, 264, 265, 271, 290, 303, 313, 318, 319, 321, 323, 325, 356, 359, 360, 368, 369, 374, 442, 451, 461, 462, 469, 481, 532, 543, 550, 614, 621, 637, 662, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 754, 773, 792, 794, 801, 815, 825, 826, 845, 864, 868, 885, 890, 891, 898, 899, 901, 915, 920, 924, 929, 930, 943, 946, 950, 951, 953, 954, 962, 971, 988, 994, 1059, 1068, 1073, 1084, 1085, 1091, 1103, 1145, 1171, 1177, 1243, 1264, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1299, 1301, 1379, 1384, 1386, 1401, 1406, 1411], "consider": 147, "consist": [243, 278, 314, 356, 750, 806, 807, 825, 858, 908, 988, 994, 1003, 1153, 1354, 1381, 1401], "consola": [42, 356], "const": 12, "constant": [230, 288, 356, 470, 519, 525, 826, 868, 936, 988, 1092, 1146, 1148, 1154, 1401], "constrain": [58, 166, 226, 227, 356, 898, 899, 988, 994], "constraint": [235, 284, 356, 528, 858, 868, 905, 933, 988, 994, 1431], "construct": [57, 98, 99, 106, 132, 134, 135, 136, 137, 138, 139, 147, 153, 356, 534, 839, 842, 859, 864, 868, 896, 988, 1401, 1416], "construct_categor": 57, "constructor": [147, 156, 186], "consumpt": [53, 54, 55], "contain": [5, 39, 40, 41, 42, 49, 53, 54, 55, 58, 63, 102, 134, 137, 139, 148, 153, 154, 155, 163, 167, 168, 171, 181, 182, 184, 186, 214, 219, 226, 227, 228, 244, 252, 257, 276, 313, 314, 318, 319, 325, 337, 356, 374, 382, 384, 407, 428, 431, 444, 448, 464, 540, 554, 584, 614, 712, 714, 718, 721, 723, 725, 728, 730, 743, 744, 760, 782, 783, 784, 785, 796, 829, 858, 868, 885, 893, 896, 898, 899, 900, 909, 930, 950, 954, 966, 988, 994, 1001, 1002, 1025, 1061, 1066, 1167, 1168, 1214, 1249, 1316, 1318, 1322, 1325, 1327, 1329, 1332, 1334, 1347, 1348, 1364, 1375, 1381, 1401, 1419], "contains_with_expr": 425, "contains_with_lit": 425, "content": [15, 49, 50, 51, 52, 702, 868, 988, 992, 1307, 1401], "context": [57, 98, 99, 143, 145, 188, 276, 303, 356, 374, 380, 528, 576, 614, 625, 708, 709, 778, 798, 814, 817, 823, 824, 829, 838, 842, 845, 846, 867, 868, 879, 880, 932, 946, 959, 988, 1206, 1390, 1401, 1416, 1429, 1431], "contigu": [66, 132, 133, 137, 151, 152, 155, 157, 159, 161, 163, 166, 167, 169, 170, 171, 283, 314, 356], "continu": [462, 662, 706, 868, 1085, 1264, 1311, 1401, 1418], "contrast": [811, 929, 988], "control": [12, 13, 42, 52, 65, 66, 156, 180, 182, 302, 303, 313, 356, 670, 709, 847, 868, 890, 891, 901, 930, 943, 945, 946, 963, 985, 988, 1272, 1379, 1401, 1413, 1416, 1429], "conveni": [232, 318, 356, 980, 1003, 1153, 1401, 1411], "convers": [133, 210, 256, 257, 290, 291, 310, 314, 315, 356, 474, 750, 752, 753, 757, 880, 1096, 1354, 1356, 1357, 1361, 1381, 1382, 1401, 1427, 1429], "convert": [41, 56, 102, 133, 137, 148, 155, 156, 162, 167, 210, 291, 309, 310, 311, 312, 313, 314, 315, 317, 318, 356, 420, 421, 463, 474, 499, 502, 604, 605, 613, 639, 664, 723, 750, 752, 753, 754, 755, 757, 762, 868, 988, 1037, 1038, 1096, 1125, 1128, 1234, 1235, 1327, 1354, 1356, 1357, 1358, 1359, 1361, 1367, 1370, 1378, 1379, 1380, 1381, 1382, 1384, 1401, 1424, 1426, 1427, 1429], "convert_time_zon": [496, 1122], "coo": [285, 356, 934, 988], "coord": 765, "coordin": [42, 356, 1175, 1401], "copi": [38, 132, 133, 137, 150, 208, 210, 216, 217, 257, 308, 314, 315, 330, 356, 525, 868, 888, 889, 957, 988, 996, 1072, 1074, 1154, 1375, 1380, 1381, 1382, 1401, 1429], "corasick": [714, 724, 726, 738, 1318, 1328, 1330, 1342], "core": [1, 260, 356, 915, 988, 1429, 1432], "cores_right": [260, 356, 915, 988], "corner": [22, 42, 139, 356], "corr": [356, 1422], "corrcoef": [220, 356], "correct": [97, 148, 156, 162, 520, 521, 562, 676, 688, 706, 868, 919, 988, 1149, 1150, 1192, 1277, 1289, 1311, 1401], "correctli": [42, 356, 801, 815, 841], "correl": [220, 356, 797, 843, 1418], "correlationmethod": 797, "correspond": [244, 259, 288, 314, 326, 356, 442, 483, 492, 497, 510, 665, 675, 679, 681, 683, 685, 687, 690, 692, 694, 773, 806, 807, 809, 810, 855, 856, 868, 890, 909, 914, 936, 988, 1105, 1118, 1123, 1136, 1266, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1418], "cosd": 1422, "cosh": [868, 1401], "cosin": [387, 388, 452, 453, 613, 868, 1005, 1006, 1075, 1076, 1401, 1426], "cost": [260, 291, 356, 736, 915, 988, 1341], "cost_usd": [736, 1341], "cot": [868, 1401, 1422], "cotang": [454, 868, 1077, 1401, 1426], "cotd": 1422, "could": [41, 95, 104, 356, 703, 801, 811, 815, 858, 868, 887, 895, 988, 1308, 1401], "count": [42, 172, 213, 222, 244, 276, 277, 288, 320, 326, 332, 347, 356, 386, 403, 414, 456, 469, 481, 519, 543, 565, 573, 586, 591, 614, 637, 653, 661, 665, 675, 679, 681, 683, 685, 687, 690, 692, 694, 715, 767, 776, 778, 786, 792, 800, 824, 837, 851, 868, 884, 895, 909, 927, 936, 960, 976, 988, 994, 1004, 1021, 1031, 1079, 1086, 1091, 1103, 1148, 1171, 1195, 1203, 1216, 1221, 1250, 1258, 1263, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1319, 1371, 1388, 1390, 1401, 1406, 1410, 1422], "count_digit": 715, "count_num": [42, 356], "counterpart": 147, "countri": [259, 356, 470, 914, 988, 1092], "country_holidai": [469, 481, 792, 1091, 1103], "covar": 1418, "covar_samp": 1418, "covari": [148, 799, 844, 868, 1418], "cover": 12, "cow": [734, 735, 1338, 1339], "cpu": [151, 152, 174, 313, 356, 963, 1379, 1401], "crab": [713, 725, 1317, 1329], "crate": [39, 49, 102, 356, 713, 715, 721, 722, 723, 725, 736, 737, 750, 752, 753, 757, 988, 994, 1317, 1319, 1325, 1326, 1327, 1329, 1340, 1341, 1354, 1356, 1357, 1361], "creat": [40, 42, 48, 49, 50, 51, 52, 53, 55, 57, 99, 132, 136, 138, 151, 152, 153, 154, 157, 159, 163, 167, 168, 180, 181, 182, 183, 184, 185, 186, 187, 206, 216, 217, 244, 277, 280, 288, 313, 314, 326, 330, 333, 356, 359, 360, 473, 497, 510, 519, 543, 605, 613, 666, 675, 679, 681, 683, 685, 687, 690, 692, 694, 795, 805, 806, 807, 808, 809, 810, 811, 825, 854, 855, 856, 858, 864, 868, 888, 889, 895, 901, 909, 936, 957, 961, 988, 992, 993, 1072, 1074, 1085, 1095, 1123, 1136, 1148, 1171, 1256, 1264, 1267, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1379, 1381, 1401, 1406, 1428, 1429, 1432], "create_async_engin": 153, "create_engin": [40, 356], "created_at": [197, 200, 201], "created_bi": [197, 200, 201], "creation": [143, 145, 152], "credenti": [10, 33, 34, 35, 36, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 196, 356, 880, 988], "credential_provid": [10, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 196, 356, 988], "credentialprovideraw": 10, "credentialproviderfunct": [10, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 196, 356, 988], "cross": [258, 356, 913, 988, 1417], "crustacean": [725, 1329], "cst": [497, 510, 1123, 1136], "csv": [38, 39, 49, 50, 51, 52, 53, 54, 55, 150, 151, 152, 156, 157, 166, 199, 356, 880, 988], "csvencod": [151, 152, 166], "csvquotestyl": [39, 49, 356, 988], "ctx": [53, 54, 55, 1410, 1412, 1413, 1414, 1415, 1416, 1429], "cube": [1, 62, 449, 660, 868, 1069, 1401, 1423], "cuda": 963, "cum_count": [868, 1401], "cum_count_revers": [456, 868], "cum_max": [868, 1401], "cum_max_all_fil": [457, 868], "cum_max_revers": [457, 868], "cum_min": [868, 1401], "cum_min_revers": [458, 868], "cum_prod": [379, 868, 1401], "cum_prod_revers": [459, 868], "cum_reduc": 801, "cum_sum": [546, 655, 766, 804, 868, 911, 988, 1191, 1401], "cum_sum_revers": [460, 868], "cumsum_horizont": 803, "cumul": [456, 457, 458, 459, 460, 800, 801, 802, 803, 804, 868, 1079, 1080, 1081, 1082, 1083, 1401], "cumulative_ev": [868, 1401], "cumulative_sal": [655, 868], "current": [2, 3, 5, 6, 32, 39, 40, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 139, 143, 144, 145, 153, 154, 161, 163, 164, 166, 169, 170, 171, 179, 180, 182, 183, 184, 185, 186, 187, 196, 216, 217, 224, 258, 259, 285, 303, 313, 318, 356, 359, 360, 478, 578, 656, 868, 883, 888, 889, 897, 913, 914, 934, 943, 946, 963, 988, 994, 1072, 1074, 1092, 1100, 1208, 1259, 1379, 1384, 1401, 1406, 1413, 1429], "cursor": [40, 153, 356], "custom": [1, 29, 41, 42, 59, 60, 61, 62, 105, 147, 164, 185, 187, 222, 264, 280, 342, 356, 421, 469, 481, 499, 502, 605, 613, 614, 677, 778, 792, 828, 829, 845, 868, 895, 919, 971, 988, 1038, 1091, 1103, 1125, 1128, 1235, 1243, 1278, 1390, 1401, 1432], "cut": [662, 868, 1264, 1401], "cxx": 1424, "cypher": 153, "d": [30, 37, 39, 41, 42, 44, 45, 48, 135, 172, 211, 235, 242, 244, 245, 246, 258, 262, 284, 307, 308, 318, 324, 328, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 379, 381, 456, 479, 499, 502, 549, 620, 659, 695, 701, 715, 722, 736, 737, 742, 750, 752, 753, 793, 794, 811, 817, 847, 868, 905, 909, 913, 933, 946, 967, 969, 972, 973, 974, 975, 976, 977, 978, 988, 994, 1079, 1101, 1125, 1128, 1176, 1201, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1319, 1326, 1340, 1341, 1346, 1354, 1356, 1357, 1368, 1401, 1417, 1419, 1421, 1424, 1425], "d1": [42, 356, 473], "d2": 473, "d3": 473, "d789": [42, 356], "d_4": [742, 1346], "d_awai": [695, 868], "d_to_even": [695, 868], "dai": [72, 73, 90, 244, 257, 259, 288, 326, 356, 359, 469, 481, 489, 490, 492, 493, 495, 497, 499, 502, 503, 510, 512, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 792, 805, 806, 807, 808, 809, 810, 811, 855, 856, 868, 909, 914, 936, 988, 994, 1091, 1103, 1115, 1116, 1118, 1119, 1121, 1123, 1125, 1128, 1129, 1136, 1138, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "dark": 1410, "data": [0, 1, 12, 20, 21, 23, 26, 30, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 66, 71, 72, 73, 75, 86, 87, 89, 90, 99, 102, 106, 108, 111, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 204, 208, 210, 217, 218, 228, 230, 231, 232, 242, 243, 244, 256, 257, 258, 261, 263, 264, 278, 279, 280, 283, 289, 290, 291, 293, 297, 300, 308, 313, 314, 315, 318, 320, 330, 334, 354, 356, 360, 374, 382, 383, 384, 387, 388, 389, 390, 391, 392, 395, 398, 399, 400, 401, 402, 404, 407, 409, 410, 411, 412, 413, 418, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 443, 445, 446, 447, 451, 452, 453, 454, 455, 462, 463, 464, 469, 470, 471, 472, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 519, 524, 535, 537, 538, 539, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 564, 565, 569, 570, 572, 577, 584, 586, 593, 604, 606, 612, 613, 614, 649, 650, 654, 655, 662, 664, 665, 668, 669, 670, 671, 673, 674, 679, 681, 683, 685, 687, 690, 692, 694, 695, 697, 699, 701, 704, 705, 706, 712, 715, 716, 717, 720, 721, 722, 723, 727, 728, 730, 731, 732, 740, 741, 742, 743, 750, 751, 752, 753, 755, 757, 760, 769, 770, 771, 774, 775, 781, 787, 795, 798, 805, 806, 807, 808, 809, 810, 811, 821, 822, 824, 825, 826, 827, 828, 829, 839, 842, 854, 855, 856, 859, 864, 868, 880, 888, 889, 896, 900, 902, 908, 909, 937, 941, 957, 988, 993, 994, 996, 1001, 1002, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1024, 1025, 1027, 1037, 1039, 1042, 1043, 1044, 1046, 1047, 1060, 1062, 1064, 1065, 1072, 1073, 1074, 1085, 1086, 1091, 1092, 1093, 1094, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1145, 1146, 1148, 1152, 1153, 1171, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1197, 1198, 1199, 1200, 1202, 1207, 1214, 1216, 1223, 1234, 1236, 1243, 1257, 1264, 1266, 1270, 1271, 1272, 1273, 1275, 1276, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1296, 1298, 1306, 1311, 1316, 1317, 1319, 1320, 1321, 1323, 1324, 1325, 1326, 1327, 1331, 1332, 1333, 1334, 1335, 1336, 1344, 1345, 1346, 1347, 1354, 1355, 1356, 1357, 1359, 1361, 1364, 1375, 1380, 1381, 1382, 1383, 1387, 1400, 1401, 1410, 1417, 1424, 1429, 1431], "data_bar": [42, 356], "data_bar_2010": [42, 356], "data_label": [42, 356], "data_page_s": [48, 52, 356, 988], "data_source_format": 201, "databas": [40, 130, 153, 154, 356, 880], "databrick": 191, "databricks_format": 199, "datafram": [0, 1, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 85, 97, 103, 106, 107, 132, 133, 134, 135, 136, 137, 138, 139, 141, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 166, 169, 170, 171, 175, 176, 179, 180, 206, 354, 355, 359, 360, 368, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 437, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 864, 868, 880, 883, 890, 891, 893, 895, 897, 900, 902, 906, 909, 913, 914, 915, 916, 917, 919, 924, 925, 930, 935, 937, 944, 946, 951, 952, 953, 954, 956, 959, 964, 965, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 988, 993, 994, 1085, 1086, 1122, 1148, 1171, 1243, 1264, 1330, 1334, 1346, 1347, 1370, 1376, 1377, 1390, 1401, 1410, 1411, 1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1429, 1432], "dataframeplot": [356, 359], "dataload": [318, 356], "datapoint": [244, 356, 909, 988], "dataset": [16, 48, 76, 151, 152, 155, 156, 162, 166, 167, 171, 172, 258, 318, 356, 562, 868, 880, 913, 919, 988, 1192, 1401, 1430], "datasourceformat": [201, 204], "datat": [42, 356], "datatyp": [0, 39, 49, 132, 134, 135, 136, 138, 158, 160, 161, 163, 165, 170, 171, 183, 184, 186, 228, 237, 263, 356, 362, 365, 366, 368, 443, 522, 605, 613, 614, 701, 729, 771, 794, 801, 802, 813, 815, 827, 828, 829, 841, 845, 864, 868, 880, 900, 988, 993, 994, 1060, 1086, 1141, 1243, 1305, 1383, 1401, 1427], "datatypeexpr": [361, 368, 369, 370, 371, 372, 373, 374, 429, 443, 613, 614, 670, 729, 787, 801, 802, 815, 821, 822, 828, 829, 841, 868, 887, 988], "date": [18, 42, 58, 73, 151, 152, 154, 156, 162, 163, 166, 169, 171, 172, 215, 222, 242, 244, 257, 259, 288, 303, 356, 359, 469, 471, 472, 473, 474, 477, 479, 481, 482, 483, 485, 488, 489, 490, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 655, 675, 679, 681, 683, 685, 687, 690, 692, 694, 750, 752, 771, 792, 806, 807, 809, 810, 817, 825, 827, 854, 868, 887, 895, 909, 914, 936, 988, 994, 1091, 1093, 1094, 1095, 1096, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1148, 1252, 1253, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1354, 1356, 1383, 1401, 1422, 1425, 1427], "date32": [257, 356], "date_format": [39, 49, 356, 988], "date_min": 492, "date_minus_1y_2mon": 1118, "date_part": 1422, "date_plus_1i": [492, 1118], "date_rang": [259, 326, 356, 477, 479, 493, 501, 512, 809, 810, 914, 988, 1099, 1114, 1119, 1120, 1137, 1138], "date_right": [259, 356, 914, 988], "datetim": [18, 39, 42, 49, 56, 58, 102, 139, 155, 163, 167, 169, 171, 182, 183, 184, 186, 196, 197, 200, 201, 215, 222, 242, 244, 257, 259, 288, 303, 326, 356, 359, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 622, 655, 675, 679, 681, 683, 685, 687, 690, 692, 694, 750, 753, 771, 792, 805, 806, 807, 809, 810, 811, 817, 825, 827, 855, 856, 868, 887, 895, 909, 914, 936, 988, 993, 994, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1148, 1252, 1253, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1354, 1357, 1381, 1383, 1401, 1424, 1425], "datetime_cast": 56, "datetime_format": [39, 49, 356, 988], "datetime_rang": [244, 356, 471, 474, 489, 490, 492, 496, 497, 503, 504, 505, 506, 507, 508, 509, 510, 513, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 868, 909, 988, 1092, 1093, 1096, 1100, 1101, 1102, 1108, 1109, 1111, 1113, 1115, 1116, 1117, 1118, 1122, 1123, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "datetime_str": 499, "datetimecastopt": 56, "datetimeindex": 137, "david": 1430, "day_nam": [499, 502], "day_of_month": [477, 493, 512], "day_of_year": [477, 493, 512], "daylight": [244, 259, 288, 326, 356, 470, 478, 492, 497, 510, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 811, 855, 856, 868, 909, 914, 936, 988, 1100, 1118, 1123, 1136, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "dayofweek": 1425, "dayofyear": 1425, "days_diff": 503, "db": [40, 153, 154, 356], "dbapi2": 153, "dbc": [715, 1319], "dbreadengin": 154, "dbwriteengin": [40, 356], "dbwritemod": [40, 356], "dd": [42, 356, 1424], "ddd": [1, 42, 356, 761, 763, 764], "dddd": 1424, "ddof": [304, 327, 356, 418, 423, 601, 607, 689, 690, 693, 694, 711, 779, 797, 799, 843, 844, 849, 857, 868, 947, 955, 988, 1035, 1040, 1231, 1237, 1290, 1291, 1294, 1295, 1315, 1391, 1401], "ddww": 1424, "de": [146, 1424], "deal": [48, 52, 256, 356, 382, 384, 495, 496, 665, 750, 753, 782, 783, 784, 785, 808, 868, 988, 1001, 1002, 1121, 1122, 1266, 1354, 1357, 1401], "debug": [31, 374, 919, 988, 1432], "decad": [1410, 1425], "decai": [518, 519, 520, 521, 868, 1147, 1148, 1149, 1150, 1401], "decemb": [502, 1128], "decim": [9, 12, 13, 29, 30, 39, 42, 49, 151, 152, 166, 356, 360, 374, 695, 754, 868, 988, 994, 1296, 1358, 1401, 1423], "decimal_comma": [39, 49, 151, 152, 166, 356, 988], "decimal_separ": [9, 29], "declar": [132, 134, 135, 136, 138, 153, 160, 161, 170, 313, 318, 356, 858, 988, 994, 1410], "decod": [151, 152, 729], "decompos": [322, 356, 952, 988], "decompress": [48, 50, 52, 356, 988], "decor": [57, 59, 60, 61, 62, 182, 186, 264, 356, 614, 868, 879, 880, 1243, 1401], "dedic": [1, 133, 256, 290, 356, 994, 1429], "deem": [222, 356, 895, 988], "deepcopi": [216, 356, 888, 988, 1072, 1401], "def": [1, 57, 59, 60, 61, 62, 153, 180, 182, 186, 206, 279, 320, 356, 368, 379, 659, 719, 722, 747, 781, 828, 868, 891, 928, 929, 988, 994, 1323, 1326, 1432], "default": [4, 5, 9, 10, 11, 12, 16, 29, 32, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 64, 65, 66, 70, 73, 74, 75, 132, 133, 134, 135, 136, 137, 138, 139, 148, 151, 152, 154, 156, 157, 159, 160, 161, 162, 163, 166, 168, 169, 170, 171, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 206, 222, 223, 226, 227, 230, 239, 243, 244, 245, 256, 258, 259, 265, 269, 271, 278, 280, 288, 289, 290, 291, 292, 296, 299, 303, 304, 306, 311, 313, 314, 318, 321, 323, 324, 325, 327, 332, 341, 356, 374, 381, 382, 384, 402, 407, 416, 421, 429, 462, 464, 469, 481, 495, 496, 502, 515, 517, 518, 520, 521, 541, 554, 572, 580, 584, 593, 598, 599, 601, 605, 607, 608, 613, 621, 622, 625, 628, 647, 648, 650, 655, 656, 662, 665, 669, 670, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 700, 702, 711, 712, 721, 728, 740, 745, 746, 747, 750, 752, 753, 755, 757, 778, 779, 782, 784, 787, 791, 792, 793, 796, 797, 799, 806, 807, 808, 809, 810, 811, 814, 817, 821, 822, 823, 825, 826, 827, 828, 833, 839, 842, 846, 849, 850, 852, 855, 856, 857, 858, 859, 868, 890, 891, 895, 896, 898, 899, 901, 908, 909, 913, 914, 920, 924, 930, 932, 936, 940, 942, 943, 946, 947, 951, 953, 954, 955, 960, 963, 970, 988, 992, 994, 1001, 1002, 1020, 1025, 1033, 1038, 1046, 1073, 1085, 1086, 1091, 1103, 1121, 1122, 1128, 1142, 1146, 1147, 1149, 1150, 1169, 1182, 1202, 1210, 1214, 1223, 1228, 1229, 1235, 1252, 1253, 1259, 1264, 1266, 1271, 1272, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1298, 1304, 1307, 1315, 1316, 1317, 1325, 1329, 1332, 1344, 1349, 1350, 1351, 1354, 1356, 1357, 1359, 1361, 1379, 1381, 1390, 1391, 1401, 1423, 1424, 1432], "default_match": [713, 725], "default_scop": 36, "default_valu": 374, "defaultazurecredenti": 35, "defaultdict": [291, 356], "defaultfieldvalu": 171, "defer": [206, 356, 359, 360, 1401, 1406], "defin": [39, 42, 49, 56, 73, 76, 153, 160, 163, 171, 179, 180, 182, 215, 226, 227, 231, 244, 264, 276, 279, 288, 325, 342, 356, 447, 549, 580, 614, 659, 662, 674, 675, 679, 681, 683, 685, 687, 690, 692, 694, 727, 732, 740, 751, 758, 806, 807, 809, 810, 825, 826, 829, 850, 855, 856, 868, 887, 898, 899, 902, 909, 928, 936, 954, 971, 988, 992, 993, 994, 1065, 1176, 1210, 1243, 1264, 1276, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1331, 1336, 1344, 1355, 1362, 1401], "definit": [42, 77, 356, 562, 676, 868, 993, 994, 1192, 1277, 1401], "deflat": [37, 356], "deg": 1426, "degre": [304, 327, 356, 601, 607, 664, 689, 690, 693, 694, 711, 779, 789, 799, 843, 844, 849, 857, 868, 947, 955, 988, 1290, 1291, 1294, 1295, 1315, 1391, 1401, 1422], "delai": 97, "delet": [76, 1417, 1428], "deletionfil": 171, "delimit": [47, 49, 161, 170, 280, 311, 356, 712, 728, 988, 1316, 1332, 1376, 1401, 1424], "delta": [41, 155, 167, 199, 304, 327, 356, 601, 607, 689, 690, 693, 694, 711, 779, 799, 843, 844, 849, 857, 868, 880, 947, 955, 988, 1290, 1291, 1294, 1295, 1315, 1391, 1401], "delta_merge_opt": [41, 356], "delta_table_opt": [155, 167, 196], "delta_table_vers": 196, "delta_write_opt": [41, 356], "deltalak": [41, 155, 167, 174, 196, 356], "deltashar": 199, "deltat": [41, 155, 167, 356], "demo": [42, 356], "demonstr": [151, 532, 868, 994], "dens": [22, 242, 356, 665, 868, 1266, 1401], "densiti": [1401, 1406], "depend": [48, 53, 57, 63, 99, 153, 156, 162, 174, 211, 212, 356, 400, 401, 569, 570, 613, 614, 625, 662, 665, 811, 814, 817, 823, 828, 829, 868, 919, 988, 998, 1018, 1019, 1199, 1200, 1243, 1264, 1266, 1401, 1432], "deploi": [182, 186], "deprec": [8, 41, 64, 67, 70, 151, 152, 163, 171, 179, 180, 181, 182, 186, 189, 213, 271, 314, 332, 337, 356, 476, 513, 534, 605, 613, 614, 632, 669, 701, 712, 720, 729, 780, 789, 797, 798, 868, 884, 890, 901, 924, 930, 940, 943, 953, 959, 960, 966, 988, 1067, 1098, 1107, 1108, 1139, 1168, 1271, 1316, 1324, 1381, 1401], "depth": 147, "desc": [994, 1410, 1413, 1417, 1419], "descend": [58, 214, 297, 302, 319, 356, 395, 417, 442, 600, 655, 665, 698, 699, 708, 709, 773, 778, 790, 868, 885, 941, 945, 950, 988, 1013, 1034, 1189, 1230, 1266, 1300, 1302, 1313, 1390, 1401], "describ": [182, 242, 356, 733, 988, 1337, 1401], "descript": [244, 356, 909, 988, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1427, 1430, 1431], "deseri": [147, 296, 356, 534, 628, 868, 940, 988], "deserializ": [223, 296, 356, 464, 628, 868, 896, 940, 988], "design": [313, 318, 356, 883], "desir": [182, 258, 356, 421, 513, 605, 913, 988, 1038, 1139, 1235], "destin": 154, "detail": [63, 133, 153, 154, 175, 177, 210, 244, 325, 356, 502, 771, 868, 909, 954, 963, 988, 1128, 1383, 1401, 1432], "determin": [16, 39, 42, 49, 58, 66, 95, 147, 151, 152, 153, 156, 162, 163, 166, 171, 173, 214, 218, 237, 244, 256, 257, 264, 288, 319, 320, 326, 356, 374, 442, 481, 482, 495, 496, 543, 625, 662, 668, 670, 706, 714, 727, 729, 750, 751, 753, 773, 808, 826, 839, 842, 859, 868, 885, 892, 893, 900, 909, 936, 950, 956, 988, 1059, 1103, 1104, 1121, 1122, 1171, 1235, 1264, 1270, 1271, 1272, 1311, 1318, 1354, 1357, 1358, 1386, 1401], "determinist": [778, 868, 1390, 1401], "dev": [209, 997, 1290, 1401], "develop": [154, 182, 186], "deviat": [304, 356, 520, 689, 690, 711, 849, 868, 947, 988, 1149, 1291, 1315, 1401, 1418], "devic": [313, 356, 890, 901, 930, 943, 963, 988, 1379, 1401], "devicememoryresourc": 963, "df": [1, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 59, 60, 85, 103, 107, 133, 134, 135, 136, 137, 138, 139, 152, 153, 154, 166, 179, 180, 182, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 368, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 429, 430, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 754, 755, 756, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 864, 868, 909, 936, 952, 954, 968, 971, 979, 988, 994, 1122, 1148, 1330, 1334, 1346, 1347, 1377, 1401, 1406, 1410, 1411, 1412, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1429, 1432], "df0": [272, 356, 925, 988, 1416], "df1": [58, 66, 175, 176, 229, 232, 272, 303, 328, 356, 925, 988, 1413, 1415, 1416, 1417, 1429], "df2": [58, 66, 175, 176, 229, 232, 328, 356, 1413, 1415, 1416, 1417, 1429], "df3": [58, 356], "df4": 356, "df5": 356, "df6": 356, "df_a": 1429, "df_a1": 66, "df_a2": 66, "df_a3": 66, "df_agg_nuniqu": [276, 356], "df_b": 1429, "df_count": [778, 868], "df_current_batch": 152, "df_d1": 66, "df_d2": 66, "df_from_str_repr": [312, 356], "df_h1": 66, "df_h2": 66, "df_new_grid": [547, 868], "df_nuniqu": [276, 356], "df_original_grid": [547, 868], "df_panda": 1411, "df_pd": 133, "df_tempor": [679, 681, 683, 685, 687, 690, 692, 694, 868], "dfi": 210, "diagon": [66, 320, 356], "diagonal_relax": 66, "diagram": [932, 988], "diana": 368, "dict": [32, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 59, 61, 63, 132, 134, 135, 136, 137, 138, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 182, 196, 197, 200, 201, 236, 256, 278, 289, 290, 291, 309, 310, 313, 318, 320, 356, 868, 988, 993, 994, 1159, 1401, 1414], "dictat": [148, 492, 868, 1118], "dictionari": [10, 32, 39, 41, 42, 44, 48, 49, 50, 51, 52, 63, 89, 132, 134, 135, 136, 138, 147, 151, 152, 153, 154, 155, 158, 160, 161, 163, 164, 165, 166, 167, 169, 170, 171, 196, 256, 278, 289, 290, 291, 309, 310, 313, 318, 356, 988, 993], "did": [470, 1092], "diff": [503, 504, 505, 506, 507, 508, 509, 594, 868, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1224, 1401], "differ": [42, 48, 56, 102, 105, 126, 151, 156, 171, 172, 175, 177, 206, 226, 232, 244, 245, 256, 258, 280, 288, 290, 291, 310, 313, 314, 320, 356, 465, 477, 492, 493, 496, 502, 511, 517, 532, 541, 550, 574, 594, 596, 647, 648, 650, 655, 669, 670, 750, 776, 814, 817, 823, 868, 881, 898, 899, 901, 909, 913, 936, 988, 992, 994, 1087, 1099, 1118, 1119, 1122, 1128, 1137, 1144, 1153, 1169, 1177, 1204, 1224, 1226, 1243, 1252, 1253, 1255, 1271, 1272, 1354, 1401, 1425, 1427, 1429], "digit": [74, 659, 695, 696, 722, 754, 868, 994, 1296, 1297, 1319, 1326, 1358, 1401, 1432], "dimens": [132, 134, 136, 138, 160, 161, 170, 356, 671, 868, 988, 1273, 1381, 1401], "dimension": [134, 136, 138, 314, 356, 988, 1401], "direct": [42, 154, 163, 168, 171, 299, 313, 324, 356, 416, 598, 700, 868, 942, 988, 1033, 1228, 1304, 1401], "directli": [6, 32, 42, 65, 66, 132, 153, 182, 186, 206, 212, 291, 313, 356, 518, 520, 521, 670, 842, 868, 891, 988, 1147, 1149, 1150, 1272, 1379, 1401, 1413, 1429, 1432], "directori": [42, 48, 49, 50, 51, 52, 53, 55, 148, 163, 166, 169, 171, 356, 988], "dirpath": [37, 39, 44, 45, 48, 166, 356], "disabl": [10, 48, 52, 57, 98, 99, 163, 169, 183, 256, 356, 890, 988], "disable_string_cach": 99, "disallow": 182, "discard": [235, 284, 356, 528, 868, 905, 933, 988, 1157, 1401], "disco": [724, 726, 1328, 1330], "discont": [724, 726, 1328, 1330], "discourag": [614, 868], "discoveri": [280, 356], "discret": [462, 465, 515, 574, 594, 662, 868, 1085, 1087, 1142, 1204, 1224, 1264, 1401], "disk": [48, 49, 50, 51, 52, 157, 356, 629, 881, 943, 988], "dispatch": 994, "displai": [7, 12, 13, 14, 15, 19, 20, 21, 25, 26, 27, 28, 42, 222, 242, 356, 374, 895, 901, 943, 988], "distanc": [259, 356, 914, 988], "distinct": [42, 186, 278, 280, 334, 356, 402, 422, 553, 554, 556, 572, 606, 665, 674, 811, 868, 1020, 1039, 1181, 1182, 1184, 1202, 1236, 1266, 1276, 1401, 1418, 1428, 1430, 1432], "distinct_count": [48, 52, 356, 988], "distinguish": [502, 1128], "distribut": [562, 706, 868, 932, 988, 1192, 1311, 1401], "div": 1422, "diverg": [64, 131], "divid": [22, 462, 497, 510, 518, 520, 521, 532, 562, 662, 665, 868, 1085, 1123, 1136, 1147, 1149, 1150, 1192, 1264, 1401, 1418, 1423], "divis": [532, 774, 868, 1423], "divisor": [304, 327, 356, 601, 607, 689, 690, 693, 694, 711, 779, 799, 843, 844, 849, 857, 868, 947, 955, 988, 1290, 1291, 1294, 1295, 1315, 1391, 1401], "dl": [318, 356], "do": [1, 42, 56, 58, 64, 134, 135, 138, 151, 163, 166, 171, 175, 176, 177, 178, 211, 222, 224, 232, 255, 258, 259, 280, 285, 308, 320, 324, 356, 359, 469, 576, 736, 737, 745, 746, 747, 797, 839, 842, 859, 886, 890, 895, 897, 901, 913, 914, 919, 930, 932, 934, 943, 963, 988, 994, 1084, 1091, 1153, 1206, 1340, 1341, 1349, 1350, 1351, 1384, 1401, 1406], "do_polars_oper": 31, "do_someth": 153, "do_various_th": 206, "doc": [41, 44, 45, 133, 154, 157, 159, 175, 177, 208, 209, 220, 356, 996, 997], "document": [34, 102, 151, 153, 154, 208, 356, 360, 499, 502, 730, 750, 752, 753, 757, 864, 963, 996, 1125, 1128, 1334, 1354, 1356, 1357, 1361], "doe": [12, 39, 41, 49, 50, 51, 52, 58, 64, 65, 120, 132, 134, 135, 136, 138, 139, 151, 152, 153, 154, 155, 156, 160, 161, 166, 167, 170, 172, 212, 217, 232, 239, 244, 245, 257, 258, 265, 284, 289, 290, 291, 321, 330, 333, 356, 359, 360, 429, 513, 528, 532, 541, 701, 714, 724, 726, 738, 746, 747, 776, 864, 868, 883, 889, 890, 891, 895, 901, 905, 909, 913, 919, 920, 929, 930, 933, 943, 951, 957, 961, 988, 1046, 1074, 1139, 1153, 1157, 1169, 1306, 1318, 1328, 1330, 1342, 1401, 1406, 1424], "doesn": [41, 151, 166, 244, 259, 356, 515, 868, 909, 914, 988, 1142, 1401], "dog": [713, 756, 759, 796, 1317, 1360, 1363], "doi": 1425, "dollar": [736, 737, 1340, 1341], "domain": [1, 722, 1326], "don": [66, 137, 172, 244, 259, 264, 321, 324, 356, 461, 576, 614, 655, 868, 909, 914, 951, 988, 994, 1084, 1206, 1243, 1401], "done": [49, 50, 51, 52, 64, 65, 131, 152, 172, 206, 213, 259, 356, 385, 386, 655, 868, 884, 887, 890, 891, 901, 914, 930, 988, 1004, 1401], "dot": [58, 629, 864, 868, 932, 943, 988, 1401], "doubl": [315, 356, 736, 737, 1340, 1341], "dow": 1425, "down": [166, 169, 170, 171, 172, 215, 356, 443, 531, 868, 1160, 1401], "downcast": 56, "download": [161, 166, 169, 170, 629, 943, 988], "downstream": [314, 356, 699, 868, 1302, 1401], "dr": 168, "drago": [727, 1331], "dragon": 727, "dragonfr": 1331, "dragonfruit": [727, 740, 751, 1331, 1344, 1355], "dramat": 156, "draw": [22, 27, 182, 186, 1432], "drawback": 864, "drawfn": 1432, "drawing_charact": 22, "dremio": 153, "driver": [40, 153, 154, 356], "drop": [1, 135, 225, 226, 227, 264, 284, 321, 356, 465, 467, 468, 574, 575, 662, 868, 898, 899, 933, 951, 988, 1087, 1089, 1090, 1204, 1205, 1264, 1401, 1428], "drop_dupl": [321, 356, 951, 988], "drop_empty_col": [156, 162], "drop_empty_row": [156, 162], "drop_first": [311, 356, 1376, 1401], "drop_in_plac": 356, "drop_nan": [227, 356, 468, 868, 899, 988, 1090, 1401], "drop_nul": [226, 311, 356, 467, 868, 898, 988, 1089, 1376, 1401], "dset": 172, "dst": [497, 510, 1123, 1136], "dst_offset": [470, 1092], "dt": [1, 42, 58, 156, 162, 288, 356, 675, 811, 868, 877, 936, 988, 994, 1409, 1424, 1425], "dt1": 1424, "dt2": 1424, "dtm": [42, 356, 473, 502, 994, 1095, 1128, 1424], "dtm_iso": 502, "dtm_iso_strict": 502, "dtype": [12, 42, 56, 57, 61, 67, 73, 77, 89, 98, 99, 109, 132, 134, 136, 138, 139, 151, 152, 153, 154, 156, 160, 161, 162, 166, 170, 179, 180, 181, 182, 186, 208, 210, 215, 218, 230, 244, 259, 288, 312, 313, 314, 315, 318, 324, 333, 356, 369, 374, 429, 443, 444, 445, 446, 447, 448, 459, 460, 502, 513, 522, 535, 571, 580, 611, 621, 660, 667, 668, 675, 701, 703, 729, 750, 755, 767, 771, 777, 787, 794, 801, 802, 813, 815, 817, 821, 822, 824, 825, 826, 827, 839, 841, 842, 850, 859, 868, 887, 892, 909, 914, 929, 936, 961, 988, 993, 994, 996, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1046, 1060, 1061, 1062, 1064, 1065, 1066, 1072, 1082, 1083, 1086, 1087, 1128, 1139, 1146, 1179, 1197, 1198, 1201, 1210, 1234, 1241, 1243, 1262, 1270, 1274, 1305, 1308, 1333, 1354, 1359, 1371, 1378, 1379, 1381, 1382, 1383, 1384, 1389, 1401, 1429, 1432], "dtype_format": [42, 356], "dtype_of": 374, "dtypekind": 210, "dtypelik": [208, 996], "dtypeoper": [1, 61], "dubiou": 102, "duckdb": 139, "due": [244, 259, 288, 291, 326, 356, 381, 478, 492, 497, 510, 638, 675, 679, 681, 683, 685, 687, 690, 692, 694, 792, 806, 807, 809, 810, 855, 856, 868, 887, 909, 914, 936, 988, 1100, 1118, 1123, 1136, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "dummi": [311, 356, 613, 614, 828, 829, 868, 1376, 1401], "dump": 147, "duplic": [58, 107, 146, 251, 258, 259, 260, 321, 325, 356, 381, 551, 638, 662, 858, 868, 913, 914, 915, 951, 954, 988, 1178, 1264, 1401, 1430], "duplicateerror": [662, 868, 1264, 1401], "dur": [260, 356, 915, 988], "durat": [206, 259, 326, 356, 470, 478, 502, 503, 504, 505, 506, 507, 508, 509, 513, 519, 771, 806, 807, 809, 810, 855, 856, 868, 914, 988, 993, 994, 1092, 1100, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1139, 1148, 1381, 1383, 1401], "dure": [49, 50, 51, 52, 57, 64, 65, 106, 131, 146, 151, 152, 166, 171, 206, 232, 356, 701, 868, 881, 890, 891, 901, 929, 930, 962, 988, 1153, 1401], "dutch": [469, 481, 792, 1091, 1103], "dynam": [148, 244, 356, 421, 605, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 868, 909, 929, 988, 992, 1038, 1235, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "dynamicgroupbi": [244, 356], "e": [12, 35, 37, 39, 41, 44, 45, 48, 49, 147, 151, 157, 159, 163, 165, 169, 171, 172, 184, 223, 235, 242, 246, 255, 259, 262, 307, 308, 314, 324, 356, 379, 464, 515, 519, 522, 549, 550, 608, 614, 619, 620, 621, 622, 623, 625, 626, 627, 629, 630, 631, 701, 706, 725, 746, 747, 758, 813, 829, 847, 858, 868, 896, 905, 914, 917, 934, 988, 992, 993, 994, 1142, 1148, 1176, 1311, 1329, 1362, 1401, 1419, 1424, 1432], "e101": [42, 356], "e_filt": [625, 627], "e_sum_ov": [625, 627], "e_sum_slic": [625, 627], "each": [39, 42, 49, 53, 54, 55, 58, 67, 74, 85, 152, 153, 156, 161, 170, 175, 176, 177, 178, 180, 219, 221, 228, 235, 242, 243, 244, 257, 259, 264, 278, 280, 284, 288, 290, 292, 313, 318, 322, 325, 326, 334, 335, 337, 339, 341, 342, 350, 356, 395, 409, 442, 446, 447, 462, 481, 497, 510, 528, 553, 556, 578, 583, 586, 593, 603, 610, 614, 662, 665, 673, 674, 682, 686, 697, 702, 709, 722, 726, 727, 731, 732, 740, 742, 743, 751, 758, 773, 787, 790, 796, 821, 822, 826, 850, 858, 868, 890, 893, 894, 900, 905, 909, 914, 930, 933, 936, 952, 954, 964, 966, 968, 970, 971, 979, 988, 1013, 1027, 1064, 1065, 1071, 1085, 1103, 1123, 1136, 1181, 1184, 1208, 1213, 1216, 1223, 1233, 1264, 1266, 1275, 1276, 1298, 1307, 1326, 1330, 1331, 1335, 1336, 1344, 1346, 1347, 1355, 1362, 1370, 1401, 1418, 1424, 1429, 1430, 1432], "eager": [97, 244, 259, 263, 280, 324, 356, 471, 474, 477, 479, 489, 490, 492, 493, 496, 497, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 679, 681, 683, 685, 687, 690, 692, 694, 787, 791, 793, 797, 799, 806, 807, 809, 810, 817, 821, 822, 825, 826, 839, 842, 846, 847, 850, 855, 856, 859, 867, 868, 909, 914, 919, 988, 993, 1092, 1093, 1096, 1099, 1100, 1101, 1102, 1108, 1109, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1429], "eager_execut": 1429, "eagerli": 1410, "ear": [740, 751, 1344], "earlier": [259, 356, 914, 988], "earliest": [244, 356, 495, 496, 750, 753, 808, 909, 980, 988, 1121, 1122, 1354, 1357], "easi": 206, "easiest": 211, "easili": [58, 294, 318, 330, 335, 356, 850, 864, 938, 957, 964, 988], "east": [76, 171, 260, 356, 915, 988], "ebf1d": [42, 356], "ed": [260, 356, 915, 988], "edg": [543, 868, 1171, 1401], "eee": [1, 42, 356, 994], "ef": 737, "effect": [42, 49, 50, 51, 52, 56, 237, 244, 356, 478, 532, 614, 640, 642, 644, 797, 868, 909, 960, 961, 988, 1092, 1100], "effici": [133, 153, 255, 257, 356, 883], "efgh": 1424, "eg": [19, 27, 28, 42, 66, 154, 206, 313, 356, 750, 753, 774, 868, 994, 1354, 1357], "egnaro": 1424, "either": [64, 65, 89, 148, 182, 254, 258, 259, 260, 278, 288, 289, 313, 314, 356, 519, 613, 660, 662, 675, 698, 750, 782, 790, 794, 850, 868, 890, 891, 913, 914, 915, 917, 936, 988, 992, 994, 1148, 1262, 1264, 1300, 1354, 1401, 1414, 1432], "element": [15, 16, 27, 177, 178, 181, 182, 184, 186, 211, 212, 214, 221, 254, 280, 289, 302, 304, 319, 327, 356, 387, 388, 389, 390, 391, 392, 403, 404, 409, 441, 442, 449, 452, 453, 454, 455, 457, 458, 459, 460, 461, 467, 468, 523, 524, 528, 541, 545, 554, 565, 567, 568, 573, 575, 576, 577, 578, 581, 586, 594, 595, 596, 597, 601, 602, 607, 609, 610, 614, 655, 656, 665, 668, 676, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 698, 703, 704, 705, 709, 710, 711, 742, 743, 769, 770, 772, 773, 779, 790, 799, 825, 843, 844, 849, 857, 868, 885, 894, 945, 947, 950, 955, 988, 1005, 1006, 1007, 1008, 1009, 1010, 1016, 1017, 1021, 1022, 1027, 1036, 1058, 1059, 1069, 1072, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1089, 1090, 1151, 1152, 1157, 1158, 1170, 1173, 1182, 1191, 1193, 1195, 1196, 1197, 1198, 1203, 1205, 1206, 1207, 1208, 1211, 1216, 1224, 1225, 1226, 1227, 1232, 1239, 1240, 1243, 1259, 1266, 1270, 1277, 1278, 1279, 1281, 1283, 1285, 1287, 1289, 1290, 1292, 1294, 1300, 1308, 1309, 1310, 1314, 1315, 1346, 1347, 1358, 1372, 1373, 1374, 1378, 1385, 1386, 1387, 1391, 1401, 1418, 1419], "elementwis": [613, 655, 677, 678, 680, 682, 684, 686, 689, 691, 693, 828, 829, 868, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1401], "elig": [919, 988], "elimin": [64, 131, 562, 868, 1192, 1401], "elis": [272, 356, 925, 988], "ellips": 22, "ellipsi": [242, 356], "elppa": 1424, "els": [152, 1263, 1371, 1401], "email": [722, 1326], "email_part": [722, 1326], "emit": [929, 988], "emphas": [356, 360], "emploi": 994, "employe": 154, "empti": [15, 37, 39, 49, 111, 135, 151, 152, 156, 162, 164, 166, 216, 217, 244, 271, 323, 356, 374, 661, 712, 720, 767, 827, 846, 851, 868, 888, 889, 909, 924, 953, 988, 993, 994, 1072, 1074, 1158, 1179, 1193, 1263, 1316, 1324, 1371, 1401], "en": [22, 42, 356], "enabl": [30, 31, 48, 52, 57, 64, 65, 98, 99, 137, 155, 163, 167, 169, 175, 176, 177, 178, 190, 208, 315, 356, 382, 384, 669, 670, 699, 714, 724, 726, 738, 778, 864, 868, 890, 891, 901, 930, 943, 988, 996, 1001, 1002, 1271, 1272, 1302, 1318, 1328, 1330, 1342, 1382, 1390, 1401], "enable_string_cach": 98, "encapsul": [39, 49, 356, 988], "enclos": [534, 868], "encod": [70, 76, 88, 147, 151, 152, 166, 311, 356, 359, 426, 534, 673, 716, 762, 868, 1043, 1275, 1320, 1376, 1401, 1406], "encompass": [543, 868, 1171, 1401], "encount": [56, 122, 151, 152, 166, 171, 244, 356, 647, 648, 729, 730, 797, 801, 815, 868, 909, 988, 1252, 1253, 1333, 1334, 1401], "end": [39, 42, 49, 151, 152, 166, 244, 250, 280, 356, 425, 428, 431, 444, 448, 470, 497, 522, 547, 548, 599, 713, 718, 722, 727, 734, 740, 744, 745, 746, 749, 787, 792, 805, 806, 807, 808, 809, 810, 813, 821, 822, 825, 826, 855, 856, 858, 864, 868, 909, 912, 930, 988, 994, 1045, 1061, 1066, 1092, 1123, 1174, 1175, 1189, 1229, 1322, 1326, 1331, 1338, 1344, 1348, 1349, 1350, 1355, 1401, 1424], "endian": [429, 1046], "endpoint": [191, 462, 662, 825, 868, 1085, 1264, 1401], "ends_a": 1424, "ends_in_digit": 1424, "ends_with": [425, 431, 448, 713, 744, 994, 1066, 1348, 1422], "ends_with_expr": 428, "ends_with_lit": 428, "engin": [11, 16, 40, 49, 50, 51, 52, 64, 65, 97, 146, 153, 154, 156, 162, 188, 243, 258, 264, 314, 321, 342, 356, 847, 890, 891, 901, 908, 913, 919, 924, 930, 943, 951, 963, 971, 985, 988, 992, 1243, 1381, 1401, 1413, 1429], "engine_opt": [40, 156, 356], "enginetyp": [49, 50, 51, 52, 64, 65, 890, 891, 901, 930, 943, 988], "enough": [576, 706, 868, 1206, 1311, 1401], "ensur": [12, 42, 53, 55, 97, 137, 148, 154, 181, 184, 208, 235, 243, 265, 278, 280, 284, 289, 314, 356, 549, 729, 868, 905, 908, 919, 920, 933, 963, 988, 994, 996, 1381, 1401], "enter": 206, "entir": [42, 153, 156, 162, 356], "entri": [206, 356, 988, 993, 1429], "entropi": [868, 1401], "enum": [374, 994], "enumer": [76, 137, 151, 152, 156, 162, 166, 257, 356], "env": [4, 187], "env_onli": 32, "environ": [4, 32, 39, 44, 48, 49, 50, 51, 52, 64, 65, 148, 161, 163, 164, 166, 169, 170, 171, 185, 188, 191, 196, 313, 356, 890, 891, 901, 930, 943, 988], "eol_char": [151, 152, 166], "eparg": 1424, "epoch": [72, 73, 510, 817, 1136, 1425], "epoch_": [479, 1101], "epoch_n": [479, 1101], "epochtimeunit": [479, 817, 1101], "eq": [235, 284, 356, 517, 528, 868, 905, 933, 988, 1144, 1401], "eq_miss": [868, 1255, 1401], "equal": [57, 99, 151, 152, 166, 175, 176, 177, 178, 244, 259, 260, 272, 302, 356, 462, 510, 516, 517, 537, 550, 564, 613, 650, 662, 668, 676, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 709, 734, 735, 738, 760, 790, 825, 828, 829, 843, 844, 858, 864, 868, 905, 909, 914, 915, 925, 933, 945, 988, 1085, 1123, 1144, 1177, 1235, 1255, 1264, 1270, 1277, 1278, 1279, 1281, 1283, 1285, 1287, 1289, 1290, 1292, 1294, 1338, 1339, 1342, 1364, 1401, 1418, 1421, 1432], "equiprob": [222, 282, 348, 356, 663, 686, 687, 840, 868, 895, 931, 977, 988, 1086, 1265, 1287, 1288, 1401], "equival": [42, 66, 132, 134, 135, 136, 138, 160, 161, 170, 244, 254, 276, 356, 379, 383, 447, 516, 517, 519, 532, 537, 539, 564, 612, 634, 636, 649, 650, 651, 654, 660, 732, 756, 758, 759, 766, 774, 781, 868, 909, 988, 1065, 1143, 1144, 1148, 1164, 1166, 1191, 1194, 1242, 1254, 1255, 1336, 1360, 1362, 1363, 1401, 1411, 1419, 1431], "err": 723, "error": [16, 41, 56, 65, 66, 97, 117, 121, 123, 134, 135, 138, 146, 151, 152, 156, 163, 166, 171, 259, 265, 280, 289, 314, 356, 381, 406, 407, 426, 469, 580, 582, 584, 638, 670, 713, 716, 721, 723, 725, 729, 730, 750, 752, 753, 757, 868, 887, 891, 914, 920, 963, 971, 988, 1024, 1025, 1043, 1091, 1210, 1212, 1214, 1272, 1317, 1320, 1325, 1327, 1329, 1333, 1334, 1354, 1356, 1357, 1361, 1381, 1401, 1427], "escap": [100, 151, 152, 154, 166, 719, 736, 737, 1323, 1340, 1341], "esp": 16, "especi": [180, 674, 868, 988, 1276, 1401], "espresso": 994, "est": 809, "establish": [153, 206], "estim": [151, 152, 213, 230, 356, 386, 520, 521, 562, 786, 868, 884, 988, 1004, 1146, 1149, 1150, 1192, 1401], "estimated_s": [356, 1401], "etc": [23, 41, 42, 148, 151, 155, 156, 157, 159, 167, 168, 356, 868, 994, 1299, 1301, 1401, 1425], "ethan": 368, "eu": [167, 168], "eur": [242, 356, 1432], "europ": [474, 478, 496, 1096, 1100, 1122], "eval": [172, 312, 356, 614, 812, 868, 1243, 1378, 1401], "evalu": [49, 50, 51, 52, 171, 172, 233, 235, 259, 284, 356, 368, 383, 396, 398, 399, 433, 434, 435, 436, 438, 439, 461, 528, 546, 567, 568, 578, 605, 654, 655, 782, 784, 787, 791, 793, 797, 799, 806, 807, 809, 810, 812, 821, 822, 825, 826, 839, 842, 846, 850, 855, 856, 858, 859, 868, 890, 905, 911, 913, 914, 933, 988, 1014, 1016, 1017, 1050, 1051, 1052, 1053, 1055, 1056, 1084, 1157, 1197, 1198, 1208, 1392, 1401, 1421], "even": [39, 49, 151, 258, 356, 519, 578, 659, 662, 695, 812, 868, 913, 988, 994, 1148, 1264, 1296, 1401], "evenli": [244, 356, 825, 826, 909, 988], "event": [65, 891, 988], "eventu": [40, 356], "ever": [655, 868], "everi": [16, 39, 49, 151, 152, 156, 162, 166, 238, 244, 310, 326, 356, 398, 399, 400, 401, 404, 406, 414, 457, 458, 459, 460, 461, 497, 510, 524, 536, 569, 570, 574, 577, 581, 582, 583, 591, 594, 599, 603, 674, 720, 801, 802, 868, 907, 909, 988, 1016, 1017, 1018, 1019, 1022, 1024, 1031, 1080, 1081, 1082, 1083, 1084, 1123, 1136, 1152, 1163, 1199, 1200, 1204, 1207, 1211, 1212, 1213, 1221, 1224, 1229, 1233, 1276, 1324, 1401], "everybodi": [714, 738, 1318, 1342], "everyth": 994, "evolv": [265, 356, 920, 988], "ew": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "ewm_mean": [868, 1401], "ewm_mean_bi": [868, 1401], "ewm_std": [868, 1401], "ewm_var": [868, 1401], "ewma": [519, 868, 1148, 1401], "exact": [177, 180, 182, 186, 259, 300, 356, 386, 532, 720, 748, 749, 750, 752, 753, 774, 868, 914, 988, 1324, 1354, 1356, 1357], "exactli": [134, 135, 138, 175, 176, 177, 178, 181, 182, 186, 265, 356, 742, 743, 748, 749, 811, 920, 988, 1306, 1346, 1347, 1352, 1353, 1401], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 99, 103, 106, 107, 108, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 148, 151, 152, 153, 154, 155, 156, 160, 161, 162, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 363, 364, 367, 368, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 868, 880, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 988, 993, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1165, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1401, 1406, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1421, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431], "exc_tb": 1429, "exc_typ": 1429, "exc_val": 1429, "exce": [242, 356], "excel": [38, 42, 150, 156, 356, 880], "excelspreadsheetengin": 156, "except": [0, 224, 239, 244, 246, 259, 262, 263, 265, 285, 307, 356, 670, 727, 751, 813, 868, 880, 897, 909, 914, 920, 929, 934, 988, 994, 1060, 1170, 1196, 1272, 1331, 1355, 1372, 1381, 1401, 1428], "exclud": [182, 186, 244, 356, 442, 457, 460, 469, 481, 549, 621, 773, 792, 864, 868, 909, 988, 994, 1091, 1103, 1176, 1401], "excluded_dtyp": [182, 183, 186], "exclus": [289, 356, 781, 787, 821, 822, 868], "execut": [11, 41, 49, 50, 51, 52, 57, 64, 65, 66, 97, 148, 153, 154, 261, 303, 356, 464, 576, 701, 778, 847, 858, 868, 886, 890, 891, 896, 901, 919, 929, 930, 932, 943, 946, 963, 988, 1206, 1390, 1401, 1411, 1412, 1413, 1415, 1429, 1431], "execute_glob": 1429, "execute_opt": [153, 154], "execution_opt": 153, "exist": [1, 40, 41, 42, 43, 58, 76, 107, 155, 163, 167, 171, 182, 224, 239, 280, 285, 320, 325, 330, 331, 356, 374, 381, 425, 428, 431, 473, 496, 736, 737, 795, 868, 893, 897, 900, 934, 937, 954, 956, 957, 958, 988, 994, 1095, 1122, 1340, 1341, 1431], "existing_t": 1431, "existing_table_path": [41, 356], "exit": [57, 98, 206, 1416, 1429], "exp": [518, 519, 520, 521, 868, 1147, 1148, 1149, 1150, 1401, 1422], "exp_a": 1423, "expand": [148, 151, 163, 166, 171, 524, 619, 623, 668, 764, 868, 994, 1152, 1270, 1401], "expand_selector": 994, "expans": 761, "expect": [10, 39, 41, 44, 48, 49, 50, 51, 52, 55, 74, 80, 112, 120, 128, 151, 153, 155, 161, 163, 164, 166, 167, 169, 170, 171, 176, 178, 196, 212, 356, 827, 917, 919, 988], "expens": [151, 152, 161, 163, 166, 170, 171, 185, 187, 256, 264, 289, 290, 291, 320, 321, 356, 614, 868, 893, 895, 900, 937, 951, 956, 988, 1153, 1243, 1401, 1432], "experiment": [48, 52, 164, 260, 318, 356, 825, 826, 915, 988], "expiri": [10, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 196, 356, 988], "explain": [131, 211, 261, 356, 890, 988, 1428], "explainformat": [901, 988], "explicit": [42, 106, 153, 166, 180, 303, 325, 356, 502, 841, 946, 954, 988, 1128], "explicitli": [76, 106, 153, 154, 180, 182, 206, 239, 258, 356, 669, 850, 868, 879, 913, 988, 1429], "explod": [148, 356, 442, 530, 614, 655, 671, 773, 868, 988, 1273, 1401, 1419], "explor": [222, 356, 895, 988], "expon": [660, 868, 1262, 1401, 1423], "exponenti": [518, 519, 520, 521, 523, 660, 868, 1147, 1148, 1149, 1150, 1151, 1401, 1423], "export": [42, 44, 45, 50, 209, 256, 257, 290, 291, 308, 310, 313, 356, 864, 988, 993, 994, 997, 1375, 1401], "expos": 880, "expr": [1, 53, 54, 55, 58, 59, 60, 61, 62, 146, 148, 233, 234, 249, 258, 259, 260, 263, 265, 276, 280, 289, 294, 295, 313, 318, 330, 331, 356, 363, 364, 367, 368, 374, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 868, 869, 870, 873, 874, 875, 876, 877, 903, 904, 913, 914, 915, 920, 931, 938, 939, 957, 958, 988, 994, 1084, 1143, 1144, 1148, 1155, 1156, 1162, 1164, 1166, 1194, 1206, 1208, 1213, 1229, 1233, 1242, 1254, 1255, 1270, 1317, 1322, 1329, 1348, 1401, 1427], "expr1": [1421, 1429], "expr2": [1421, 1429], "expr_unique_subset": [276, 356], "express": [0, 8, 53, 54, 55, 64, 146, 148, 179, 182, 186, 214, 231, 233, 235, 243, 249, 258, 259, 260, 263, 264, 265, 276, 280, 284, 289, 294, 295, 299, 302, 313, 318, 319, 330, 331, 333, 335, 342, 356, 368, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 400, 401, 402, 403, 404, 407, 420, 425, 426, 427, 428, 429, 430, 431, 442, 444, 446, 447, 448, 451, 452, 453, 454, 455, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 519, 522, 524, 525, 527, 528, 532, 534, 535, 537, 538, 539, 540, 546, 549, 550, 551, 552, 553, 554, 555, 556, 564, 565, 569, 570, 572, 573, 576, 577, 578, 584, 586, 604, 605, 611, 612, 613, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 632, 634, 636, 638, 639, 641, 643, 649, 650, 652, 654, 655, 659, 660, 661, 662, 664, 668, 669, 670, 671, 673, 674, 697, 698, 699, 702, 704, 705, 707, 709, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 734, 736, 737, 738, 740, 741, 742, 743, 751, 755, 765, 766, 769, 770, 773, 774, 775, 777, 778, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 836, 839, 841, 842, 843, 844, 846, 848, 850, 852, 854, 855, 856, 858, 859, 864, 867, 880, 885, 890, 901, 902, 905, 908, 913, 914, 915, 920, 930, 933, 938, 939, 942, 943, 945, 950, 957, 958, 959, 961, 964, 971, 988, 994, 1021, 1059, 1073, 1084, 1091, 1095, 1128, 1143, 1144, 1148, 1154, 1164, 1166, 1176, 1194, 1203, 1206, 1208, 1242, 1243, 1254, 1255, 1270, 1271, 1272, 1300, 1304, 1317, 1318, 1319, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1340, 1341, 1342, 1355, 1359, 1386, 1401, 1419, 1421, 1423, 1424, 1428], "exprmetanamespac": [618, 624], "ext": [53, 54, 55, 153], "extend": [0, 135, 328, 356, 525, 868, 880, 992, 1003, 1154, 1401], "extend_const": [868, 1401], "extens": [315, 356, 1382, 1401], "extern": [203, 959, 988], "external_shallow_clon": 203, "extra": [41, 56, 148, 151, 152, 155, 157, 159, 163, 166, 167, 168, 171, 232, 244, 265, 356, 868, 909, 920, 988, 1153, 1401], "extra_column": [171, 265, 356, 920, 988], "extra_struct_field": [56, 265, 356, 920, 988], "extract": [139, 211, 303, 356, 472, 475, 477, 480, 483, 484, 485, 486, 487, 488, 491, 493, 494, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 514, 659, 722, 723, 724, 729, 730, 740, 742, 868, 1094, 1097, 1098, 1099, 1102, 1105, 1109, 1110, 1111, 1113, 1114, 1117, 1119, 1120, 1124, 1126, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1140, 1326, 1327, 1328, 1333, 1334, 1344, 1422], "extract_mani": 1330, "extract_numb": [659, 868], "extracted_nr": 722, "extrem": [525, 677, 868, 1154, 1278, 1401], "extrema": [701, 868, 1305, 1401], "f": [53, 59, 152, 153, 235, 242, 257, 308, 314, 320, 324, 356, 379, 421, 430, 605, 701, 720, 750, 753, 795, 868, 905, 988, 994, 1038, 1235, 1324, 1354, 1357, 1401, 1406, 1419], "f32": [1, 61, 215, 303, 312, 318, 356, 701, 847, 868, 887, 929, 946, 988, 994, 1241, 1401, 1427], "f4": [314, 356], "f5ed2452": [42, 356], "f64": [7, 9, 12, 13, 17, 20, 21, 23, 24, 25, 26, 27, 29, 58, 60, 62, 66, 85, 97, 133, 135, 160, 172, 179, 182, 215, 216, 217, 220, 222, 223, 224, 226, 228, 233, 234, 237, 241, 242, 243, 244, 249, 250, 258, 259, 265, 267, 268, 269, 270, 274, 280, 281, 282, 301, 302, 304, 306, 318, 327, 330, 335, 338, 340, 343, 344, 345, 346, 348, 349, 356, 374, 378, 381, 387, 388, 389, 390, 391, 392, 411, 412, 418, 423, 430, 443, 449, 450, 452, 453, 454, 462, 463, 467, 468, 498, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 531, 532, 537, 539, 547, 548, 550, 557, 558, 559, 560, 562, 564, 576, 588, 589, 601, 607, 608, 609, 610, 612, 615, 616, 617, 633, 636, 638, 647, 648, 649, 650, 656, 660, 662, 663, 664, 665, 669, 670, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 703, 704, 705, 706, 710, 711, 765, 769, 770, 774, 778, 779, 788, 789, 793, 795, 797, 799, 812, 813, 825, 826, 829, 832, 833, 834, 847, 849, 857, 864, 868, 887, 888, 895, 897, 898, 903, 904, 908, 909, 912, 913, 914, 920, 922, 923, 929, 931, 945, 947, 955, 957, 959, 964, 967, 969, 972, 973, 974, 975, 977, 978, 988, 994, 1005, 1006, 1007, 1008, 1009, 1010, 1029, 1035, 1040, 1047, 1069, 1070, 1075, 1076, 1077, 1085, 1086, 1089, 1090, 1124, 1147, 1148, 1149, 1150, 1151, 1155, 1160, 1171, 1174, 1175, 1206, 1218, 1219, 1231, 1237, 1238, 1239, 1240, 1259, 1262, 1264, 1266, 1272, 1277, 1278, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1290, 1291, 1294, 1295, 1296, 1297, 1308, 1309, 1310, 1314, 1373, 1374, 1389, 1390, 1401, 1410, 1418, 1419, 1423, 1426, 1429, 1432], "f64_awai": [695, 868], "f64_to_even": [695, 868], "f_string": 816, "fa1e": [755, 1359], "face": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 196, 356, 988], "facil": 153, "facilit": [218, 356], "factor": [518, 520, 521, 771, 868, 1147, 1149, 1150, 1383, 1401], "fail": [39, 40, 41, 44, 48, 49, 50, 51, 52, 133, 155, 157, 161, 163, 164, 166, 167, 169, 170, 171, 196, 210, 314, 321, 356, 396, 500, 750, 752, 753, 757, 868, 951, 988, 1243, 1354, 1356, 1357, 1361, 1381, 1401, 1427], "fall": [171, 462, 662, 868, 890, 901, 930, 943, 963, 988, 1085, 1264, 1401, 1418], "fallback": [133, 156], "fals": [5, 7, 8, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 39, 41, 42, 48, 49, 50, 51, 52, 53, 56, 58, 64, 65, 66, 133, 134, 135, 137, 138, 139, 146, 148, 151, 152, 153, 155, 156, 157, 159, 161, 162, 163, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 210, 214, 215, 216, 217, 222, 229, 235, 237, 241, 242, 243, 244, 248, 251, 252, 253, 256, 258, 259, 261, 263, 268, 269, 275, 276, 278, 280, 281, 284, 289, 290, 291, 292, 297, 300, 302, 303, 306, 309, 311, 314, 315, 319, 320, 321, 325, 326, 328, 330, 338, 340, 343, 344, 346, 349, 356, 374, 382, 383, 384, 395, 398, 399, 402, 406, 407, 417, 422, 425, 428, 431, 442, 443, 444, 448, 456, 457, 458, 459, 460, 462, 469, 481, 482, 498, 515, 516, 517, 518, 520, 521, 539, 540, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 572, 576, 580, 582, 584, 593, 600, 606, 612, 613, 614, 618, 620, 621, 622, 624, 626, 629, 630, 649, 650, 652, 654, 655, 657, 658, 662, 665, 676, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 697, 698, 699, 701, 706, 708, 709, 712, 713, 714, 715, 718, 724, 725, 726, 728, 729, 736, 737, 738, 741, 742, 744, 750, 752, 753, 755, 773, 775, 778, 781, 782, 783, 784, 785, 787, 790, 791, 792, 793, 796, 797, 799, 800, 801, 802, 806, 807, 809, 810, 815, 821, 822, 825, 826, 827, 828, 829, 833, 839, 841, 842, 846, 847, 850, 852, 855, 856, 858, 859, 868, 885, 887, 888, 889, 890, 891, 895, 901, 905, 908, 909, 913, 914, 917, 919, 930, 933, 941, 943, 945, 946, 950, 951, 954, 957, 963, 967, 969, 972, 973, 975, 978, 988, 993, 994, 1001, 1002, 1013, 1016, 1017, 1020, 1024, 1025, 1034, 1039, 1042, 1043, 1045, 1048, 1059, 1060, 1061, 1063, 1066, 1071, 1072, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1091, 1103, 1104, 1124, 1144, 1145, 1147, 1149, 1150, 1157, 1159, 1165, 1167, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1197, 1198, 1202, 1206, 1210, 1212, 1214, 1223, 1230, 1236, 1249, 1255, 1257, 1260, 1261, 1264, 1266, 1267, 1268, 1277, 1278, 1279, 1281, 1283, 1285, 1287, 1289, 1290, 1292, 1294, 1298, 1300, 1302, 1306, 1311, 1313, 1316, 1317, 1318, 1319, 1322, 1328, 1329, 1330, 1332, 1333, 1340, 1341, 1342, 1345, 1346, 1348, 1354, 1356, 1357, 1359, 1376, 1381, 1382, 1386, 1387, 1390, 1392, 1401, 1411, 1413, 1419, 1424, 1429], "far": [42, 356], "fashion": [258, 356], "fast": [48, 50, 52, 148, 185, 187, 356, 525, 699, 868, 988, 992, 1154, 1302, 1401, 1432], "fast_executemani": [40, 356], "fast_project": 962, "faster": [49, 50, 51, 52, 64, 153, 156, 232, 314, 324, 356, 614, 776, 868, 890, 901, 930, 943, 988, 1153, 1243, 1401], "fastexcel": [156, 174], "favor": [40, 171, 356], "fay": 147, "feat1": [313, 318, 356], "feat2": [313, 318, 356], "feather": [44, 157, 169, 356, 880], "featur": [1, 48, 63, 74, 80, 168, 313, 318, 356], "feature_0": [959, 988], "feature_0_train": [959, 988], "feature_1": [959, 988], "feature_nam": [318, 356], "feb": [174, 1424], "februari": 1424, "fed": 746, "feel": [714, 738, 1318, 1342], "fetch": [141, 890, 988], "fetch_california_h": [318, 356], "few": [242, 263, 356], "fewer": [727, 751, 988, 1331, 1355], "ff": 1418, "ff00": [755, 1359], "fff": 1, "ffff00": [426, 427, 716, 1043, 1044, 1320], "ffffff": [42, 356], "ffi": [230, 356, 1146, 1401], "fgg": 994, "fghi": 1424, "fh": 152, "fiction": 1410, "field": [38, 39, 41, 49, 52, 56, 89, 124, 127, 135, 142, 265, 322, 356, 366, 367, 374, 421, 605, 613, 614, 640, 642, 644, 673, 722, 723, 729, 742, 743, 763, 764, 765, 771, 778, 801, 802, 828, 850, 858, 868, 920, 952, 988, 993, 1038, 1235, 1243, 1275, 1327, 1346, 1347, 1368, 1370, 1383, 1401, 1425], "field_0": [421, 605, 1038, 1235], "field_1": [421, 605, 1038, 1235], "field_2": [1038, 1235], "field_id": 142, "field_n": [421, 605, 1038, 1235], "field_nam": [366, 614, 868, 1243, 1401], "field_overwrit": [52, 142, 988], "fiftyf": [545, 868], "figsiz": [629, 930, 943, 988], "figur": [629, 696, 868, 943, 988, 1297, 1401], "file": [2, 3, 5, 6, 34, 37, 38, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 223, 232, 296, 356, 464, 534, 628, 632, 868, 896, 940, 988, 992, 1153, 1401], "file_cache_ttl": [161, 166, 169, 170], "file_idx": [54, 143, 145], "file_path": [53, 54, 55, 143, 145], "filenam": 157, "filesourc": [156, 162, 163, 171], "filesystem": [41, 155, 167, 168, 356], "fill": [58, 66, 216, 233, 234, 299, 324, 356, 360, 424, 457, 460, 526, 527, 533, 547, 548, 678, 680, 682, 684, 686, 689, 691, 693, 700, 816, 839, 842, 859, 868, 903, 904, 942, 959, 988, 1041, 1155, 1156, 1161, 1175, 1256, 1279, 1281, 1285, 1290, 1292, 1294, 1304, 1401], "fill_char": [734, 735, 1338, 1339], "fill_nan": [234, 356, 527, 868, 904, 988, 1156, 1401], "fill_nul": [58, 233, 326, 356, 424, 457, 460, 526, 533, 700, 868, 903, 959, 988, 1041, 1155, 1161, 1401], "fill_valu": [299, 324, 356, 700, 868, 942, 988, 1304, 1401], "fillnullstrategi": [234, 356, 527, 868, 904, 988, 1156, 1401], "film": 1410, "filter": [1, 59, 64, 97, 146, 166, 167, 171, 172, 226, 227, 251, 252, 253, 280, 284, 342, 356, 444, 448, 625, 627, 718, 744, 780, 805, 808, 812, 815, 846, 847, 858, 868, 883, 890, 898, 899, 901, 911, 930, 933, 943, 946, 971, 988, 994, 1301, 1401, 1417], "final": [15, 42, 58, 148, 171, 259, 261, 356, 518, 520, 521, 868, 895, 914, 988, 1147, 1149, 1150, 1401, 1430], "find": [66, 240, 356, 545, 698, 713, 714, 726, 868, 1173, 1300, 1318, 1330, 1340, 1401], "find_pat": 725, "fine": [890, 901, 930, 943, 985, 988], "finish": [53, 54, 55, 232, 356, 1153, 1401], "finish_callback": [53, 54, 55], "finit": [552, 774, 797, 868, 1180, 1401], "first": [48, 58, 151, 152, 156, 157, 159, 162, 163, 166, 171, 175, 176, 177, 178, 211, 242, 244, 246, 258, 259, 262, 263, 264, 275, 279, 280, 288, 307, 311, 312, 320, 321, 326, 333, 339, 356, 374, 395, 397, 406, 461, 465, 490, 492, 497, 513, 532, 542, 545, 553, 566, 574, 576, 582, 583, 613, 626, 635, 659, 660, 675, 698, 709, 713, 720, 721, 725, 727, 729, 730, 736, 737, 751, 758, 793, 794, 801, 815, 819, 858, 864, 868, 909, 910, 913, 914, 918, 928, 929, 936, 951, 959, 961, 968, 988, 994, 1013, 1024, 1084, 1086, 1087, 1116, 1118, 1123, 1139, 1170, 1173, 1181, 1196, 1204, 1206, 1212, 1213, 1235, 1243, 1300, 1313, 1324, 1325, 1327, 1329, 1331, 1333, 1334, 1340, 1341, 1355, 1362, 1372, 1376, 1378, 1381, 1401, 1421, 1422, 1424, 1430, 1432], "first_column": [42, 356], "first_non_nul": [605, 1235], "first_part": [742, 743, 1346, 1347], "fisher": [562, 676, 706, 868, 1192, 1277, 1311, 1401], "fit": [147, 256, 300, 324, 356, 701, 842, 868, 1305, 1306, 1401], "five": [317, 356, 1432], "fix": [12, 67, 76, 180, 513, 811, 826, 1139], "flag": [63, 155, 167, 179, 297, 314, 356, 699, 713, 721, 722, 725, 736, 737, 868, 901, 919, 941, 988, 994, 1302, 1317, 1325, 1326, 1329, 1340, 1341, 1381, 1401, 1424], "flat": [147, 291, 356, 577, 671, 868, 1207, 1273, 1401], "flat_from_polar": 142, "flatten": 868, "flavour": [42, 153, 356], "flight": 153, "flight_sql": 153, "flightsql": 153, "float": [12, 13, 39, 42, 49, 56, 78, 79, 151, 152, 166, 172, 175, 176, 177, 178, 179, 182, 186, 210, 222, 226, 230, 233, 259, 265, 282, 292, 313, 314, 348, 356, 374, 450, 462, 467, 468, 498, 515, 516, 517, 518, 520, 521, 526, 531, 532, 537, 539, 547, 550, 552, 555, 557, 558, 559, 560, 564, 593, 608, 612, 615, 629, 633, 647, 648, 649, 650, 660, 662, 663, 677, 678, 680, 682, 684, 686, 687, 689, 691, 693, 695, 697, 703, 774, 840, 842, 868, 895, 898, 903, 914, 920, 931, 943, 977, 988, 994, 1060, 1070, 1085, 1086, 1088, 1089, 1090, 1124, 1142, 1146, 1147, 1149, 1150, 1155, 1160, 1171, 1177, 1192, 1223, 1238, 1252, 1253, 1262, 1263, 1264, 1265, 1278, 1279, 1281, 1283, 1285, 1287, 1288, 1290, 1292, 1294, 1296, 1298, 1301, 1308, 1311, 1315, 1371, 1381, 1391, 1401, 1429, 1432], "float16": [318, 356], "float32": [1, 12, 39, 49, 61, 215, 237, 265, 312, 313, 314, 318, 356, 519, 868, 887, 920, 929, 988, 994, 1148, 1179, 1241, 1379, 1381, 1384, 1401], "float4": [303, 356, 847, 946, 988, 1427], "float64": [12, 39, 42, 49, 97, 135, 151, 160, 179, 182, 218, 228, 230, 237, 265, 293, 318, 330, 356, 387, 388, 389, 390, 391, 392, 430, 443, 452, 453, 454, 463, 498, 519, 522, 557, 558, 664, 704, 705, 769, 770, 813, 829, 839, 842, 859, 864, 868, 892, 900, 920, 929, 937, 957, 988, 993, 994, 1124, 1148, 1382, 1389, 1401], "float_cast": [56, 265, 356, 920, 988], "float_list": 85, "float_precis": [9, 12, 29, 39, 42, 49, 356, 988], "float_scientif": [39, 49, 356, 988], "floatcastopt": 56, "floatfmt": 13, "floor": [60, 532, 868, 1401, 1422], "floor_a": 1423, "floordiv": [774, 868], "fmt": [13, 259, 356, 546, 816, 868, 911, 914, 988], "fmt_number": [356, 360], "fmt_str_length": [14, 806, 807, 809, 810], "fmt_table_cell_list_len": 15, "fmt_titl": [42, 356], "fn": [801, 802, 815, 841], "foggi": [736, 737, 1340, 1341], "fold": [356, 626, 793, 801, 802, 841, 858], "folder": 172, "follow": [42, 48, 63, 137, 146, 151, 152, 153, 155, 156, 162, 166, 167, 168, 244, 259, 263, 264, 279, 288, 314, 326, 356, 370, 371, 372, 373, 492, 497, 510, 519, 550, 659, 660, 665, 675, 679, 681, 683, 685, 687, 688, 690, 692, 694, 703, 763, 774, 789, 806, 807, 809, 810, 829, 855, 856, 858, 860, 861, 863, 868, 869, 870, 873, 875, 876, 877, 909, 914, 928, 936, 988, 994, 1118, 1123, 1136, 1148, 1177, 1262, 1266, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1299, 1301, 1308, 1381, 1393, 1395, 1397, 1401, 1402, 1407, 1408, 1409, 1427, 1432], "font": [42, 356], "font_color": [42, 356], "font_siz": [42, 356], "foo": [37, 39, 41, 44, 45, 46, 47, 48, 147, 160, 161, 215, 218, 219, 220, 224, 225, 226, 227, 228, 229, 232, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 252, 258, 262, 264, 266, 267, 268, 269, 270, 273, 274, 277, 280, 282, 284, 285, 286, 289, 292, 293, 294, 296, 298, 301, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 320, 321, 322, 327, 328, 329, 334, 356, 445, 462, 464, 492, 536, 542, 546, 566, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 662, 671, 712, 715, 717, 720, 722, 723, 728, 739, 741, 743, 745, 746, 747, 748, 749, 756, 759, 768, 786, 797, 798, 799, 814, 818, 819, 820, 823, 824, 830, 832, 834, 835, 837, 838, 840, 846, 849, 853, 857, 858, 864, 868, 887, 892, 893, 897, 898, 899, 900, 905, 911, 912, 913, 927, 933, 934, 937, 938, 951, 952, 956, 959, 988, 993, 994, 1062, 1085, 1118, 1214, 1262, 1264, 1273, 1319, 1321, 1324, 1326, 1327, 1343, 1347, 1352, 1353, 1360, 1363, 1401, 1415, 1417, 1418, 1419, 1421, 1424, 1427], "foo1": 1424, "foo11": [237, 356], "foo_": [623, 741, 816], "foo_1": [311, 356], "foo_2": [311, 356], "foo_3_4": 1424, "foo_a": [280, 356], "foo_a_bar_1": 816, "foo_at_1": 1419, "foo_b": [280, 356], "foo_b_bar_2": 816, "foo_bar": [618, 624, 741, 827, 1415], "foo_bar2": [618, 624], "foo_bar_baz": 741, "foo_c_bar_3": 816, "foo_low": [756, 1424], "foo_mean": 1419, "foo_q25": 1418, "foo_q50": 1418, "foo_q75": 1418, "foo_std": 1418, "foo_strip": 745, "foo_strip_end": 746, "foo_strip_start": 747, "foo_sum": [1418, 1419], "foo_uniqu": 1419, "foo_upp": [759, 1424], "foo_var": 1418, "foobar": [748, 749, 1352, 1353, 1424], "foobarbar": [749, 1353], "foofoobar": [748, 1352], "foral": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "forbid": [56, 265, 356, 920, 988], "forc": [151, 157, 161, 163, 259, 264, 314, 342, 356, 913, 914, 971, 988, 1243, 1381, 1401], "force_parallel": [259, 356, 913, 914, 988], "foreign": 203, "form": [39, 49, 132, 134, 135, 136, 138, 160, 161, 170, 212, 256, 290, 324, 356, 502, 656, 733, 758, 868, 883, 988, 1128, 1259, 1337, 1362, 1401, 1424], "format": [7, 13, 17, 18, 22, 38, 39, 42, 44, 45, 48, 49, 102, 133, 149, 151, 152, 153, 156, 157, 159, 162, 166, 172, 209, 223, 231, 242, 256, 271, 280, 290, 291, 296, 310, 323, 354, 356, 360, 374, 464, 497, 499, 502, 628, 629, 630, 750, 752, 753, 757, 811, 868, 896, 901, 902, 924, 940, 953, 988, 992, 997, 1125, 1128, 1354, 1356, 1357, 1361, 1400, 1424, 1425], "formul": [226, 356, 898, 899, 988], "formula": [42, 356, 515, 868, 1142, 1401], "fortran": [313, 314, 356], "forward": [234, 259, 299, 326, 356, 416, 457, 460, 469, 489, 527, 533, 598, 700, 868, 904, 914, 942, 988, 1033, 1091, 1115, 1156, 1161, 1228, 1304, 1401], "forward_fil": [424, 527, 868, 1041, 1156, 1401], "found": [22, 39, 42, 49, 103, 124, 127, 135, 139, 156, 163, 171, 228, 303, 356, 545, 698, 725, 730, 748, 749, 750, 753, 868, 946, 988, 1173, 1300, 1329, 1334, 1352, 1353, 1354, 1357, 1401, 1413, 1424, 1429], "four": [317, 356, 1429], "fourth": [562, 868, 1192, 1401], "frac": [518, 519, 520, 521, 706, 868, 1147, 1148, 1149, 1150, 1311, 1401], "fraction": [39, 49, 175, 176, 177, 178, 292, 356, 498, 593, 656, 697, 750, 753, 778, 868, 988, 1124, 1223, 1259, 1298, 1354, 1357, 1390, 1401], "fragment": 1429, "frame": [39, 40, 42, 49, 58, 65, 66, 135, 152, 156, 162, 175, 176, 215, 216, 222, 256, 257, 261, 264, 272, 276, 279, 289, 290, 291, 303, 318, 324, 325, 356, 502, 847, 887, 888, 895, 925, 928, 929, 946, 954, 988, 994, 1072, 1128, 1401, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1428, 1432], "frame_data": [1412, 1415], "frameinittyp": [356, 988], "frametyp": [58, 1429], "framework": [280, 323, 356, 953, 988], "freedom": [304, 327, 356, 601, 607, 689, 690, 693, 694, 711, 779, 799, 843, 844, 849, 857, 868, 947, 955, 988, 1290, 1291, 1294, 1295, 1315, 1391, 1401], "freeli": [265, 356, 847, 920, 946, 988, 994], "freez": [42, 356], "freeze_pan": [42, 356], "frequenc": [326, 356, 778, 868, 1390, 1401], "frequent": [1299, 1301, 1401], "fri": [356, 359], "fridai": [244, 356, 469, 481, 499, 792, 909, 988, 1091, 1103, 1125, 1128], "friendship": 14, "from": [2, 3, 4, 5, 6, 12, 18, 30, 34, 38, 39, 41, 42, 44, 48, 49, 50, 51, 52, 56, 58, 66, 76, 89, 97, 102, 106, 122, 126, 132, 133, 134, 135, 136, 137, 138, 139, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 191, 196, 211, 215, 222, 223, 224, 230, 232, 235, 236, 242, 244, 256, 257, 258, 259, 260, 261, 265, 271, 280, 284, 285, 288, 289, 291, 292, 294, 295, 303, 311, 318, 320, 321, 323, 324, 325, 326, 332, 356, 359, 360, 421, 430, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 519, 522, 532, 534, 547, 562, 581, 593, 605, 622, 647, 648, 650, 655, 656, 659, 662, 664, 675, 677, 679, 681, 683, 685, 687, 690, 692, 694, 695, 697, 709, 721, 722, 727, 729, 730, 740, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 776, 788, 789, 792, 793, 805, 806, 807, 808, 809, 810, 811, 825, 827, 842, 847, 854, 855, 856, 858, 864, 867, 868, 887, 895, 896, 897, 905, 909, 913, 914, 915, 920, 924, 933, 934, 936, 938, 939, 946, 951, 953, 954, 959, 960, 988, 992, 993, 994, 1038, 1047, 1085, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1146, 1148, 1153, 1192, 1211, 1223, 1235, 1252, 1253, 1255, 1256, 1259, 1264, 1278, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1298, 1325, 1326, 1331, 1333, 1344, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1361, 1376, 1392, 1401, 1410, 1411, 1412, 1413, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432], "from_arrai": 847, "from_arrow": 133, "from_json": 868, "from_panda": 133, "from_repr": [312, 356, 1378, 1401], "fromkei": [59, 61], "front": [244, 356, 909, 988], "fruit": [309, 356, 444, 448, 672, 718, 744, 751, 868, 1061, 1066, 1322, 1348, 1355], "fruits_revers": [672, 868], "fsspec": [151, 152, 157, 159, 167, 168, 174], "fsspecfileio": 168, "full": [13, 28, 48, 52, 58, 73, 102, 135, 138, 151, 152, 153, 155, 157, 160, 161, 163, 166, 167, 168, 170, 171, 172, 258, 325, 356, 727, 736, 737, 750, 751, 752, 753, 757, 806, 807, 913, 919, 954, 988, 992, 994, 1331, 1333, 1340, 1341, 1354, 1355, 1356, 1357, 1361, 1401, 1417, 1432], "full_path": [143, 145], "full_sent": 796, "fulli": [184, 279, 292, 314, 356, 543, 868, 1171, 1401], "funcnam": [42, 356], "function": [0, 10, 33, 34, 35, 36, 39, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 74, 80, 97, 98, 99, 129, 131, 133, 137, 139, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 202, 206, 208, 210, 214, 220, 223, 230, 237, 260, 263, 264, 265, 271, 279, 280, 285, 303, 313, 314, 315, 318, 319, 320, 323, 325, 342, 356, 359, 360, 368, 369, 374, 382, 421, 441, 442, 461, 462, 464, 469, 481, 518, 520, 521, 543, 605, 613, 614, 639, 640, 655, 659, 662, 674, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 694, 703, 706, 726, 754, 771, 772, 773, 782, 786, 792, 794, 798, 800, 801, 802, 814, 815, 817, 819, 820, 823, 825, 826, 828, 829, 832, 834, 837, 839, 841, 845, 849, 853, 857, 859, 864, 868, 880, 885, 890, 891, 896, 901, 915, 919, 920, 924, 928, 929, 930, 934, 946, 950, 953, 954, 961, 962, 971, 988, 992, 996, 1038, 1058, 1059, 1068, 1084, 1085, 1091, 1103, 1146, 1147, 1149, 1150, 1171, 1235, 1243, 1264, 1276, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1299, 1301, 1306, 1308, 1311, 1330, 1379, 1382, 1384, 1385, 1386, 1401, 1406, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1427, 1428, 1429, 1430, 1431, 1432], "function_nam": 148, "further": 864, "futur": [44, 45, 65, 210, 222, 258, 297, 308, 356, 891, 895, 913, 941, 988, 1375, 1401], "g": [35, 39, 49, 147, 151, 155, 157, 159, 165, 167, 172, 184, 210, 223, 255, 314, 324, 356, 379, 464, 519, 522, 614, 701, 813, 858, 868, 896, 934, 988, 992, 993, 1148, 1401, 1432], "g1": [528, 780, 868], "g2": [528, 780, 868], "g_1": [706, 868, 1311, 1401], "gag": 28, "gamma": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "gantt": [930, 988], "gather": [152, 238, 356, 395, 536, 581, 790, 868, 907, 988, 1013, 1163, 1211, 1401], "gather_everi": [356, 868, 988, 1401], "gb": [230, 356, 430, 1146, 1401], "gbp": 1432, "gc": [41, 155, 167, 168, 356], "gca": 28, "gcaacgcatata": 28, "gcp": [36, 39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 168, 169, 170, 171, 196, 356, 988], "gdp": [259, 356, 914, 988], "gdp2": [259, 356, 914, 988], "gdp_date": [259, 356, 914, 988], "ge": [868, 1401], "gener": [1, 42, 53, 54, 97, 146, 147, 153, 154, 173, 179, 180, 181, 182, 183, 184, 186, 210, 218, 220, 280, 292, 311, 314, 320, 356, 593, 697, 702, 787, 806, 809, 821, 822, 824, 825, 826, 842, 845, 855, 856, 868, 988, 1060, 1223, 1298, 1307, 1376, 1401, 1432], "geq": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "germani": [259, 356, 914, 988], "get": [53, 54, 55, 58, 65, 76, 148, 158, 164, 165, 172, 202, 211, 214, 218, 219, 228, 236, 239, 241, 244, 246, 247, 251, 253, 254, 260, 262, 267, 274, 275, 280, 288, 289, 293, 298, 301, 307, 315, 319, 329, 339, 350, 356, 362, 363, 364, 365, 366, 367, 368, 369, 374, 380, 393, 394, 395, 397, 405, 408, 422, 430, 442, 445, 457, 458, 459, 460, 469, 479, 481, 529, 535, 542, 545, 561, 563, 566, 579, 585, 606, 615, 616, 617, 625, 627, 633, 647, 648, 657, 658, 663, 674, 675, 707, 711, 720, 767, 768, 772, 773, 775, 779, 790, 792, 814, 819, 823, 829, 830, 831, 832, 834, 835, 836, 838, 849, 853, 857, 868, 885, 890, 891, 893, 900, 905, 906, 909, 910, 915, 916, 918, 936, 937, 944, 949, 950, 956, 968, 979, 988, 993, 998, 1011, 1012, 1013, 1014, 1015, 1023, 1026, 1039, 1047, 1062, 1071, 1080, 1081, 1082, 1083, 1091, 1101, 1103, 1141, 1158, 1159, 1165, 1170, 1173, 1176, 1177, 1178, 1190, 1193, 1196, 1209, 1215, 1236, 1244, 1246, 1247, 1249, 1251, 1252, 1253, 1260, 1261, 1265, 1276, 1312, 1315, 1324, 1372, 1376, 1382, 1387, 1391, 1401], "get_chunk": 1401, "get_column": [210, 316, 356], "get_column_index": 356, "get_index_dtyp": 845, "get_polars_schema": 204, "get_table_info": 204, "get_token": 35, "get_worksheet_by_nam": [42, 356], "gevent": [65, 174, 891, 988], "gh": 737, "gh45": 737, "gh45ij67kl": 737, "ghi": [379, 722, 868, 994, 1326], "gil": [614, 868, 992], "git": 63, "github": [154, 356], "give": [161, 169, 170, 259, 271, 321, 323, 356, 374, 479, 532, 562, 668, 774, 778, 858, 868, 880, 914, 924, 932, 951, 953, 988, 1101, 1192, 1270, 1390, 1401, 1428], "given": [42, 53, 54, 55, 58, 97, 108, 113, 130, 132, 134, 135, 136, 138, 146, 147, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 166, 169, 170, 171, 177, 178, 179, 180, 182, 184, 185, 186, 187, 208, 230, 231, 233, 235, 244, 249, 254, 263, 264, 272, 278, 279, 284, 289, 290, 291, 299, 302, 318, 325, 356, 402, 416, 421, 430, 442, 451, 470, 474, 499, 501, 502, 515, 519, 543, 549, 572, 598, 605, 608, 614, 655, 659, 665, 668, 669, 671, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 700, 722, 723, 734, 735, 750, 753, 760, 763, 773, 791, 793, 797, 799, 813, 814, 823, 828, 829, 842, 843, 844, 858, 868, 902, 909, 919, 925, 928, 932, 933, 942, 945, 954, 971, 988, 993, 994, 996, 1020, 1033, 1038, 1047, 1073, 1092, 1096, 1125, 1127, 1128, 1142, 1146, 1148, 1171, 1176, 1191, 1202, 1228, 1235, 1238, 1241, 1243, 1256, 1262, 1266, 1270, 1273, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1300, 1304, 1326, 1327, 1338, 1339, 1354, 1357, 1358, 1364, 1389, 1392, 1401, 1410, 1412, 1417, 1419, 1420, 1423, 1424, 1429, 1431, 1432], "glimps": [222, 246, 356], "glob": [151, 152, 156, 157, 161, 163, 166, 169, 170, 171], "global": [10, 57, 98, 99, 156, 173, 182, 190, 303, 356, 669, 670, 847, 868, 946, 988, 1271, 1272, 1401, 1411, 1413, 1428], "gmt": [474, 478, 496, 1096, 1100, 1122], "go": [14, 151, 152, 166, 444, 718, 1061, 1322], "godfath": 1410, "goe": 14, "gonfruit": 1355, "good": [48, 50, 52, 256, 356, 988, 1423], "goodby": 1, "googl": [36, 155, 167, 168], "gpu": [11, 50, 64, 65, 313, 356, 890, 891, 901, 930, 943, 963, 985, 988, 1379, 1401], "gpu_devic": [313, 356], "gpudevic": [313, 356], "gpuengin": [11, 890, 901, 930, 943, 988], "grade": [1192, 1401], "grain": [890, 901, 930, 943, 985, 988], "granular": [52, 988, 1429], "grape": 1424, "graph": [64, 153, 261, 356, 629, 890, 911, 959, 988], "graphviz": [261, 356, 629, 943, 988], "great": [356, 360], "great_tabl": [356, 360], "greater": [216, 259, 356, 537, 539, 549, 706, 734, 735, 743, 760, 858, 868, 914, 988, 1176, 1311, 1338, 1339, 1347, 1364, 1401], "greatest": [1418, 1422], "greatli": [157, 169], "green": [57, 98, 99, 342, 778, 868, 971, 1390, 1401], "greenlet": [65, 891, 988], "greet": 1, "grid": [547, 868], "grid_point": [547, 868], "gridlin": [42, 356], "gross": 1410, "ground": 605, "group": [9, 29, 48, 52, 55, 148, 152, 171, 215, 243, 244, 257, 259, 276, 278, 280, 288, 291, 324, 326, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 380, 442, 524, 530, 535, 538, 576, 613, 614, 625, 627, 655, 665, 674, 675, 708, 709, 713, 721, 722, 723, 725, 736, 737, 773, 778, 829, 868, 887, 908, 909, 914, 936, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 988, 994, 1084, 1206, 1276, 1317, 1325, 1326, 1327, 1329, 1340, 1341, 1390, 1401, 1410, 1418, 1428, 1429], "group_bi": [244, 276, 280, 288, 326, 355, 356, 380, 432, 437, 440, 442, 528, 530, 535, 538, 613, 614, 655, 708, 709, 773, 778, 780, 806, 809, 829, 845, 868, 890, 891, 901, 909, 930, 932, 936, 943, 986, 988, 994, 1390, 1401], "group_by_dynam": [288, 356, 936, 988], "group_by_partit": [930, 988], "group_col": [528, 780, 868], "group_df": [342, 971], "group_dtyp": [655, 868], "group_index": [721, 1325], "group_to_row": [655, 868], "groupbi": [243, 356, 614, 829, 868], "grouper": [432, 437, 440, 868], "grow": [328, 356], "grown": [248, 356], "gt": [356, 360, 868, 1401], "gte": [528, 780, 868], "guarante": [11, 48, 52, 151, 152, 214, 222, 245, 272, 319, 321, 356, 441, 442, 541, 771, 772, 773, 868, 885, 895, 925, 950, 951, 988, 1058, 1059, 1169, 1383, 1385, 1386, 1401], "guid": [146, 148, 868, 992, 1432], "gzip": [48, 52, 356, 988], "h": [324, 356, 379, 499, 502, 701, 736, 737, 750, 753, 757, 868, 1340, 1341, 1354, 1357, 1361, 1424, 1425], "ha": [41, 42, 49, 50, 51, 52, 56, 58, 65, 137, 153, 166, 189, 210, 326, 332, 337, 356, 366, 441, 442, 534, 613, 626, 632, 727, 751, 761, 772, 773, 797, 814, 823, 828, 829, 864, 868, 891, 943, 960, 966, 971, 988, 1058, 1059, 1072, 1084, 1086, 1331, 1355, 1385, 1386, 1401], "half": [318, 356, 497, 518, 519, 520, 521, 695, 868, 1123, 1147, 1148, 1149, 1150, 1296, 1401], "half_away_from_zero": [695, 868, 1296, 1401], "half_lif": [518, 519, 520, 521, 868, 1147, 1148, 1149, 1150, 1401], "half_to_even": [695, 868, 1296, 1401], "ham": [37, 39, 41, 44, 45, 48, 215, 218, 219, 220, 224, 225, 226, 227, 228, 229, 235, 240, 245, 246, 248, 258, 262, 266, 268, 270, 273, 277, 282, 284, 285, 286, 289, 292, 293, 294, 301, 304, 305, 307, 311, 312, 314, 315, 316, 321, 327, 328, 356, 445, 629, 630, 864, 887, 892, 893, 897, 898, 899, 900, 905, 913, 927, 933, 934, 937, 938, 951, 959, 988, 1062, 1417, 1418], "ham_a": [311, 356], "ham_b": [311, 356], "ham_right": [258, 356, 913, 988], "hamburg": 864, "hand": [42, 151, 152, 166, 356, 594, 595, 596, 597, 1224, 1225, 1226, 1227], "handi": [469, 481, 792, 1091, 1103], "handl": [41, 43, 105, 139, 148, 151, 152, 166, 172, 235, 239, 284, 356, 465, 574, 720, 760, 868, 890, 905, 933, 988, 1087, 1204, 1324, 1364, 1401], "handler": [149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 223, 356, 464, 868, 896, 988], "happen": [153, 474, 662, 868, 1096, 1264, 1401], "hard": [97, 146, 166, 919, 988], "harder": [244, 356, 909, 988], "hardwar": 1432, "has_head": [151, 152, 156, 162, 166], "has_nul": [868, 1168, 1401], "has_prefix": [448, 744], "has_suffix": [444, 718], "has_two": 1419, "has_valid": 1401, "hash": [245, 356, 868, 1401], "hash_row": 356, "hat": [736, 737, 1340, 1341], "have": [5, 16, 32, 35, 42, 54, 57, 58, 66, 73, 99, 148, 149, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 171, 211, 223, 232, 256, 258, 259, 280, 283, 288, 290, 291, 310, 318, 333, 356, 461, 464, 518, 520, 521, 626, 665, 669, 670, 675, 723, 738, 794, 868, 896, 913, 914, 924, 936, 960, 961, 988, 994, 1084, 1086, 1147, 1149, 1150, 1153, 1266, 1271, 1272, 1340, 1342, 1401, 1428, 1430, 1432], "haystack": [722, 1326], "he": 746, "head": [76, 166, 242, 262, 307, 356, 385, 566, 868, 918, 988, 1196, 1372, 1401], "header": [39, 42, 48, 49, 52, 139, 151, 152, 156, 162, 166, 228, 320, 356, 988], "header_format": [42, 356], "header_nam": [320, 356], "headerless": 166, "heap": [148, 230, 356, 868, 1146, 1401], "heatmap": [42, 356], "heavili": 171, "height": [42, 147, 182, 227, 356, 359, 1401, 1406], "hell": [745, 1349], "hello": [1, 22, 745, 746, 747, 994, 1214, 1349, 1350, 1351, 1412, 1415, 1424], "hello_": 816, "hello_data": 1415, "hello_world": 1415, "help": [42, 175, 176, 177, 178, 356, 988], "helper": [356, 360, 864], "henc": [736, 1341], "here": [39, 41, 42, 44, 48, 49, 50, 51, 52, 132, 134, 135, 136, 138, 153, 154, 155, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 180, 182, 186, 196, 211, 280, 356, 469, 481, 613, 614, 629, 723, 730, 792, 858, 868, 883, 943, 988, 994, 1091, 1103, 1334], "hex": [426, 427, 716, 717, 755, 1043, 1044, 1320, 1321, 1359], "hexadecim": [1043, 1044], "hf": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 196, 356, 988], "hf_token": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 196, 356, 988], "hi": [1, 1424], "hidden": [42, 356], "hidden_column": [42, 356], "hide": [23, 24, 25, 26], "hide_gridlin": [42, 356], "hide_password": 153, "high": [291, 356, 360, 662, 868, 880, 1264, 1401], "higher": [48, 52, 56, 222, 282, 348, 356, 663, 686, 687, 840, 868, 895, 931, 977, 988, 1086, 1265, 1287, 1288, 1401], "highest": [356, 360, 665, 777, 797, 868, 988, 1266, 1401], "highli": [148, 868], "hint": [132, 146], "hippopotamu": [734, 735, 1338, 1339], "hist": [868, 1401, 1406], "histogram": [1401, 1406], "hit": [886, 988], "hive": [53, 163, 169, 171], "hive_custom": 199, "hive_dir": [53, 55], "hive_partit": [163, 169, 171], "hive_schema": [163, 169, 171], "hive_serd": 199, "hmm": [994, 1424], "hold": [300, 314, 356, 550, 868, 1177, 1381, 1401], "holidai": [469, 481, 792, 1091, 1103], "home": [758, 1362], "horizont": [22, 66, 107, 237, 248, 267, 269, 274, 306, 324, 356, 783, 785, 794, 795, 796, 801, 802, 804, 812, 815, 831, 833, 836, 841, 852, 959, 988], "host": [63, 151, 157, 159, 171], "hour": [161, 166, 169, 170, 244, 259, 288, 326, 356, 484, 486, 487, 491, 492, 495, 497, 498, 502, 504, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 808, 809, 810, 811, 825, 854, 855, 856, 868, 909, 914, 936, 988, 994, 1118, 1121, 1123, 1130, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "hourly_r": 154, "hours_diff": 504, "hous": [318, 356], "how": [13, 39, 41, 42, 43, 44, 48, 49, 50, 51, 52, 58, 66, 107, 148, 154, 161, 163, 164, 166, 169, 170, 171, 196, 227, 235, 258, 259, 280, 324, 325, 356, 403, 465, 495, 496, 547, 573, 574, 655, 668, 688, 750, 753, 792, 808, 868, 905, 913, 914, 954, 959, 988, 1021, 1087, 1121, 1122, 1203, 1204, 1270, 1289, 1354, 1357, 1401], "howev": [1, 11, 53, 135, 153, 163, 171, 206, 230, 264, 314, 356, 655, 868, 890, 901, 930, 943, 988, 1146, 1401], "hstack": [107, 356], "html": [34, 42, 44, 45, 133, 153, 157, 159, 208, 209, 210, 220, 356, 996, 997], "http": [22, 34, 42, 44, 45, 76, 133, 153, 154, 157, 159, 191, 208, 209, 210, 220, 356, 629, 721, 723, 733, 943, 988, 996, 997, 1325, 1327, 1337], "httpmethod": 76, "hug": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 196, 356, 988], "huge": [230, 356, 1146, 1401], "hut": [736, 737, 1340, 1341], "hvplot": [356, 359, 1401, 1406], "hyperbol": [388, 390, 392, 453, 705, 770, 868, 1006, 1008, 1010, 1076, 1310, 1374, 1401], "hyperloglog": [213, 356, 386, 786, 868, 884, 988, 1004, 1401], "hyphen": [712, 1316], "hypothesi": [180, 182, 185, 186, 1432], "i": [1, 10, 11, 14, 16, 19, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 70, 72, 73, 74, 75, 80, 90, 97, 99, 103, 105, 106, 107, 108, 109, 110, 112, 113, 118, 124, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 200, 202, 206, 211, 212, 213, 214, 215, 217, 218, 222, 223, 226, 227, 229, 230, 232, 233, 234, 235, 239, 243, 244, 245, 246, 249, 250, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 272, 276, 278, 279, 280, 284, 285, 286, 288, 289, 290, 291, 292, 295, 296, 297, 299, 301, 302, 303, 304, 307, 308, 311, 313, 314, 315, 318, 319, 320, 321, 323, 325, 326, 327, 331, 333, 334, 342, 356, 359, 360, 368, 369, 374, 379, 382, 384, 385, 386, 396, 399, 406, 407, 416, 421, 424, 441, 442, 443, 446, 447, 461, 462, 464, 467, 468, 469, 470, 473, 481, 482, 489, 490, 492, 497, 499, 502, 510, 518, 519, 520, 521, 524, 526, 527, 528, 532, 533, 541, 543, 546, 549, 550, 562, 567, 568, 575, 576, 578, 580, 582, 584, 593, 598, 599, 601, 602, 605, 607, 610, 613, 614, 618, 620, 621, 622, 624, 625, 626, 628, 637, 655, 660, 661, 662, 665, 667, 668, 669, 670, 671, 674, 675, 676, 677, 679, 681, 683, 685, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 702, 703, 706, 707, 708, 709, 711, 712, 713, 714, 715, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 740, 743, 745, 746, 747, 750, 751, 752, 753, 754, 755, 757, 758, 760, 765, 767, 772, 773, 778, 779, 782, 783, 784, 785, 786, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 809, 810, 815, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 832, 834, 837, 839, 842, 843, 844, 845, 846, 847, 849, 851, 853, 855, 856, 857, 858, 859, 864, 868, 883, 884, 885, 886, 889, 890, 891, 893, 895, 896, 898, 899, 900, 901, 903, 904, 905, 908, 909, 912, 913, 914, 915, 917, 919, 920, 924, 925, 929, 930, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 951, 953, 954, 955, 956, 958, 961, 962, 963, 971, 981, 988, 992, 994, 1001, 1002, 1003, 1004, 1016, 1017, 1024, 1025, 1033, 1036, 1038, 1041, 1058, 1059, 1063, 1064, 1065, 1067, 1068, 1073, 1074, 1084, 1085, 1086, 1089, 1090, 1091, 1092, 1095, 1103, 1104, 1118, 1123, 1125, 1128, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1155, 1156, 1157, 1158, 1161, 1169, 1170, 1171, 1173, 1176, 1177, 1179, 1182, 1189, 1191, 1192, 1193, 1196, 1197, 1198, 1205, 1206, 1210, 1212, 1214, 1223, 1228, 1229, 1232, 1235, 1243, 1262, 1263, 1264, 1266, 1268, 1270, 1271, 1272, 1273, 1276, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1304, 1307, 1308, 1311, 1312, 1315, 1316, 1317, 1318, 1319, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1347, 1349, 1350, 1351, 1354, 1355, 1356, 1357, 1359, 1361, 1362, 1364, 1371, 1372, 1375, 1376, 1379, 1381, 1382, 1384, 1385, 1386, 1390, 1391, 1401, 1406, 1410, 1411, 1416, 1420, 1421, 1424, 1427, 1429, 1430, 1432], "i0e0": 1432, "i16": [1, 61, 477, 493, 512, 701, 868, 994, 1119, 1378, 1401, 1432], "i32": [1, 61, 132, 135, 139, 179, 181, 182, 294, 303, 356, 405, 406, 408, 429, 443, 472, 480, 483, 484, 485, 486, 487, 491, 514, 701, 755, 792, 815, 858, 868, 938, 988, 993, 1023, 1024, 1026, 1046, 1094, 1105, 1109, 1110, 1111, 1117, 1140, 1241, 1359, 1401, 1421, 1425, 1432], "i64": [1, 11, 12, 15, 18, 19, 23, 29, 59, 60, 61, 62, 66, 67, 85, 106, 132, 133, 134, 135, 136, 137, 138, 139, 147, 151, 153, 160, 161, 166, 175, 177, 211, 212, 214, 215, 216, 217, 219, 223, 224, 227, 228, 231, 232, 234, 235, 238, 239, 241, 242, 243, 244, 246, 248, 249, 251, 253, 255, 258, 259, 260, 262, 264, 265, 266, 272, 273, 278, 279, 280, 281, 284, 285, 286, 287, 288, 292, 294, 296, 299, 301, 302, 303, 305, 307, 309, 316, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 346, 349, 350, 356, 374, 379, 381, 385, 395, 400, 401, 403, 404, 410, 413, 414, 415, 416, 417, 419, 422, 432, 437, 440, 441, 442, 451, 457, 458, 459, 460, 461, 462, 465, 466, 479, 495, 501, 503, 504, 505, 506, 507, 508, 509, 519, 522, 524, 525, 527, 528, 529, 530, 532, 535, 536, 538, 542, 544, 546, 547, 548, 549, 553, 554, 556, 557, 558, 559, 560, 563, 566, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 611, 613, 614, 634, 635, 636, 638, 639, 641, 643, 645, 646, 651, 655, 656, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 697, 699, 700, 701, 702, 707, 708, 709, 727, 736, 737, 751, 755, 760, 761, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 777, 780, 787, 790, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 808, 811, 812, 813, 814, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 838, 841, 846, 847, 848, 851, 852, 853, 854, 858, 864, 868, 883, 885, 887, 888, 890, 891, 896, 897, 899, 902, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 918, 919, 920, 921, 925, 926, 928, 930, 932, 933, 934, 935, 936, 938, 940, 942, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 957, 960, 961, 964, 965, 967, 968, 969, 971, 972, 975, 978, 979, 988, 994, 998, 999, 1000, 1003, 1022, 1028, 1030, 1032, 1033, 1034, 1036, 1039, 1058, 1059, 1073, 1074, 1080, 1081, 1082, 1083, 1084, 1085, 1101, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1152, 1153, 1154, 1156, 1157, 1162, 1163, 1165, 1170, 1172, 1182, 1196, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1217, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1235, 1236, 1243, 1248, 1256, 1262, 1264, 1267, 1268, 1269, 1271, 1272, 1273, 1275, 1279, 1280, 1282, 1284, 1285, 1286, 1288, 1291, 1292, 1293, 1295, 1298, 1299, 1301, 1304, 1305, 1307, 1312, 1313, 1359, 1365, 1370, 1372, 1377, 1385, 1386, 1387, 1392, 1401, 1410, 1411, 1413, 1417, 1418, 1419, 1420, 1421, 1423, 1426, 1427, 1429, 1430, 1432], "i8": [263, 356, 420, 421, 477, 480, 484, 486, 487, 488, 491, 493, 494, 498, 511, 512, 604, 701, 839, 842, 859, 868, 1037, 1038, 1087, 1099, 1102, 1113, 1114, 1120, 1124, 1137, 1138, 1234, 1274, 1305, 1389, 1401, 1425], "i_bitand_j": 1420, "i_bitand_op_j": 1420, "i_bitcount": 1420, "i_bitor_j": 1420, "i_bitor_op_j": 1420, "i_bitxor_j": 1420, "i_bitxor_op_j": 1420, "iceberg": [43, 168, 356, 880], "icon": [42, 356], "id": [28, 35, 42, 66, 147, 151, 156, 168, 260, 313, 320, 333, 342, 356, 674, 736, 737, 776, 868, 915, 961, 971, 988, 994, 1276, 1388, 1401, 1429, 1430, 1432], "id_char": 1432, "id_var": [271, 323, 356, 924, 953, 988], "ideal": [141, 146], "ident": [35, 139, 216, 217, 356, 499, 673, 674, 868, 888, 889, 988, 1072, 1074, 1125, 1275, 1276, 1401], "identif": [156, 162], "identifi": [139, 153, 271, 278, 321, 323, 334, 356, 924, 951, 953, 988], "idiograph": 994, "idiom": 858, "idiomat": [864, 893, 900, 937, 956, 971, 988], "idx": [166, 244, 257, 333, 356, 406, 421, 605, 909, 961, 988, 1038, 1235, 1329], "idx_lit": 1329, "idx_rx": 1329, "ieee": [774, 868], "if_set": [5, 32], "if_table_exist": [40, 356], "ifnul": 1422, "ignor": [41, 56, 70, 153, 171, 181, 182, 186, 265, 269, 306, 325, 356, 382, 384, 407, 465, 496, 518, 520, 521, 574, 584, 605, 614, 647, 648, 712, 728, 729, 782, 784, 796, 833, 852, 868, 920, 954, 988, 994, 1001, 1002, 1025, 1087, 1122, 1147, 1149, 1150, 1204, 1214, 1252, 1253, 1316, 1332, 1401], "ignore_error": [151, 152, 161, 166, 170], "ignore_nul": [269, 306, 356, 382, 384, 407, 518, 520, 521, 584, 712, 728, 782, 784, 796, 833, 852, 868, 1001, 1002, 1025, 1147, 1149, 1150, 1214, 1316, 1332, 1401], "ignore_spac": 994, "ij": 737, "ij67": 737, "ijkl": 1424, "ilmsuxu": [713, 721, 722, 725, 736, 737, 1317, 1325, 1326, 1329, 1340, 1341], "imbal": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "imdb_scor": 1410, "immedi": [206, 665, 787, 791, 793, 797, 799, 806, 807, 809, 810, 821, 822, 825, 826, 839, 842, 846, 850, 855, 856, 859, 868, 929, 988, 1266, 1401, 1411], "immut": [314, 356, 1381, 1401], "impact": [244, 356, 909, 988, 1410, 1429], "impl": 168, "implement": [48, 97, 146, 153, 210, 245, 264, 342, 356, 359, 360, 366, 541, 550, 614, 761, 771, 828, 829, 868, 971, 993, 1169, 1177, 1243, 1299, 1301, 1383, 1401, 1406], "implic": [464, 868, 896, 988], "implicit": [325, 356, 858, 954, 988], "implicitli": [235, 284, 356, 528, 858, 868, 905, 933, 988, 1429], "implod": [613, 614, 868, 1401, 1419], "import": [12, 18, 30, 37, 39, 41, 42, 44, 45, 48, 58, 73, 76, 97, 132, 133, 136, 137, 147, 151, 153, 154, 160, 161, 166, 172, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 212, 215, 222, 223, 224, 227, 242, 244, 257, 259, 263, 278, 280, 296, 303, 311, 313, 318, 323, 324, 326, 356, 359, 360, 374, 430, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 578, 621, 622, 628, 655, 677, 679, 681, 683, 685, 687, 690, 692, 694, 792, 805, 806, 807, 808, 809, 810, 811, 812, 825, 847, 855, 856, 864, 868, 880, 887, 891, 895, 896, 897, 899, 909, 914, 919, 940, 953, 988, 992, 993, 1047, 1075, 1077, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1148, 1180, 1183, 1185, 1186, 1208, 1278, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1309, 1373, 1401, 1406, 1411, 1426, 1429, 1432], "improv": [40, 52, 157, 168, 169, 258, 356, 913, 988], "in_part_idx": [53, 55, 145], "in_plac": [248, 300, 328, 356, 1267, 1306, 1313, 1401], "in_progress": [932, 988], "includ": [7, 22, 32, 39, 41, 42, 49, 53, 55, 63, 137, 153, 155, 156, 161, 162, 163, 166, 167, 168, 169, 170, 171, 182, 183, 206, 218, 222, 230, 260, 278, 280, 284, 291, 302, 318, 320, 324, 325, 356, 462, 498, 528, 532, 543, 549, 621, 662, 676, 678, 680, 682, 684, 686, 688, 689, 691, 693, 736, 737, 741, 742, 745, 746, 792, 801, 802, 843, 844, 868, 895, 905, 915, 933, 945, 954, 988, 994, 1085, 1086, 1124, 1146, 1157, 1171, 1176, 1264, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1290, 1292, 1294, 1340, 1341, 1345, 1346, 1349, 1401, 1429], "include_bom": [39, 49, 356, 988], "include_boundari": [244, 356, 909, 988], "include_break": [462, 662, 868, 1085, 1264, 1401], "include_breakpoint": [543, 868, 1171, 1401], "include_categor": 994, "include_categori": [543, 868, 1171, 1401], "include_col": 182, "include_file_path": [156, 161, 162, 163, 166, 169, 170, 171], "include_head": [39, 42, 49, 152, 320, 356, 374, 988], "include_index": 137, "include_init": [801, 802], "include_kei": [53, 55, 278, 291, 356], "include_nul": [325, 356, 954, 988], "inclus": [211, 244, 288, 356, 502, 549, 675, 679, 681, 683, 685, 687, 690, 692, 694, 741, 742, 787, 806, 807, 809, 810, 821, 822, 825, 826, 855, 856, 868, 909, 936, 988, 1128, 1176, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1345, 1346, 1401], "incom": 153, "incompat": 125, "incomplet": [670, 868, 1272, 1401], "incorpor": 1429, "incorrect": [297, 356, 513, 699, 868, 941, 971, 988, 1139, 1302, 1401], "incorrectli": 151, "increas": [42, 53, 54, 55, 58, 151, 156, 162, 163, 171, 356, 461, 674, 868, 1084, 1276, 1401], "independ": [64, 179, 182, 186, 318, 356, 702, 868, 890, 901, 930, 943, 988], "index": [42, 113, 133, 137, 140, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 174, 210, 212, 238, 240, 244, 249, 254, 256, 280, 286, 288, 289, 290, 299, 301, 313, 314, 316, 323, 325, 326, 332, 333, 356, 366, 380, 393, 394, 395, 397, 400, 401, 406, 416, 421, 519, 535, 536, 538, 545, 569, 570, 580, 581, 582, 598, 599, 605, 675, 679, 681, 683, 685, 687, 690, 692, 694, 698, 700, 707, 713, 721, 725, 727, 740, 751, 761, 790, 821, 824, 845, 868, 907, 909, 936, 942, 944, 953, 954, 960, 961, 988, 994, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1024, 1033, 1038, 1148, 1162, 1163, 1173, 1191, 1199, 1200, 1210, 1211, 1212, 1228, 1229, 1235, 1256, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1299, 1300, 1304, 1312, 1325, 1329, 1331, 1344, 1355, 1401, 1406, 1419, 1424], "index_column": [244, 288, 356, 675, 868, 909, 936, 988], "index_of": [868, 1401], "indexord": [313, 314, 356], "indic": [39, 42, 44, 48, 49, 50, 51, 52, 72, 73, 75, 90, 106, 116, 148, 149, 151, 152, 153, 156, 157, 159, 161, 162, 163, 164, 166, 169, 170, 171, 179, 180, 186, 196, 244, 288, 291, 299, 311, 356, 396, 416, 535, 543, 551, 552, 553, 555, 556, 557, 558, 559, 560, 580, 598, 618, 619, 620, 621, 622, 623, 624, 655, 675, 679, 681, 683, 685, 687, 690, 692, 694, 698, 700, 790, 791, 838, 868, 909, 936, 942, 988, 994, 1033, 1068, 1162, 1171, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1210, 1228, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1299, 1300, 1304, 1376, 1401, 1424, 1432], "indistinguish": [39, 49, 356, 988], "individu": [42, 52, 142, 206, 288, 313, 314, 318, 356, 614, 722, 764, 868, 890, 936, 988, 994, 1071, 1326, 1401], "inequ": [649, 868], "inexact": [175, 176, 177, 178], "inf": [179, 182, 186, 392, 462, 552, 555, 662, 774, 868, 1010, 1077, 1085, 1180, 1183, 1241, 1259, 1264, 1389, 1401, 1426], "infer": [39, 44, 48, 49, 50, 51, 52, 74, 89, 106, 132, 134, 135, 136, 137, 138, 151, 152, 153, 156, 160, 161, 162, 163, 164, 166, 169, 170, 171, 196, 264, 356, 613, 614, 671, 750, 752, 753, 757, 801, 802, 811, 815, 827, 828, 829, 841, 842, 868, 988, 1243, 1273, 1333, 1354, 1356, 1357, 1358, 1361, 1401], "infer_schema": [151, 166], "infer_schema_length": [135, 138, 147, 151, 152, 153, 156, 160, 161, 162, 166, 170, 356, 729, 988, 1333], "inference_length": [754, 1358], "inference_s": [264, 356], "infin": [758, 774, 868, 1362], "infinit": [555, 774, 868, 1183, 1401], "influenc": [156, 919, 988], "influxdb": 153, "info": [155, 167, 168, 174], "inform": [21, 25, 39, 40, 44, 48, 49, 50, 51, 52, 53, 54, 55, 63, 146, 148, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 175, 177, 196, 197, 198, 200, 201, 208, 220, 222, 356, 360, 562, 706, 713, 721, 722, 725, 736, 737, 868, 890, 895, 901, 930, 943, 988, 992, 996, 1192, 1311, 1317, 1325, 1326, 1329, 1340, 1341, 1401], "inherit": [289, 356, 464, 868, 896, 988], "init": [206, 1410], "initcap": 1422, "initi": [10, 34, 35, 36, 42, 89, 146, 191, 206, 356, 801, 802, 815, 858, 1429], "initialis": [76, 153, 206, 988], "inject": [42, 58, 356], "inlin": [26, 291, 356, 713, 721, 722, 725, 736, 737, 1317, 1325, 1326, 1329, 1340, 1341, 1419], "inner": [67, 85, 181, 258, 260, 325, 356, 362, 365, 374, 407, 420, 466, 584, 604, 614, 668, 771, 847, 868, 913, 915, 954, 988, 994, 1025, 1037, 1088, 1214, 1234, 1243, 1270, 1383, 1401, 1417, 1429], "inner_dtyp": [181, 184, 374], "innermost": [181, 184], "innter": 1024, "inprocessqueri": [890, 988], "input": [0, 55, 58, 64, 106, 135, 137, 148, 151, 152, 172, 214, 224, 243, 260, 264, 265, 269, 278, 280, 285, 294, 295, 299, 302, 306, 319, 325, 330, 331, 335, 356, 368, 379, 442, 444, 448, 451, 519, 522, 534, 549, 609, 613, 614, 626, 655, 669, 670, 703, 709, 727, 738, 740, 746, 747, 748, 749, 751, 753, 765, 773, 781, 783, 785, 787, 790, 793, 794, 795, 796, 802, 804, 811, 813, 821, 822, 827, 828, 829, 831, 833, 836, 841, 846, 850, 852, 858, 864, 868, 880, 885, 897, 908, 915, 920, 929, 934, 938, 939, 942, 945, 950, 954, 957, 958, 964, 988, 994, 1059, 1073, 1148, 1176, 1239, 1240, 1243, 1262, 1271, 1272, 1304, 1308, 1331, 1344, 1355, 1357, 1386, 1401, 1423, 1424, 1426], "input_wildcard_expans": [148, 868], "insensit": [714, 722, 724, 726, 736, 737, 738, 994, 1317, 1318, 1326, 1328, 1329, 1330, 1340, 1341, 1342], "insensitive_match": [713, 725], "insert": [40, 56, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 249, 265, 320, 322, 356, 698, 712, 728, 760, 868, 920, 952, 988, 1300, 1316, 1332, 1364, 1401], "insert_aft": [42, 356], "insert_befor": [42, 356], "insert_chart": [42, 356], "insert_column": 356, "insid": [65, 613, 858, 868, 891, 988], "inspect": [368, 701, 868, 988], "instal": [34, 35, 36, 110, 137, 151, 152, 154, 157, 159, 220, 315, 356, 469, 481, 629, 792, 943, 988, 1091, 1103, 1382, 1401], "instanc": [39, 44, 48, 49, 50, 51, 52, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 182, 186, 196, 232, 237, 356, 626, 801, 815, 864, 880, 887, 919, 932, 960, 961, 988, 1153, 1401], "instanti": [35, 40, 42, 153, 184, 312, 313, 356, 374, 993, 1378, 1379, 1401], "instantli": [65, 891, 988], "instead": [39, 41, 46, 47, 49, 58, 65, 67, 133, 134, 135, 138, 151, 152, 153, 156, 162, 163, 166, 171, 172, 179, 180, 181, 182, 186, 213, 214, 242, 255, 256, 259, 264, 271, 276, 278, 289, 290, 291, 294, 295, 296, 299, 313, 314, 315, 319, 331, 332, 356, 359, 360, 374, 395, 416, 442, 443, 446, 447, 462, 476, 502, 519, 522, 532, 598, 613, 628, 661, 662, 669, 700, 701, 712, 720, 731, 732, 745, 746, 747, 748, 749, 760, 767, 773, 780, 787, 789, 791, 793, 797, 798, 799, 806, 807, 809, 810, 811, 821, 822, 825, 826, 839, 842, 845, 846, 847, 850, 851, 855, 856, 859, 868, 883, 884, 885, 891, 901, 914, 924, 938, 939, 940, 942, 950, 958, 959, 960, 963, 988, 994, 1013, 1033, 1043, 1059, 1060, 1064, 1065, 1085, 1098, 1107, 1108, 1128, 1148, 1168, 1228, 1263, 1264, 1271, 1299, 1301, 1304, 1313, 1316, 1324, 1335, 1336, 1349, 1350, 1351, 1364, 1371, 1381, 1382, 1386, 1401, 1406, 1410, 1411, 1415, 1429, 1430], "int": [12, 14, 15, 16, 19, 27, 28, 39, 40, 42, 44, 48, 49, 50, 51, 52, 54, 60, 67, 74, 135, 138, 141, 142, 143, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 196, 198, 212, 214, 216, 222, 230, 233, 234, 238, 240, 242, 245, 246, 247, 249, 254, 256, 257, 259, 262, 264, 275, 276, 286, 288, 289, 292, 298, 299, 301, 304, 307, 312, 316, 319, 324, 327, 329, 332, 333, 339, 350, 356, 374, 379, 406, 416, 418, 421, 423, 424, 441, 442, 461, 465, 469, 495, 518, 520, 521, 525, 526, 527, 533, 535, 536, 538, 541, 542, 543, 566, 574, 580, 581, 582, 583, 593, 598, 599, 601, 603, 604, 605, 607, 654, 656, 659, 660, 662, 665, 668, 671, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 702, 707, 711, 721, 727, 729, 734, 735, 736, 740, 742, 743, 751, 754, 755, 760, 768, 772, 773, 779, 781, 787, 797, 799, 805, 808, 811, 817, 819, 821, 822, 825, 826, 838, 839, 842, 843, 844, 849, 850, 853, 854, 857, 859, 868, 885, 888, 895, 903, 904, 907, 910, 914, 918, 930, 942, 944, 947, 949, 950, 955, 956, 960, 961, 963, 968, 979, 988, 993, 994, 1011, 1012, 1024, 1033, 1035, 1038, 1040, 1041, 1058, 1059, 1060, 1071, 1072, 1078, 1084, 1087, 1088, 1091, 1121, 1146, 1147, 1149, 1150, 1154, 1155, 1156, 1161, 1162, 1163, 1169, 1170, 1171, 1173, 1191, 1195, 1196, 1204, 1210, 1211, 1212, 1213, 1223, 1228, 1229, 1231, 1233, 1234, 1235, 1237, 1249, 1250, 1252, 1253, 1256, 1258, 1259, 1262, 1263, 1264, 1266, 1270, 1273, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1307, 1312, 1315, 1325, 1331, 1333, 1338, 1339, 1340, 1344, 1346, 1347, 1355, 1358, 1359, 1364, 1371, 1372, 1378, 1385, 1386, 1391, 1401, 1413, 1416, 1429, 1432], "int16": [1, 61, 318, 356, 361, 459, 460, 493, 767, 868, 994, 1082, 1083, 1119, 1371, 1378, 1401], "int32": [1, 42, 61, 66, 132, 135, 179, 181, 182, 244, 257, 265, 288, 313, 356, 374, 405, 406, 408, 429, 443, 472, 483, 484, 485, 486, 491, 514, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 755, 771, 842, 868, 909, 920, 936, 988, 993, 994, 1020, 1023, 1024, 1026, 1046, 1094, 1105, 1109, 1110, 1111, 1117, 1140, 1148, 1241, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1359, 1383, 1384, 1401], "int64": [1, 41, 42, 60, 61, 66, 67, 89, 108, 151, 160, 218, 228, 237, 244, 265, 279, 288, 293, 308, 315, 356, 366, 367, 374, 400, 401, 403, 404, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 459, 460, 503, 504, 505, 506, 507, 508, 509, 513, 519, 522, 613, 614, 640, 642, 644, 659, 667, 675, 679, 681, 683, 685, 687, 690, 692, 694, 729, 755, 767, 771, 787, 794, 813, 821, 822, 827, 842, 850, 864, 868, 892, 900, 909, 920, 928, 936, 937, 988, 994, 1018, 1019, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1082, 1083, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1139, 1141, 1148, 1243, 1268, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1359, 1371, 1381, 1382, 1383, 1384, 1401], "int64arrai": [1375, 1401], "int8": [1, 61, 89, 237, 356, 363, 364, 420, 421, 459, 460, 477, 480, 487, 488, 494, 498, 511, 512, 604, 767, 839, 842, 859, 868, 993, 1037, 1038, 1082, 1083, 1087, 1099, 1102, 1113, 1114, 1120, 1124, 1137, 1138, 1234, 1274, 1371, 1381, 1389, 1401], "int_rang": [244, 324, 333, 342, 356, 787, 824, 845, 846, 909, 919, 961, 971, 988], "integ": [39, 42, 49, 56, 72, 73, 75, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 173, 180, 182, 185, 187, 212, 227, 244, 265, 288, 311, 314, 356, 374, 383, 450, 498, 531, 532, 654, 660, 662, 667, 674, 675, 676, 688, 727, 751, 755, 781, 787, 817, 821, 822, 842, 845, 868, 899, 909, 920, 936, 988, 994, 1070, 1124, 1160, 1262, 1264, 1268, 1276, 1277, 1289, 1299, 1331, 1355, 1359, 1381, 1401, 1423, 1429, 1432], "integer_cast": [56, 265, 356, 920, 988], "integer_list": 85, "integr": [42, 318, 356, 679, 681, 683, 685, 687, 690, 692, 694, 868, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1432], "intend": [1, 175, 176, 177, 178, 760, 1364], "intens": [264, 342, 356, 655, 868, 1243, 1401], "interact": [182, 186, 222, 356, 359, 895, 988, 1401, 1406], "interchang": [133, 210], "interest": [152, 499, 502, 1125, 1128], "interfac": [0, 121, 122, 132, 133, 204, 205, 209, 880, 993, 997, 1429], "interfer": 992, "interleav": 1424, "intermedi": [250, 356, 547, 868, 912, 988, 1174, 1175, 1401, 1432], "intern": [44, 45, 50, 153, 173, 256, 308, 356, 532, 868, 988, 1375, 1401, 1411], "interoper": [208, 996], "interpol": [222, 282, 348, 356, 527, 548, 617, 663, 686, 687, 840, 868, 895, 931, 977, 988, 1086, 1175, 1265, 1287, 1288, 1401, 1418], "interpolate_bi": [868, 1401], "interpolationmethod": [547, 868, 1174, 1401], "interpret": [136, 138, 151, 152, 166, 356, 429, 988, 1046], "intersect": [42, 356, 595, 994, 1225, 1428], "interv": [244, 288, 326, 356, 462, 497, 543, 549, 662, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 825, 826, 855, 856, 868, 909, 936, 988, 1085, 1099, 1101, 1102, 1109, 1111, 1113, 1114, 1117, 1119, 1120, 1123, 1127, 1137, 1171, 1176, 1264, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1418], "intoexpr": [148, 214, 243, 244, 288, 294, 295, 299, 302, 319, 330, 331, 335, 356, 385, 402, 403, 425, 428, 431, 442, 465, 469, 495, 519, 525, 535, 543, 545, 548, 549, 550, 572, 573, 594, 595, 596, 597, 608, 655, 669, 670, 679, 681, 683, 685, 687, 690, 692, 694, 698, 700, 709, 714, 724, 726, 738, 741, 742, 743, 745, 746, 747, 748, 749, 765, 773, 783, 785, 790, 793, 794, 795, 796, 797, 799, 801, 804, 808, 815, 825, 831, 833, 836, 842, 846, 850, 852, 868, 885, 908, 909, 936, 938, 939, 942, 945, 950, 957, 958, 964, 988, 1020, 1021, 1042, 1045, 1048, 1059, 1091, 1148, 1154, 1173, 1175, 1176, 1177, 1202, 1203, 1271, 1272, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1300, 1304, 1330, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1386, 1401], "intoexprcolumn": [235, 249, 284, 356, 406, 407, 416, 441, 442, 451, 497, 525, 528, 581, 584, 593, 598, 656, 660, 697, 700, 721, 727, 730, 734, 735, 740, 751, 755, 760, 772, 773, 787, 792, 806, 807, 809, 810, 821, 822, 826, 855, 856, 858, 868, 905, 933, 942, 988, 1024, 1025, 1033, 1073, 1118, 1123, 1136, 1154, 1211, 1214, 1223, 1228, 1259, 1270, 1325, 1331, 1334, 1338, 1339, 1344, 1355, 1359, 1364, 1401], "introduc": [57, 99, 750, 752, 753, 1354, 1356, 1357], "introduct": 1428, "intuit": [532, 868, 994], "invalid": [39, 49, 122, 151, 152, 166, 215, 356, 443, 729, 730, 755, 774, 868, 988, 1043, 1060, 1333, 1334, 1359, 1401], "invalid_valu": 1043, "invalidoperationerror": [670, 868, 1272, 1401, 1427], "invari": [919, 988], "invers": [387, 388, 389, 390, 391, 392, 868, 1005, 1006, 1007, 1008, 1009, 1010, 1381, 1401, 1426], "invert": 994, "invok": 206, "involv": [235, 284, 356, 905, 933, 988], "io": [37, 39, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 149, 151, 157, 158, 159, 160, 161, 164, 165, 166, 168, 169, 170, 223, 296, 356, 464, 534, 628, 868, 896, 940, 988], "io_sourc": 146, "iobas": [46, 160, 223, 296, 356, 464, 628, 632, 868, 896, 940, 988], "ipc": [44, 45, 50, 157, 158, 159, 169, 172, 356, 880, 988], "ipccompress": [44, 45, 50, 356, 988], "ir": [943, 988], "is_between": [868, 1401], "is_clos": [868, 1401], "is_dupl": [356, 868, 1401], "is_elementwis": [148, 613, 828, 829, 868], "is_empti": [356, 1401], "is_finit": [868, 1401], "is_first_distinct": [868, 1401], "is_float": [929, 988], "is_in": [108, 235, 356, 868, 1401], "is_infinit": [868, 1401], "is_last_distinct": [868, 1401], "is_nan": [226, 356, 868, 898, 988, 1401], "is_not_nan": [868, 1401], "is_not_nul": [284, 356, 868, 933, 988, 1401], "is_nul": [227, 356, 868, 899, 988, 1401], "is_numer": 1432, "is_odd": 994, "is_pur": 146, "is_selector": 994, "is_sort": 1401, "is_uniqu": [356, 868, 1401], "isclos": [550, 868, 1177, 1401], "isn": [97, 146, 858], "iso": [483, 502, 511, 512, 1105, 1128, 1137, 1138, 1424], "iso8601": [151, 152, 166, 502, 1128], "iso_lang": 1424, "iso_year": 514, "isodow": 1425, "isoweek": 1425, "isoyear": 1425, "issu": [101, 102, 105, 106, 109, 116, 118, 129, 132, 151, 152, 153, 166, 356, 459, 460, 767, 868, 1082, 1083, 1371, 1401, 1429], "ital": [42, 356], "item": [15, 66, 152, 242, 289, 292, 356, 402, 406, 407, 429, 465, 524, 572, 574, 582, 584, 593, 697, 743, 868, 883, 929, 988, 1020, 1024, 1025, 1046, 1087, 1152, 1202, 1204, 1212, 1214, 1223, 1298, 1347, 1401], "iter": [53, 54, 55, 58, 64, 65, 66, 76, 131, 132, 135, 146, 148, 153, 185, 187, 214, 224, 231, 235, 243, 244, 255, 256, 257, 260, 284, 288, 289, 290, 291, 294, 295, 302, 319, 320, 330, 331, 334, 335, 356, 442, 461, 469, 481, 528, 655, 709, 765, 773, 783, 785, 790, 792, 793, 794, 795, 796, 804, 831, 833, 836, 846, 850, 852, 858, 864, 868, 885, 897, 902, 905, 908, 909, 915, 933, 936, 938, 939, 945, 950, 957, 958, 964, 988, 993, 994, 1059, 1084, 1091, 1103, 1157, 1299, 1386, 1401, 1432], "iter_batch": 153, "iter_column": 356, "iter_row": [257, 289, 290, 291, 356], "iter_slic": 356, "its": [77, 139, 153, 174, 230, 314, 356, 473, 497, 510, 519, 613, 614, 673, 709, 764, 778, 828, 829, 858, 868, 883, 893, 900, 919, 956, 988, 992, 1095, 1123, 1136, 1146, 1148, 1243, 1275, 1381, 1401, 1431], "itself": [180, 356, 359, 360, 676, 678, 680, 682, 684, 686, 688, 689, 691, 693, 791, 843, 844, 868, 917, 988, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1290, 1292, 1294, 1401, 1406, 1410, 1411, 1429], "ix": [280, 356], "j": [320, 356, 1420], "jax": [313, 356, 1379, 1401], "jax_enable_x64": [313, 356], "jaxexporttyp": [313, 356], "jjk": 994, "jkl": [722, 1326], "jklmn": 1424, "job": [886, 988], "join": [57, 58, 64, 66, 99, 235, 259, 260, 284, 325, 356, 528, 547, 655, 712, 847, 868, 890, 901, 905, 914, 915, 930, 933, 943, 954, 959, 988, 1316, 1411, 1413, 1419, 1428, 1429], "join_asof": [258, 356, 913, 988], "join_nul": [258, 356, 913, 988], "join_wher": [356, 988], "joinstrategi": [58, 258, 356, 913, 988], "joinvalid": [258, 356, 913, 988], "jpy": 1432, "json": [2, 3, 5, 6, 46, 47, 147, 148, 160, 161, 168, 170, 199, 223, 296, 356, 464, 534, 628, 632, 729, 730, 762, 868, 880, 896, 940, 988, 1333, 1334, 1367], "json_decod": [263, 356], "json_path": [730, 1334], "json_path_match": [729, 1333], "json_stat": 5, "json_str": [160, 161], "json_val": [730, 1334], "jsonencod": 147, "jsonpath": [729, 730, 1333, 1334], "jst": [139, 994], "jul": [750, 1354, 1424], "juli": [1128, 1424, 1425], "just": [42, 137, 153, 166, 271, 323, 356, 924, 953, 988, 994], "k": [214, 291, 319, 320, 356, 441, 442, 456, 562, 772, 773, 868, 885, 950, 988, 1058, 1059, 1079, 1192, 1385, 1386, 1401], "k_2": [706, 868, 1311, 1401], "k_3": [706, 868, 1311, 1401], "kadokawa": [733, 1337], "kanji": 994, "karen": [280, 356], "kathmandu": [1097, 1098, 1126], "kb": [230, 356, 430, 1047, 1146, 1401], "kde": [1401, 1406], "keep": [42, 58, 151, 152, 161, 166, 169, 170, 235, 321, 325, 326, 356, 534, 613, 631, 639, 669, 793, 828, 858, 868, 951, 954, 988, 1271, 1401], "kei": [10, 39, 41, 42, 44, 48, 49, 50, 51, 52, 53, 55, 58, 63, 66, 144, 145, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 196, 211, 212, 244, 256, 258, 259, 272, 278, 285, 287, 290, 291, 325, 356, 528, 614, 669, 670, 738, 806, 809, 850, 868, 909, 913, 914, 925, 932, 934, 935, 954, 988, 994, 998, 1271, 1272, 1342, 1401, 1417], "kept": [321, 356, 951, 988], "keyedpartit": 145, "keyedpartitioncontext": [53, 55, 144], "keyerror": 18, "keystrok": 864, "keyword": [41, 155, 163, 167, 182, 186, 196, 220, 243, 263, 279, 289, 294, 295, 315, 330, 331, 335, 356, 469, 528, 659, 754, 765, 792, 846, 850, 858, 868, 908, 928, 938, 939, 957, 958, 964, 988, 1091, 1358, 1382, 1401, 1414], "kl": 737, "kleen": [382, 384, 782, 783, 784, 785, 868, 1001, 1002, 1401], "klmnoopqrstuvwxyz": [257, 356], "knight": 1410, "know": [58, 153, 263, 280, 323, 356, 883, 953, 988], "known": [132, 157, 200, 421, 605, 695, 701, 868, 971, 1038, 1235, 1296, 1401], "kurtosi": [676, 868, 1277, 1401], "kuzu_db_conn": 153, "kwarg": [33, 34, 38, 57, 68, 69, 70, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 148, 150, 153, 154, 182, 184, 186, 199, 203, 220, 235, 263, 279, 284, 315, 356, 359, 659, 868, 905, 928, 933, 963, 988, 1382, 1401, 1406, 1414, 1429], "k\u00f9zudb": 153, "l": [825, 826], "l1": 66, "l2": 66, "label": [244, 313, 318, 356, 359, 360, 462, 662, 676, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 868, 909, 930, 988, 1085, 1264, 1277, 1278, 1279, 1281, 1283, 1285, 1287, 1289, 1290, 1292, 1294, 1401, 1406], "label_column": [318, 356], "labelangl": [356, 359, 1401, 1406], "lag": [299, 356, 416, 598, 700, 795, 868, 942, 988, 1033, 1228, 1304, 1401], "lake": [41, 155, 167, 356, 880], "lambda": [53, 97, 166, 237, 263, 264, 279, 280, 285, 342, 356, 374, 421, 520, 521, 605, 613, 614, 639, 640, 801, 802, 815, 828, 829, 841, 868, 919, 928, 934, 971, 988, 1038, 1149, 1150, 1235, 1243, 1401], "land": [469, 481, 1091, 1103], "languag": [166, 244, 259, 288, 326, 356, 492, 497, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "larg": [12, 13, 16, 58, 153, 156, 162, 171], "large_str": [257, 308, 315, 356], "larger": [12, 49, 50, 51, 52, 532, 550, 797, 868, 988, 1177, 1401], "largest": [214, 319, 356, 442, 772, 773, 868, 885, 950, 988, 1059, 1385, 1386, 1401], "last": [41, 161, 166, 169, 170, 175, 176, 177, 178, 246, 259, 262, 280, 291, 302, 307, 314, 321, 350, 356, 395, 406, 417, 461, 477, 489, 493, 511, 533, 556, 582, 600, 603, 605, 655, 670, 708, 709, 727, 743, 751, 768, 790, 853, 864, 868, 914, 945, 949, 951, 979, 988, 994, 1013, 1024, 1034, 1084, 1099, 1115, 1119, 1137, 1161, 1170, 1184, 1196, 1212, 1230, 1233, 1272, 1313, 1331, 1347, 1355, 1372, 1381, 1401, 1422, 1424], "last_column": [42, 356], "later": [259, 296, 356, 628, 914, 940, 988], "latest": [34, 133, 155, 167, 210, 495, 496, 626, 750, 753, 808, 1121, 1122, 1354, 1357], "latt": 994, "latter": [42, 133, 232, 356, 1153, 1401], "lazi": [1, 49, 50, 51, 52, 53, 66, 151, 157, 161, 163, 166, 182, 259, 279, 280, 303, 356, 374, 614, 701, 817, 839, 842, 859, 868, 895, 913, 914, 929, 959, 964, 965, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 988, 994, 1410, 1411, 1412, 1413, 1414, 1416, 1429, 1432], "lazili": [151, 152, 157, 161, 163, 166, 167, 168, 169, 170, 171, 368, 374, 891, 988], "lazy_fram": [64, 65, 131], "lazyfram": [0, 1, 11, 58, 59, 60, 61, 62, 64, 65, 66, 97, 131, 142, 146, 151, 157, 161, 163, 166, 167, 168, 169, 170, 171, 172, 175, 176, 182, 196, 218, 223, 261, 265, 279, 280, 296, 303, 356, 374, 464, 528, 628, 846, 847, 858, 868, 880, 985, 986, 987, 993, 994, 1410, 1411, 1414, 1416, 1429, 1430, 1432], "lazyframeremot": [932, 988], "lazygroupbi": [908, 909, 936, 988], "lbl": [313, 318, 356], "ldf": [1, 964, 965, 967, 969, 972, 973, 974, 975, 976, 977, 978], "ldot": [519, 868, 1148, 1401], "le": [550, 718, 868, 1177, 1401], "lead": [16, 48, 97, 139, 146, 151, 172, 269, 297, 299, 306, 356, 416, 535, 538, 598, 699, 700, 745, 747, 797, 833, 852, 868, 919, 941, 942, 971, 988, 1033, 1228, 1243, 1302, 1304, 1349, 1351, 1401], "leap": [482, 492, 1104, 1118], "leap_year": 482, "learn": [318, 356], "least": [66, 112, 280, 356, 438, 439, 656, 721, 723, 793, 797, 799, 868, 1055, 1056, 1259, 1325, 1327, 1401, 1422], "leav": [6, 271, 323, 356, 924, 953, 988], "left": [17, 18, 42, 58, 175, 176, 177, 178, 244, 258, 259, 288, 325, 356, 462, 518, 519, 520, 521, 547, 549, 662, 675, 679, 681, 683, 685, 687, 690, 692, 694, 698, 771, 793, 801, 802, 806, 807, 809, 810, 815, 825, 826, 841, 855, 856, 858, 868, 909, 913, 914, 936, 954, 988, 1085, 1147, 1148, 1149, 1150, 1176, 1264, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1300, 1383, 1401, 1413, 1417, 1422], "left_clos": [462, 662, 868, 1085, 1264, 1401], "left_on": [258, 259, 325, 356, 913, 914, 954, 988], "left_right": [258, 325, 356, 913, 954, 988], "leftmost": [698, 868, 1300, 1401, 1424], "len": [14, 182, 186, 218, 257, 280, 333, 337, 342, 356, 455, 614, 625, 627, 665, 673, 798, 821, 825, 868, 892, 956, 961, 966, 971, 988, 993, 1078, 1275, 1401], "len_byt": [14, 447, 732, 733, 1065, 1336], "len_char": [446, 731, 1064, 1335], "length": [66, 67, 85, 148, 156, 162, 166, 180, 184, 242, 244, 288, 301, 356, 359, 429, 446, 461, 497, 599, 613, 626, 665, 669, 670, 673, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 707, 727, 731, 732, 734, 735, 738, 740, 751, 760, 794, 825, 826, 828, 829, 839, 842, 843, 844, 845, 859, 868, 883, 909, 930, 936, 944, 988, 1046, 1064, 1071, 1084, 1095, 1123, 1229, 1235, 1256, 1271, 1272, 1275, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1295, 1312, 1331, 1335, 1336, 1338, 1339, 1342, 1344, 1355, 1364, 1401, 1418, 1419, 1422], "leq": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "less": [55, 166, 259, 356, 532, 564, 612, 743, 858, 868, 914, 988, 1347, 1432], "letter": [231, 339, 350, 356, 522, 714, 722, 724, 726, 738, 758, 813, 868, 902, 968, 979, 988, 994, 1318, 1326, 1328, 1330, 1342, 1362, 1424], "level": [12, 42, 44, 45, 48, 50, 52, 147, 164, 166, 169, 170, 171, 237, 264, 276, 303, 308, 356, 360, 528, 868, 880, 946, 988, 1375, 1401, 1429], "lexic": [70, 994, 1068], "lf": [11, 49, 50, 51, 52, 61, 97, 142, 374, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 940, 942, 943, 944, 945, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 959, 960, 961, 966, 970, 988, 1418, 1429, 1432], "lf1": [847, 946, 988, 1414, 1416, 1430], "lf2": [847, 946, 988, 1414, 1416, 1430], "lf3": [988, 1414], "lf4": [988, 1414], "lf5": 988, "lf6": 988, "lf_other": [959, 988], "lib": [868, 1375, 1401], "librari": [1, 114, 148, 153, 156, 613, 868, 992, 1432], "life": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "lifetim": [206, 879, 1416], "light": [42, 356], "like": [37, 39, 41, 44, 45, 46, 47, 48, 65, 133, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 212, 223, 244, 251, 253, 258, 291, 296, 313, 314, 356, 359, 464, 470, 534, 576, 613, 631, 665, 721, 746, 747, 778, 828, 845, 864, 868, 886, 891, 896, 909, 988, 1092, 1206, 1266, 1325, 1390, 1401, 1406], "limit": [12, 13, 52, 53, 153, 154, 188, 234, 356, 424, 527, 533, 868, 904, 988, 1041, 1156, 1161, 1401, 1419, 1428], "line": [12, 22, 42, 151, 152, 156, 166, 242, 251, 253, 356, 359, 721, 1325, 1401, 1406], "line_termin": [39, 49, 356, 988], "linear": [222, 250, 282, 348, 356, 547, 548, 571, 617, 663, 686, 687, 795, 796, 840, 868, 895, 912, 931, 977, 988, 1086, 1174, 1175, 1201, 1265, 1287, 1288, 1401], "linearli": 826, "lineitem": [141, 152, 154], "link": 992, "list": [1, 15, 35, 41, 42, 58, 59, 61, 64, 65, 67, 73, 89, 106, 131, 132, 134, 135, 136, 138, 139, 141, 142, 145, 146, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 180, 181, 182, 186, 193, 194, 195, 201, 212, 219, 224, 228, 230, 231, 235, 241, 243, 244, 248, 256, 275, 278, 284, 288, 289, 290, 291, 294, 302, 309, 310, 318, 320, 321, 322, 324, 330, 335, 336, 356, 367, 374, 380, 407, 420, 421, 422, 462, 469, 481, 524, 530, 535, 544, 554, 613, 614, 626, 627, 655, 662, 668, 671, 677, 678, 680, 682, 684, 686, 689, 691, 693, 708, 709, 720, 722, 724, 726, 741, 761, 763, 764, 771, 790, 792, 795, 806, 807, 809, 810, 812, 820, 822, 826, 827, 828, 829, 845, 848, 850, 856, 864, 868, 893, 900, 902, 905, 908, 909, 933, 938, 945, 951, 952, 957, 959, 964, 965, 988, 993, 994, 1025, 1037, 1038, 1039, 1071, 1085, 1091, 1103, 1146, 1152, 1162, 1165, 1171, 1172, 1182, 1243, 1264, 1270, 1273, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1318, 1324, 1326, 1328, 1330, 1342, 1345, 1380, 1383, 1401, 1410, 1415, 1419, 1421, 1424, 1431, 1432], "list_catalog": 204, "list_namespac": 204, "list_of_seri": 829, "list_tabl": 204, "listitem": 142, "listtostructwidthstrategi": [605, 1235], "lit": [1, 381, 425, 549, 622, 638, 725, 794, 795, 801, 815, 839, 842, 858, 859, 868, 1156, 1401], "liter": [10, 11, 17, 18, 22, 39, 41, 43, 44, 48, 49, 50, 51, 52, 56, 153, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 185, 186, 187, 196, 199, 203, 265, 275, 294, 295, 299, 325, 330, 331, 356, 363, 364, 367, 381, 425, 444, 448, 451, 473, 495, 516, 517, 525, 532, 537, 539, 549, 564, 612, 622, 634, 636, 649, 650, 660, 669, 670, 713, 714, 715, 724, 725, 726, 736, 737, 738, 765, 766, 774, 783, 785, 787, 793, 794, 795, 796, 804, 805, 808, 821, 825, 827, 831, 833, 836, 846, 850, 852, 854, 858, 868, 904, 920, 938, 939, 942, 954, 957, 958, 988, 994, 1042, 1073, 1095, 1121, 1144, 1154, 1176, 1255, 1271, 1272, 1299, 1301, 1304, 1317, 1318, 1319, 1328, 1329, 1330, 1340, 1341, 1342, 1401, 1424], "littl": [290, 356, 429, 1046], "lmn": 994, "ln": [518, 519, 520, 521, 868, 1147, 1148, 1149, 1150, 1401, 1422], "ln_a": 1423, "load": [3, 5, 6, 135, 137, 148, 153, 155, 156, 162, 167, 168, 185, 187, 356, 868, 880, 988, 1432], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 156, "load_tabl": 156, "load_workbook": 156, "loader": [318, 356], "lobster": [725, 1329], "loc": [356, 360], "local": [4, 41, 153, 155, 167, 168, 171, 356, 510, 657, 658, 868, 1063, 1067, 1097, 1098, 1123, 1126, 1136, 1260, 1261, 1401, 1411], "localhost": 153, "localis": [497, 510, 1136], "locat": [42, 163, 166, 169, 171, 212, 232, 286, 316, 322, 356, 698, 868, 952, 988, 1153, 1162, 1299, 1300, 1401], "lock": 188, "log": [31, 60, 442, 515, 610, 636, 660, 773, 868, 1059, 1142, 1386, 1401, 1422], "log10": [868, 1401, 1422], "log10_a": 1423, "log16_a": 1423, "log1p": [868, 1401, 1422], "log1p_a": 1423, "log2": 1422, "logarithm": [608, 609, 610, 868, 1238, 1239, 1240, 1401, 1423], "logic": [66, 264, 342, 356, 359, 360, 382, 384, 464, 614, 771, 782, 783, 784, 785, 828, 829, 858, 868, 896, 901, 913, 932, 940, 971, 988, 1001, 1002, 1243, 1381, 1383, 1401, 1406], "london": [474, 478, 496, 1096, 1100, 1122], "london_timezon": [496, 1122], "london_to_amsterdam": [496, 1122], "long": [231, 271, 280, 323, 324, 356, 902, 924, 953, 988], "longer": [151, 152, 166], "look": [12, 244, 263, 356, 425, 613, 614, 828, 829, 868, 909, 988, 1042], "lookup": 864, "loop": [153, 614, 868], "lose": [471, 1093], "lossi": [151, 152, 166], "lossless": 56, "lot": 55, "love": [714, 738, 1318, 1342], "low": [19, 451, 662, 868, 1264, 1401], "low_memori": [151, 152, 161, 163, 166, 170, 171], "lower": [56, 153, 166, 222, 244, 282, 348, 356, 451, 549, 611, 639, 663, 667, 686, 687, 787, 806, 807, 809, 810, 825, 826, 840, 855, 856, 868, 895, 909, 931, 977, 988, 1073, 1086, 1176, 1241, 1265, 1268, 1287, 1288, 1389, 1401, 1419, 1422], "lower_bound": [244, 356, 451, 549, 868, 909, 988, 1073, 1176, 1389, 1401], "lowercas": [645, 756, 758, 1360, 1362, 1424], "lowest": [611, 868], "lru_cach": [264, 356, 614, 868, 1243, 1401], "lst": 181, "lt": [174, 528, 780, 868, 1401], "ltrim": 1422, "lyric": [714, 738, 1318, 1342], "lz4": [44, 45, 48, 50, 52, 356, 988], "lzo": [48, 52, 356, 988], "m": [73, 75, 258, 356, 470, 471, 473, 478, 479, 499, 501, 502, 513, 721, 750, 752, 753, 757, 808, 809, 810, 811, 817, 913, 988, 994, 1092, 1093, 1095, 1100, 1101, 1125, 1127, 1128, 1139, 1325, 1354, 1356, 1357, 1361, 1414, 1424, 1425], "m_2": [706, 868, 1311, 1401], "m_3": [706, 868, 1311, 1401], "m_i": [706, 868, 1311, 1401], "machin": 1432, "maco": 174, "made": [42, 153, 356, 374, 502, 754, 1128], "mai": [1, 10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 66, 74, 80, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 206, 222, 223, 230, 232, 244, 258, 259, 260, 264, 265, 288, 296, 303, 313, 315, 318, 325, 326, 356, 359, 360, 368, 369, 374, 446, 461, 462, 464, 469, 470, 471, 481, 483, 492, 497, 499, 510, 522, 543, 580, 613, 614, 625, 628, 662, 675, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 694, 724, 726, 731, 737, 754, 792, 794, 801, 802, 806, 807, 809, 810, 815, 825, 826, 828, 829, 841, 845, 855, 856, 868, 883, 890, 891, 895, 896, 901, 909, 913, 914, 915, 919, 920, 929, 930, 936, 940, 946, 954, 960, 961, 962, 971, 988, 994, 1064, 1068, 1084, 1085, 1086, 1091, 1092, 1093, 1103, 1105, 1118, 1123, 1125, 1136, 1146, 1153, 1171, 1210, 1243, 1264, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1328, 1330, 1333, 1335, 1379, 1382, 1384, 1401, 1406, 1432], "main": [154, 174, 891, 988], "maintain": [49, 50, 51, 52, 302, 356, 422, 606, 698, 709, 775, 790, 868, 895, 945, 988, 1039, 1236, 1300, 1387, 1401], "maintain_ord": [49, 50, 51, 52, 243, 258, 278, 280, 302, 321, 325, 326, 336, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 380, 422, 432, 437, 440, 442, 535, 538, 606, 614, 709, 773, 775, 790, 868, 891, 901, 908, 913, 930, 943, 945, 951, 954, 965, 967, 969, 972, 973, 974, 975, 976, 977, 978, 988, 1039, 1236, 1387, 1401], "maintainorderjoin": [258, 325, 356, 913, 954, 988], "major": [156, 313, 356], "make": [42, 66, 89, 132, 133, 137, 148, 151, 152, 155, 156, 157, 159, 163, 167, 272, 276, 283, 314, 326, 356, 359, 520, 521, 645, 646, 655, 668, 729, 742, 868, 925, 988, 1149, 1150, 1270, 1346, 1381, 1401], "malform": 151, "man": [739, 1343], "manag": [57, 98, 99, 203, 879, 880, 1416, 1429], "managed_shallow_clon": 203, "mandatori": [42, 356], "mango": [444, 448, 718, 744, 1061, 1066, 1322, 1348], "mani": [153, 154, 171, 232, 258, 356, 724, 726, 738, 913, 988, 1153, 1328, 1342, 1401, 1405], "manner": 153, "map": [52, 53, 55, 89, 134, 135, 142, 151, 152, 153, 154, 157, 158, 163, 165, 166, 169, 182, 215, 218, 236, 256, 264, 265, 285, 289, 290, 291, 293, 309, 356, 381, 497, 510, 613, 614, 638, 640, 641, 643, 645, 646, 669, 670, 738, 778, 828, 868, 887, 920, 934, 937, 988, 993, 994, 1086, 1123, 1136, 1243, 1271, 1272, 1342, 1390, 1401, 1411, 1413, 1414, 1429], "map_": 118, "map_batch": [368, 369, 374, 829, 868, 988], "map_column": 356, "map_el": [109, 264, 356, 369, 613, 781, 868, 1401], "map_field": [642, 644], "map_row": 356, "mapelementsstrategi": [614, 868], "mapping_strategi": [655, 868], "march": [499, 1125], "mariadb": 154, "mark": [42, 147, 356, 443, 868, 1060, 1401], "mark_area": [1401, 1406], "mark_attr": [356, 359, 1401, 1406], "mark_bar": [356, 359, 1401, 1406], "mark_lin": [356, 359], "mark_point": [356, 359], "markdown": [7, 22, 206], "marker": [42, 356], "mask": [171, 182, 186, 251, 253, 356, 426, 551, 553, 556, 561, 657, 658, 713, 716, 725, 868, 1043, 1157, 1176, 1177, 1178, 1181, 1184, 1190, 1260, 1261, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1301, 1317, 1320, 1329, 1392, 1401], "mass": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "massag": [271, 323, 356, 924, 953, 988], "match": [41, 42, 56, 66, 73, 97, 120, 132, 134, 135, 136, 138, 146, 151, 153, 160, 161, 163, 166, 170, 171, 175, 176, 177, 178, 212, 215, 234, 235, 258, 259, 265, 284, 289, 325, 356, 374, 429, 444, 448, 621, 622, 623, 669, 670, 688, 701, 713, 714, 715, 718, 721, 722, 724, 725, 726, 729, 730, 736, 737, 738, 744, 750, 752, 753, 845, 858, 864, 868, 887, 904, 913, 914, 920, 933, 954, 988, 994, 1046, 1061, 1066, 1145, 1271, 1272, 1289, 1317, 1318, 1319, 1322, 1325, 1326, 1328, 1329, 1330, 1333, 1334, 1340, 1341, 1342, 1348, 1354, 1356, 1357, 1401, 1424], "match_to_schema": [356, 988], "matches_overlap": [724, 726, 1330], "matches_supertyp": [234, 356, 904, 988], "materi": [146, 151, 157, 161, 163, 264, 291, 342, 356, 374, 890, 930, 971, 981, 988, 994, 1243, 1401], "materialis": [153, 256, 257, 289, 290, 356], "materialized_view": 203, "math": [1, 12, 62, 280, 356, 463, 550, 868, 1075, 1077, 1177, 1309, 1373, 1401, 1422, 1426, 1428], "mathemat": [774, 812, 868, 1422], "mathshortcut": [1, 62], "matplotlib": [174, 629, 930, 943, 988], "matter": [244, 256, 288, 290, 291, 310, 356, 675, 746, 747, 868, 909, 936, 988], "max": [11, 27, 42, 48, 52, 147, 222, 234, 243, 267, 280, 288, 356, 360, 457, 527, 550, 613, 655, 665, 669, 670, 675, 678, 679, 699, 743, 794, 806, 809, 831, 848, 868, 895, 904, 908, 936, 988, 1080, 1086, 1156, 1177, 1235, 1266, 1279, 1280, 1302, 1347, 1401, 1410, 1419, 1422], "max_a": [288, 356, 675, 868, 936, 988], "max_binary_s": 153, "max_col": [180, 182], "max_colname_length": [242, 356], "max_color": [42, 356], "max_data_s": 186, "max_elem": 1419, "max_horizont": [356, 830], "max_items_per_column": [242, 356], "max_level": 147, "max_siz": [54, 181, 182, 184, 186, 1432], "max_text_s": 153, "max_valu": 1432, "max_width": [605, 1235], "maxim": [343, 393, 868, 972, 1011, 1401], "maximum": [12, 28, 39, 48, 49, 52, 54, 74, 135, 138, 151, 152, 153, 156, 160, 161, 162, 166, 170, 172, 180, 181, 182, 184, 186, 242, 244, 266, 267, 356, 400, 447, 550, 569, 615, 647, 657, 665, 727, 732, 740, 751, 830, 831, 868, 909, 921, 988, 1018, 1065, 1106, 1177, 1199, 1244, 1252, 1260, 1266, 1331, 1333, 1336, 1344, 1355, 1401, 1418], "mb": [230, 356, 430, 1146, 1401], "md": 142, "md2": 142, "me": [714, 738, 758, 1318, 1342, 1362], "mean": [48, 52, 64, 131, 151, 152, 157, 163, 166, 169, 206, 222, 234, 243, 244, 259, 269, 280, 288, 326, 335, 356, 492, 497, 510, 524, 527, 532, 613, 614, 675, 679, 680, 681, 683, 685, 687, 690, 692, 694, 706, 712, 721, 728, 806, 807, 809, 810, 811, 828, 829, 833, 855, 856, 858, 868, 895, 904, 908, 909, 914, 919, 929, 936, 964, 988, 1086, 1118, 1123, 1136, 1152, 1156, 1243, 1280, 1281, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1311, 1316, 1325, 1332, 1401, 1418, 1419], "mean_horizont": [356, 832], "measur": [271, 323, 356, 360, 924, 953, 988], "measure_a": [356, 360], "measure_b": [356, 360], "median": [222, 280, 356, 527, 682, 683, 868, 895, 959, 988, 1086, 1283, 1284, 1401, 1422], "mediat": 1429, "medium": [42, 356], "megan": [272, 356, 925, 988], "melt": [323, 356, 953, 988], "member": [244, 356, 909, 988, 1182, 1401], "membership": [402, 572, 1020, 1202], "memori": [11, 16, 48, 52, 53, 54, 55, 64, 65, 66, 132, 133, 136, 137, 138, 151, 152, 153, 154, 155, 156, 157, 161, 163, 166, 167, 169, 170, 171, 210, 232, 264, 290, 291, 300, 314, 342, 356, 655, 666, 701, 868, 890, 891, 901, 930, 943, 963, 988, 1153, 1243, 1267, 1305, 1306, 1381, 1401], "memory_map": [157, 163, 169], "memory_resourc": 963, "merg": [41, 258, 259, 272, 356, 913, 914, 925, 988], "merge_sort": [356, 988], "messi": [721, 723, 1325, 1327], "met": 858, "meta": [100, 464, 719, 868, 1323], "metadata": [0, 48, 49, 50, 51, 52, 142, 164, 168, 192, 196, 356, 880, 988], "metastor": 197, "method": [4, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 130, 133, 142, 143, 144, 145, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 172, 179, 182, 186, 191, 197, 198, 200, 201, 206, 208, 213, 218, 222, 223, 226, 227, 232, 239, 243, 250, 256, 264, 271, 276, 282, 289, 290, 291, 299, 321, 330, 332, 337, 342, 348, 356, 370, 372, 373, 374, 379, 382, 383, 416, 451, 464, 476, 499, 502, 516, 517, 525, 532, 534, 537, 539, 547, 550, 564, 598, 612, 614, 632, 634, 636, 649, 650, 651, 654, 660, 663, 665, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 700, 714, 720, 724, 726, 738, 746, 747, 748, 749, 760, 766, 774, 776, 780, 781, 797, 828, 829, 840, 860, 861, 863, 864, 868, 869, 870, 873, 874, 875, 876, 877, 880, 883, 891, 895, 896, 898, 899, 912, 924, 929, 931, 942, 951, 957, 960, 962, 963, 966, 971, 977, 988, 993, 996, 1003, 1033, 1073, 1086, 1107, 1108, 1125, 1128, 1143, 1144, 1153, 1154, 1164, 1166, 1168, 1174, 1177, 1194, 1228, 1242, 1243, 1254, 1255, 1265, 1266, 1280, 1282, 1284, 1286, 1287, 1288, 1291, 1293, 1295, 1304, 1318, 1324, 1328, 1330, 1342, 1358, 1364, 1383, 1393, 1395, 1397, 1401, 1402, 1405, 1407, 1408, 1409, 1411, 1415], "metric": [53, 54, 55, 153], "micro": [498, 1124], "microsecond": [73, 75, 244, 256, 259, 288, 290, 291, 310, 326, 356, 492, 495, 497, 502, 505, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 808, 809, 810, 811, 854, 855, 856, 868, 909, 914, 930, 936, 988, 994, 1118, 1121, 1123, 1131, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "microsoft": [35, 42, 356], "mid_color": [42, 356], "midnight": 90, "midpoint": [222, 282, 348, 356, 663, 686, 687, 840, 868, 895, 931, 977, 988, 1086, 1265, 1287, 1288, 1401], "might": [53, 54, 55, 151, 152, 166, 188, 258, 280, 314, 323, 356, 614, 776, 868, 913, 945, 953, 988], "millennia": 1425, "millennium": 1425, "milli": [498, 1124], "millisecond": [244, 259, 288, 326, 356, 480, 487, 492, 497, 506, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 809, 810, 811, 825, 855, 856, 868, 909, 914, 936, 988, 994, 1118, 1123, 1132, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "milliseconds_diff": [505, 506, 508], "mimic": 795, "min": [42, 48, 52, 148, 222, 234, 274, 280, 288, 356, 458, 527, 655, 665, 675, 684, 685, 806, 809, 836, 846, 868, 895, 904, 936, 988, 1081, 1086, 1156, 1266, 1285, 1286, 1401, 1419, 1422, 1425, 1432], "min_a": [288, 356, 675, 868, 936, 988], "min_col": [180, 182], "min_color": [42, 356], "min_elem": 1419, "min_horizont": [356, 835, 846], "min_period": [461, 518, 520, 521, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 843, 844, 868, 1084, 1147, 1149, 1150, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1401], "min_sampl": [461, 518, 520, 521, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 843, 844, 868, 1084, 1147, 1149, 1150, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1401], "min_siz": [181, 182, 184, 186, 1432], "min_valu": 1432, "mincol": 180, "minim": [346, 394, 401, 570, 701, 709, 868, 975, 1012, 1019, 1200, 1247, 1305, 1401], "minimum": [48, 52, 180, 181, 182, 184, 186, 237, 273, 274, 356, 518, 520, 521, 633, 648, 658, 665, 835, 836, 868, 926, 988, 1112, 1147, 1149, 1150, 1253, 1261, 1266, 1401, 1418, 1432], "minu": [492, 651, 868, 1118], "minut": [244, 259, 288, 326, 356, 480, 484, 486, 491, 492, 495, 497, 498, 507, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 808, 809, 810, 811, 854, 855, 856, 868, 909, 914, 936, 988, 994, 1118, 1121, 1123, 1133, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "minutes_diff": 507, "mirror": [550, 868, 1177, 1401], "misc": 1416, "miscellan": 880, "mismatch": [66, 123, 161, 170, 175, 177], "miss": [56, 66, 151, 152, 163, 166, 171, 239, 265, 356, 424, 518, 520, 521, 533, 557, 558, 605, 868, 920, 988, 1041, 1147, 1149, 1150, 1161, 1401], "missing_column": [163, 171, 265, 356, 920, 988], "missing_struct_field": [56, 265, 356, 920, 988], "missing_utf8_is_empty_str": [151, 152, 166], "mix": [13, 259, 314, 356, 794, 847, 914, 946, 988, 994, 1086, 1401], "mixin": 1, "mkdir": [48, 49, 50, 51, 52, 53, 55, 356, 988], "mlnm": 485, "mm": [42, 356], "mn": 1424, "mno": [18, 22], "mnop": 1424, "mo": 811, "mocha": 994, "mod": [868, 1422], "mode": [40, 41, 42, 43, 49, 50, 51, 52, 175, 177, 280, 303, 356, 695, 722, 839, 842, 859, 868, 890, 901, 930, 943, 988, 1296, 1326, 1401, 1410, 1411, 1429], "model": [318, 356, 701, 868], "modif": 137, "modifi": [53, 54, 55, 151, 152, 166, 188, 206, 212, 232, 248, 255, 256, 328, 356, 396, 496, 513, 613, 614, 713, 721, 722, 725, 736, 737, 756, 758, 759, 828, 829, 868, 919, 988, 1003, 1122, 1139, 1153, 1243, 1317, 1325, 1326, 1329, 1340, 1341, 1360, 1362, 1363, 1401], "modul": [102, 110, 156, 867, 992, 994, 1432], "modulu": [634, 868], "moment": [48, 49, 50, 51, 52, 64, 65, 220, 356, 562, 706, 868, 890, 891, 901, 930, 943, 988, 1192, 1311, 1401], "mon": [356, 359, 1425], "mondai": [244, 356, 469, 481, 510, 512, 792, 909, 988, 1091, 1103, 1136, 1138], "monkei": [734, 735, 1338, 1339], "month": [244, 259, 288, 326, 356, 477, 489, 490, 492, 495, 497, 499, 502, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 805, 806, 807, 808, 809, 810, 811, 855, 856, 868, 909, 914, 936, 988, 1099, 1115, 1116, 1118, 1121, 1123, 1125, 1128, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "month_nam": [499, 502], "monthbegin": [490, 1116], "monthend": [489, 1115], "moos": 994, "more": [22, 42, 48, 52, 58, 66, 98, 99, 128, 132, 133, 134, 135, 136, 137, 138, 146, 148, 153, 154, 155, 156, 160, 161, 162, 163, 167, 168, 170, 175, 177, 182, 206, 208, 220, 222, 226, 227, 235, 255, 256, 264, 271, 276, 284, 289, 290, 292, 303, 313, 314, 318, 321, 323, 342, 356, 360, 383, 422, 446, 528, 532, 540, 562, 593, 606, 610, 614, 654, 655, 697, 706, 722, 731, 750, 752, 753, 775, 786, 798, 814, 820, 823, 832, 834, 837, 838, 848, 858, 864, 868, 895, 898, 899, 905, 924, 932, 933, 946, 951, 953, 963, 988, 992, 994, 996, 1039, 1064, 1086, 1167, 1168, 1192, 1223, 1236, 1243, 1298, 1311, 1326, 1335, 1354, 1356, 1357, 1379, 1381, 1387, 1401, 1416, 1417, 1427, 1430, 1431, 1432], "more_bi": [278, 302, 356, 709, 868, 945, 988], "more_column": [231, 322, 356, 522, 813, 868, 902, 952, 988, 994], "more_expr": [655, 790, 793, 794, 795, 796, 868], "more_nam": [761, 864], "most": [42, 132, 151, 152, 154, 166, 175, 176, 177, 178, 314, 356, 435, 436, 626, 635, 656, 670, 743, 868, 1052, 1053, 1248, 1259, 1272, 1347, 1381, 1401, 1413, 1429], "mostli": [308, 356, 528, 868], "move": [280, 291, 356, 469, 518, 519, 520, 521, 678, 680, 684, 691, 858, 868, 1091, 1147, 1148, 1149, 1150, 1279, 1281, 1285, 1292, 1401], "mr": 963, "mssql": [40, 356], "much": [264, 324, 342, 356, 446, 447, 580, 614, 731, 732, 828, 829, 868, 971, 1064, 1065, 1084, 1210, 1243, 1335, 1336, 1401], "mul": 868, "multi": [8, 42, 151, 152, 318, 356, 522, 721, 868, 994, 1325], "multi_fram": [42, 356], "multicolselector": 211, "multiindexselector": [211, 998], "multipl": [42, 55, 64, 65, 66, 115, 131, 151, 152, 154, 156, 157, 161, 162, 163, 166, 169, 170, 171, 180, 182, 186, 212, 224, 230, 232, 235, 243, 244, 248, 257, 260, 278, 280, 284, 291, 294, 302, 325, 330, 335, 356, 442, 580, 613, 619, 626, 635, 636, 655, 669, 671, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 709, 761, 773, 790, 798, 815, 828, 830, 835, 841, 848, 851, 858, 864, 868, 880, 890, 891, 897, 901, 905, 908, 909, 915, 930, 933, 938, 943, 945, 954, 957, 964, 971, 988, 1003, 1034, 1146, 1153, 1210, 1230, 1248, 1271, 1273, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1313, 1401, 1414, 1419], "multipli": [613, 677, 678, 680, 682, 684, 686, 689, 691, 693, 765, 868, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1401], "multithread": [302, 356, 709, 790, 868, 945, 988, 1034, 1230, 1313, 1401], "must": [35, 42, 76, 97, 134, 146, 148, 151, 155, 163, 166, 167, 168, 171, 172, 212, 222, 231, 244, 259, 260, 272, 280, 288, 289, 356, 462, 550, 605, 613, 614, 629, 662, 669, 670, 675, 738, 794, 801, 806, 807, 815, 826, 828, 829, 841, 858, 868, 895, 902, 909, 914, 915, 919, 925, 936, 943, 963, 988, 1085, 1086, 1177, 1243, 1264, 1271, 1272, 1342, 1401], "mutual": [289, 356], "my": [168, 172, 356, 359, 1401, 1406], "my_bucket": [932, 988], "my_column": 971, "my_column_": [320, 356], "my_column_0": [320, 356], "my_column_1": [320, 356], "my_column_2": [320, 356], "my_custom_aggreg": 829, "my_fil": 157, "my_holidai": [469, 481, 792, 1091, 1103], "my_larger_than_ram_fil": [49, 50, 51, 52, 988], "my_long_fil": 166, "my_struct": 850, "mydf": 166, "myrol": 154, "mysql": 154, "n": [1, 14, 15, 19, 27, 28, 39, 47, 49, 59, 60, 61, 62, 73, 75, 141, 146, 151, 152, 156, 161, 166, 182, 216, 232, 238, 244, 246, 256, 257, 262, 264, 290, 291, 292, 299, 304, 307, 310, 312, 327, 339, 341, 350, 356, 374, 386, 416, 421, 430, 432, 437, 440, 441, 442, 446, 447, 461, 465, 469, 471, 473, 479, 501, 513, 519, 525, 528, 536, 542, 566, 574, 581, 583, 593, 594, 598, 601, 603, 605, 607, 656, 659, 668, 689, 690, 693, 694, 697, 700, 706, 711, 727, 731, 732, 736, 737, 742, 743, 745, 746, 751, 753, 768, 772, 773, 774, 779, 781, 799, 808, 809, 810, 811, 817, 819, 839, 842, 843, 844, 846, 849, 853, 857, 859, 868, 888, 907, 909, 910, 918, 942, 947, 949, 955, 968, 970, 979, 988, 994, 1033, 1038, 1047, 1058, 1059, 1064, 1065, 1072, 1084, 1087, 1091, 1093, 1095, 1101, 1127, 1139, 1148, 1153, 1154, 1163, 1170, 1196, 1204, 1211, 1213, 1223, 1224, 1228, 1233, 1235, 1259, 1290, 1291, 1294, 1295, 1298, 1304, 1311, 1315, 1331, 1335, 1336, 1340, 1341, 1346, 1347, 1355, 1357, 1372, 1378, 1385, 1386, 1390, 1391, 1401, 1413, 1414, 1421, 1424, 1425, 1427, 1429, 1432], "n0": [421, 605], "n00": [1038, 1235], "n01": [1038, 1235], "n02": [1038, 1235], "n1": [42, 356, 421, 605], "n2": [1, 42, 356, 421], "n3": 1, "n_1": [528, 868], "n_2": [528, 868], "n_3": [528, 868], "n_bar": 1418, "n_bit": 1424, "n_byte": [430, 446, 447, 731, 732, 1424], "n_char": [446, 447, 731, 732, 1424], "n_chunk": [356, 1003, 1153, 1267, 1401], "n_column": 212, "n_elem": 1419, "n_even": 994, "n_field_strategi": [605, 1235], "n_film": 1410, "n_foo_uniqu": 1418, "n_kilobyt": 430, "n_row": [146, 149, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 212, 257, 356, 988], "n_thread": [151, 152], "n_uniqu": [356, 386, 868, 1401], "na": [315, 356, 744, 1382, 1401], "naiv": [473, 474, 753, 1095, 1096, 1357], "name": [1, 20, 24, 26, 34, 37, 39, 40, 42, 43, 49, 59, 60, 61, 62, 77, 89, 107, 132, 134, 135, 136, 137, 138, 142, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 177, 178, 179, 180, 182, 185, 186, 187, 192, 194, 195, 196, 197, 198, 200, 201, 212, 214, 215, 218, 219, 224, 225, 226, 227, 231, 235, 236, 239, 240, 242, 243, 254, 255, 256, 258, 259, 260, 264, 267, 269, 271, 272, 274, 278, 280, 284, 285, 289, 290, 291, 293, 294, 295, 302, 303, 306, 309, 311, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 341, 356, 360, 366, 367, 368, 381, 421, 425, 426, 428, 431, 442, 451, 462, 499, 502, 522, 528, 549, 557, 558, 559, 560, 605, 614, 619, 623, 625, 627, 631, 655, 662, 672, 695, 709, 722, 723, 736, 737, 738, 761, 763, 765, 773, 778, 782, 783, 784, 785, 786, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 813, 814, 819, 820, 823, 830, 831, 832, 833, 834, 835, 836, 837, 840, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 857, 858, 864, 868, 885, 887, 892, 893, 897, 898, 899, 902, 905, 908, 913, 914, 915, 924, 925, 929, 933, 934, 937, 938, 939, 945, 946, 950, 951, 952, 953, 954, 957, 958, 959, 960, 961, 964, 970, 988, 993, 994, 1000, 1038, 1059, 1072, 1085, 1125, 1128, 1145, 1235, 1264, 1269, 1325, 1326, 1327, 1340, 1341, 1365, 1368, 1376, 1377, 1382, 1386, 1390, 1401, 1406, 1411, 1412, 1413, 1414, 1415, 1416, 1428, 1429, 1432], "name_gener": [320, 356], "named_agg": [335, 964], "named_bi": [243, 356, 908, 988], "named_expr": [294, 295, 330, 331, 356, 765, 846, 850, 938, 939, 957, 958, 988], "named_fram": [1414, 1429], "nameless": 137, "namespac": [1, 153, 192, 194, 195, 196, 200, 355, 356, 359, 366, 761, 847, 867, 880, 986, 987, 992, 1401, 1406, 1432], "namespaceinfo": [194, 204], "nan": [137, 182, 210, 226, 227, 233, 234, 314, 315, 356, 467, 468, 516, 517, 526, 527, 537, 539, 547, 550, 557, 558, 559, 560, 564, 612, 615, 633, 647, 648, 649, 650, 677, 703, 774, 797, 868, 898, 899, 903, 904, 988, 1006, 1010, 1089, 1090, 1155, 1156, 1177, 1185, 1186, 1252, 1253, 1278, 1308, 1381, 1382, 1401, 1432], "nan_as_nul": 210, "nan_max": [868, 1401], "nan_min": [868, 1401], "nan_to_nul": [137, 356, 988, 1401], "nana": 1424, "nanmax": [647, 648, 868, 1252, 1253, 1401], "nanosecond": [56, 90, 244, 259, 288, 326, 356, 492, 497, 498, 508, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 809, 810, 811, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1124, 1134, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "nans_equ": [550, 868, 1177, 1401], "nansum": [677, 868, 1278, 1401], "nativ": [12, 40, 151, 153, 156, 157, 159, 163, 168, 202, 256, 264, 290, 291, 310, 314, 342, 356, 614, 828, 829, 847, 868, 874, 946, 971, 988, 992, 1243, 1381, 1401, 1405, 1429, 1432], "natur": [610, 868, 1240, 1401, 1417, 1423], "ndarrai": [136, 208, 235, 284, 314, 356, 535, 698, 868, 905, 933, 988, 996, 1162, 1299, 1300, 1381, 1401], "ndjson": [51, 161, 988], "ne": [650, 868, 1255, 1401], "ne_miss": [235, 284, 356, 868, 905, 933, 988, 1144, 1401], "nearest": [60, 222, 259, 282, 348, 356, 450, 531, 547, 663, 686, 687, 695, 840, 868, 895, 914, 931, 977, 988, 1070, 1086, 1160, 1174, 1265, 1287, 1288, 1401, 1423], "nearest_pow2": 60, "necessari": [39, 40, 49, 57, 99, 156, 168, 314, 356, 988, 1381, 1401], "need": [53, 54, 55, 66, 101, 110, 139, 151, 152, 154, 163, 166, 169, 171, 206, 244, 288, 291, 300, 356, 359, 605, 675, 701, 736, 737, 738, 811, 839, 842, 859, 868, 909, 936, 988, 994, 1305, 1340, 1341, 1342, 1358, 1401, 1406, 1432], "neg": [15, 72, 73, 74, 75, 151, 152, 157, 159, 163, 173, 246, 262, 288, 299, 301, 307, 333, 356, 416, 550, 598, 599, 659, 660, 675, 700, 707, 727, 740, 751, 868, 883, 936, 942, 944, 960, 961, 988, 994, 1033, 1170, 1177, 1196, 1228, 1229, 1262, 1304, 1312, 1331, 1344, 1355, 1372, 1401], "negat": [652, 868, 1257, 1401], "neither": [139, 156, 162, 292, 356, 421, 605, 1038, 1235], "nest": [57, 139, 147, 183, 184, 230, 356, 880, 994, 1146, 1401, 1429, 1432], "nesting_level": 183, "net": [722, 1326], "netherland": [259, 356, 914, 988], "netsuite_format": 199, "never": [39, 49, 153, 258, 259, 263, 289, 356, 913, 914, 988], "new": [40, 41, 42, 43, 54, 55, 166, 206, 211, 212, 238, 248, 249, 264, 276, 277, 280, 285, 320, 322, 324, 325, 330, 331, 356, 381, 473, 524, 534, 536, 547, 639, 640, 655, 669, 670, 674, 733, 736, 737, 742, 743, 761, 763, 864, 868, 880, 883, 907, 934, 952, 954, 957, 958, 971, 988, 998, 1000, 1095, 1152, 1163, 1208, 1256, 1269, 1271, 1272, 1276, 1340, 1341, 1346, 1347, 1365, 1368, 1377, 1401, 1429, 1431], "new_column": [151, 152, 156, 166], "new_dai": 495, "new_dat": 492, "new_df": [325, 356, 954, 988], "new_fil": [37, 39, 44, 45, 48, 356], "new_from_index": 1401, "new_id": [320, 356], "new_lf": [954, 988], "new_tabl": 1431, "new_valu": [801, 802, 815, 841], "new_york": 809, "newli": 58, "newlin": [47, 151, 152, 161, 166, 170, 356], "next": [20, 60, 244, 259, 288, 326, 356, 424, 469, 492, 497, 510, 665, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1041, 1091, 1118, 1123, 1136, 1266, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "next_batch": 152, "next_pow2": 60, "nfc": [733, 1337, 1424], "nfd": [733, 1337, 1424], "nfkc": [733, 1337, 1424], "nfkd": [733, 1337, 1424], "nfruit": 751, "nl": [469, 481, 792, 1091, 1103], "nnel_id": 139, "no1": 994, "no_default": [239, 356, 669, 670, 738, 868, 1271, 1272, 1342, 1401], "no_optim": [64, 890, 919, 930, 988], "nodataerror": [151, 152, 156, 162, 166], "nodd": [721, 1325], "node": [886, 890, 911, 919, 924, 930, 934, 988], "nodefault": [239, 356, 669, 670, 738, 868, 1271, 1272, 1342, 1401], "non": [4, 5, 39, 41, 42, 49, 58, 73, 74, 137, 148, 173, 214, 221, 257, 271, 288, 294, 295, 299, 319, 320, 323, 325, 330, 331, 356, 382, 384, 424, 441, 442, 446, 451, 455, 456, 469, 496, 533, 549, 550, 567, 568, 602, 620, 655, 656, 661, 665, 669, 670, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 715, 722, 729, 731, 736, 737, 738, 754, 758, 760, 765, 767, 772, 773, 778, 782, 783, 784, 785, 793, 794, 795, 796, 798, 800, 804, 811, 831, 833, 836, 843, 844, 846, 850, 851, 852, 868, 885, 894, 924, 936, 938, 939, 942, 950, 953, 954, 957, 958, 988, 994, 1001, 1002, 1016, 1017, 1036, 1041, 1058, 1059, 1064, 1073, 1078, 1079, 1086, 1091, 1122, 1161, 1176, 1177, 1197, 1198, 1232, 1235, 1243, 1259, 1263, 1271, 1272, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1304, 1319, 1326, 1335, 1340, 1341, 1362, 1364, 1371, 1381, 1385, 1386, 1390, 1401, 1421, 1429], "non_exist": [496, 1122], "non_numer": [39, 49, 356, 988], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 67, 70, 73, 74, 75, 76, 77, 85, 89, 98, 99, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 196, 197, 198, 200, 201, 202, 206, 208, 209, 212, 216, 221, 222, 226, 227, 233, 234, 235, 237, 239, 242, 244, 245, 250, 254, 258, 259, 261, 263, 264, 268, 271, 276, 277, 280, 284, 288, 289, 292, 296, 299, 301, 302, 308, 309, 311, 313, 314, 315, 318, 320, 321, 322, 323, 324, 325, 326, 337, 341, 356, 382, 384, 385, 397, 398, 399, 406, 407, 421, 424, 444, 446, 447, 448, 451, 455, 456, 457, 460, 462, 467, 468, 476, 492, 495, 496, 502, 517, 518, 519, 520, 521, 522, 525, 526, 527, 533, 540, 541, 543, 545, 547, 548, 549, 557, 558, 559, 560, 565, 567, 568, 575, 582, 584, 586, 593, 594, 595, 596, 597, 599, 605, 613, 614, 625, 626, 628, 629, 630, 632, 637, 650, 651, 652, 653, 655, 656, 661, 662, 665, 666, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 700, 701, 702, 703, 707, 708, 712, 713, 715, 717, 718, 719, 722, 725, 727, 728, 729, 730, 731, 732, 734, 735, 740, 742, 743, 744, 745, 746, 747, 750, 751, 752, 753, 755, 757, 760, 761, 762, 763, 764, 767, 771, 778, 783, 784, 785, 787, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 836, 841, 842, 843, 844, 850, 851, 852, 854, 855, 856, 858, 868, 888, 889, 891, 894, 895, 898, 899, 901, 903, 904, 905, 909, 912, 913, 914, 917, 919, 924, 927, 932, 933, 936, 940, 942, 943, 944, 945, 951, 952, 953, 954, 959, 962, 963, 966, 970, 971, 980, 981, 988, 993, 994, 996, 997, 1001, 1002, 1004, 1011, 1012, 1016, 1017, 1024, 1025, 1038, 1041, 1049, 1054, 1057, 1061, 1064, 1065, 1066, 1072, 1073, 1078, 1079, 1085, 1086, 1088, 1089, 1090, 1098, 1106, 1107, 1108, 1112, 1121, 1122, 1128, 1142, 1144, 1147, 1148, 1149, 1150, 1154, 1155, 1156, 1158, 1161, 1167, 1169, 1171, 1173, 1174, 1175, 1176, 1182, 1187, 1188, 1191, 1192, 1193, 1195, 1197, 1198, 1201, 1205, 1212, 1214, 1216, 1223, 1224, 1225, 1226, 1227, 1229, 1235, 1243, 1244, 1245, 1246, 1247, 1255, 1258, 1263, 1264, 1265, 1266, 1271, 1272, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1298, 1299, 1300, 1301, 1304, 1307, 1308, 1311, 1312, 1315, 1316, 1317, 1319, 1321, 1322, 1323, 1326, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1344, 1346, 1347, 1348, 1349, 1350, 1351, 1354, 1355, 1356, 1357, 1358, 1359, 1361, 1364, 1367, 1371, 1375, 1376, 1377, 1378, 1379, 1381, 1382, 1383, 1390, 1391, 1401, 1410, 1412, 1413, 1414, 1416, 1419, 1421, 1424, 1425, 1429], "nonexist": [496, 1122], "nor": [156, 162, 292, 356], "normal": [41, 147, 244, 356, 515, 562, 676, 680, 689, 693, 706, 778, 868, 909, 988, 994, 1142, 1192, 1277, 1311, 1390, 1401, 1422], "normalised_scor": 153, "norowsreturnederror": [289, 356], "north": 76, "not_": [330, 356, 858, 868, 957, 988, 994, 1401], "not_c": [330, 356, 957, 988], "notabl": 153, "notat": [13, 39, 42, 356], "note": [4, 12, 22, 41, 42, 48, 53, 54, 55, 57, 58, 65, 66, 72, 73, 75, 90, 98, 99, 132, 133, 134, 136, 138, 139, 147, 151, 152, 153, 154, 155, 156, 160, 161, 162, 166, 167, 168, 170, 172, 175, 177, 180, 182, 186, 188, 206, 210, 218, 220, 222, 223, 226, 227, 230, 233, 234, 235, 244, 245, 254, 255, 256, 258, 259, 264, 272, 276, 279, 280, 284, 285, 288, 289, 290, 291, 296, 299, 303, 310, 313, 315, 318, 320, 321, 323, 325, 326, 330, 332, 333, 356, 366, 416, 429, 444, 446, 447, 448, 451, 459, 460, 464, 467, 468, 474, 489, 490, 492, 497, 502, 510, 519, 526, 527, 532, 534, 541, 549, 550, 557, 558, 567, 568, 576, 580, 598, 602, 613, 614, 628, 629, 637, 640, 642, 644, 661, 669, 670, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 700, 702, 706, 712, 713, 714, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 736, 737, 738, 740, 745, 746, 747, 750, 751, 758, 760, 761, 767, 774, 783, 785, 792, 801, 806, 807, 809, 810, 811, 815, 825, 827, 828, 829, 839, 841, 842, 847, 851, 855, 856, 858, 859, 864, 868, 879, 883, 891, 895, 896, 898, 899, 903, 904, 905, 909, 914, 919, 925, 933, 934, 936, 940, 942, 943, 945, 946, 951, 953, 954, 957, 960, 961, 988, 992, 994, 1016, 1017, 1033, 1036, 1046, 1064, 1065, 1073, 1082, 1083, 1086, 1089, 1090, 1096, 1115, 1116, 1118, 1123, 1128, 1136, 1146, 1148, 1155, 1156, 1169, 1176, 1177, 1197, 1198, 1206, 1210, 1228, 1232, 1243, 1263, 1271, 1272, 1276, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1295, 1299, 1301, 1304, 1306, 1311, 1316, 1317, 1318, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1335, 1336, 1340, 1341, 1342, 1344, 1349, 1350, 1351, 1354, 1355, 1362, 1364, 1371, 1382, 1384, 1401, 1410, 1411, 1415, 1416, 1424, 1427, 1429], "noth": [22, 721, 730, 1325, 1334], "notic": [153, 235, 356, 905, 988, 1401], "notimplementederror": [11, 210], "now": [58, 70, 151, 156, 288, 314, 356, 469, 622, 754, 792, 936, 988, 1091, 1358, 1381, 1401], "np": [97, 136, 208, 212, 235, 284, 314, 356, 535, 613, 698, 868, 905, 933, 988, 996, 1162, 1180, 1183, 1185, 1186, 1299, 1300, 1401], "npt": [208, 996], "nr": [339, 350, 968, 979], "nth": [238, 356, 536, 743, 864, 868, 907, 988, 1163, 1347, 1401], "nthe": [721, 1325], "nthose": [721, 1325], "nu": 718, "null": [18, 39, 41, 48, 49, 52, 58, 66, 73, 134, 135, 138, 147, 151, 152, 161, 163, 166, 170, 171, 172, 179, 182, 186, 210, 214, 215, 216, 221, 222, 226, 227, 229, 233, 234, 235, 237, 250, 258, 263, 265, 268, 269, 270, 277, 280, 282, 284, 299, 302, 304, 305, 306, 309, 311, 314, 315, 319, 322, 325, 327, 337, 356, 374, 382, 384, 385, 395, 398, 399, 402, 406, 407, 416, 417, 424, 426, 429, 441, 442, 443, 444, 446, 447, 448, 451, 455, 456, 457, 460, 465, 467, 468, 492, 495, 496, 503, 504, 505, 506, 507, 508, 509, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 533, 540, 545, 547, 548, 554, 557, 558, 559, 560, 565, 567, 568, 572, 574, 575, 579, 580, 582, 584, 585, 586, 594, 595, 596, 597, 598, 600, 602, 614, 637, 650, 651, 652, 653, 655, 656, 661, 665, 666, 670, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 700, 701, 703, 708, 709, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 732, 734, 735, 740, 742, 743, 744, 750, 751, 753, 755, 760, 761, 762, 763, 764, 767, 771, 772, 773, 782, 783, 784, 785, 790, 793, 794, 795, 796, 798, 800, 804, 808, 813, 824, 827, 831, 833, 836, 843, 844, 850, 851, 852, 858, 868, 885, 888, 894, 895, 898, 899, 903, 904, 905, 912, 913, 920, 927, 933, 942, 945, 950, 952, 954, 959, 966, 988, 994, 1001, 1002, 1013, 1016, 1017, 1020, 1024, 1025, 1033, 1034, 1036, 1041, 1043, 1046, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1072, 1073, 1078, 1079, 1087, 1089, 1090, 1121, 1122, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1144, 1145, 1147, 1148, 1149, 1150, 1154, 1155, 1156, 1157, 1161, 1167, 1168, 1173, 1174, 1175, 1182, 1187, 1188, 1189, 1195, 1197, 1198, 1201, 1202, 1204, 1205, 1209, 1210, 1212, 1214, 1215, 1216, 1225, 1227, 1228, 1230, 1232, 1235, 1243, 1255, 1258, 1259, 1263, 1272, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1304, 1308, 1313, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1344, 1346, 1347, 1348, 1354, 1355, 1357, 1359, 1364, 1367, 1371, 1376, 1378, 1381, 1382, 1383, 1385, 1386, 1401, 1413, 1417, 1419, 1421, 1424, 1425, 1427, 1429, 1430, 1432], "null_behavior": [465, 574, 868, 1087, 1204, 1401], "null_count": [48, 52, 222, 227, 356, 461, 868, 895, 988, 1084, 1086, 1401], "null_equ": [229, 356, 1145, 1401], "null_on_oob": [406, 580, 582, 1024, 1210, 1212], "null_prob": [179, 182, 186], "null_valu": [39, 49, 151, 152, 166, 356, 988], "nullabl": [41, 356], "nullbehavior": [465, 574, 868, 1087, 1204, 1401], "nullif": 1422, "nulls_equ": [258, 356, 402, 554, 572, 868, 913, 988, 1020, 1182, 1202, 1401], "nulls_last": [302, 356, 395, 417, 600, 655, 708, 709, 790, 868, 945, 988, 1013, 1034, 1189, 1230, 1313, 1401], "num": [15, 42, 317, 356, 549, 868, 1176, 1401], "num_list_valu": 374, "num_row": 210, "num_sampl": [825, 826], "number": [12, 13, 14, 15, 16, 19, 27, 39, 40, 42, 44, 48, 49, 50, 51, 52, 57, 58, 72, 73, 74, 90, 99, 120, 132, 134, 135, 136, 138, 141, 147, 151, 152, 153, 154, 156, 160, 161, 162, 163, 164, 166, 169, 170, 171, 173, 180, 182, 185, 187, 188, 189, 196, 212, 214, 216, 221, 230, 231, 234, 242, 246, 247, 256, 257, 262, 275, 276, 288, 292, 299, 304, 307, 319, 324, 327, 329, 337, 339, 341, 350, 356, 374, 396, 409, 414, 416, 421, 424, 429, 433, 434, 435, 436, 438, 439, 441, 442, 447, 455, 461, 462, 465, 469, 472, 480, 483, 485, 487, 488, 498, 511, 512, 514, 518, 519, 520, 521, 525, 527, 533, 542, 557, 558, 565, 566, 574, 583, 586, 591, 593, 598, 601, 603, 605, 607, 655, 659, 662, 665, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 702, 711, 727, 731, 732, 736, 740, 742, 743, 751, 754, 768, 772, 773, 779, 792, 797, 798, 799, 811, 819, 824, 825, 826, 843, 844, 849, 853, 857, 868, 885, 888, 894, 902, 904, 910, 918, 930, 942, 947, 949, 950, 955, 956, 966, 968, 970, 979, 988, 993, 1027, 1031, 1033, 1038, 1041, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1059, 1065, 1072, 1078, 1084, 1085, 1087, 1091, 1094, 1102, 1105, 1110, 1113, 1114, 1124, 1137, 1138, 1140, 1146, 1147, 1148, 1149, 1150, 1154, 1156, 1161, 1170, 1195, 1196, 1204, 1213, 1216, 1221, 1223, 1228, 1233, 1235, 1249, 1250, 1264, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1304, 1307, 1315, 1331, 1333, 1335, 1336, 1340, 1344, 1346, 1347, 1355, 1358, 1372, 1385, 1386, 1391, 1401, 1417, 1420, 1423, 1432], "number_of_two": [403, 573], "numbers_decim": 754, "numer": [12, 18, 39, 42, 49, 155, 167, 215, 224, 259, 314, 315, 323, 324, 356, 374, 379, 429, 443, 451, 532, 549, 610, 634, 636, 660, 668, 701, 703, 723, 760, 766, 774, 825, 868, 880, 887, 897, 914, 953, 988, 994, 1046, 1060, 1073, 1086, 1176, 1270, 1305, 1308, 1327, 1364, 1381, 1401, 1423, 1432], "numeric_dtyp": 1432, "numeric_to_on": 374, "numericliter": [451, 825, 826, 868, 1073, 1401], "numpi": [97, 105, 136, 174, 208, 212, 220, 256, 290, 291, 310, 314, 315, 356, 550, 613, 647, 648, 677, 868, 988, 996, 1177, 1180, 1183, 1185, 1186, 1252, 1253, 1278, 1381, 1382, 1401], "nworld": 745, "o": [157, 169, 430, 441, 442, 461, 720, 772, 773, 868, 1047, 1058, 1059, 1084, 1324, 1349, 1385, 1386, 1401, 1414], "oauth": 168, "obj": 994, "object": [11, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 66, 89, 108, 132, 133, 134, 139, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 180, 182, 183, 209, 210, 212, 218, 223, 230, 243, 244, 259, 261, 288, 291, 296, 303, 313, 314, 315, 356, 374, 464, 628, 806, 807, 809, 810, 827, 847, 855, 856, 868, 880, 890, 896, 901, 909, 914, 917, 930, 936, 943, 946, 985, 988, 993, 994, 997, 1146, 1375, 1401, 1411, 1413, 1416, 1429, 1431], "observ": [258, 356, 462, 518, 519, 520, 521, 662, 868, 913, 988, 1085, 1147, 1148, 1149, 1150, 1264, 1401], "obvious": 763, "occur": [42, 64, 106, 115, 121, 260, 356, 403, 573, 635, 665, 868, 890, 901, 915, 930, 943, 988, 1021, 1203, 1248, 1266, 1381, 1401], "occurr": [146, 543, 545, 553, 556, 778, 868, 1171, 1173, 1181, 1184, 1390, 1401], "oct": 1424, "octet_length": 1422, "octob": [502, 1128, 1424], "od": [162, 880], "odbc": [40, 153, 356], "odd": 721, "odi": [724, 726, 1330], "off": [64, 65, 151, 152, 166, 258, 259, 356, 469, 481, 792, 890, 891, 901, 913, 914, 919, 930, 943, 988, 1091, 1103], "offer": [279, 356, 659, 868, 928, 988, 1425, 1429], "offic": [42, 356], "offset": [75, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 238, 244, 288, 301, 332, 333, 356, 469, 470, 478, 489, 490, 492, 497, 510, 536, 581, 599, 675, 707, 725, 726, 740, 753, 845, 868, 907, 909, 936, 944, 960, 961, 988, 1091, 1092, 1100, 1115, 1116, 1118, 1123, 1136, 1163, 1211, 1229, 1312, 1329, 1330, 1344, 1357, 1401, 1428], "offset_bi": 811, "often": [154, 206, 244, 288, 356, 403, 573, 668, 675, 868, 909, 936, 988, 1021, 1203, 1270, 1401, 1416, 1429], "ok": 605, "old": [41, 285, 356, 669, 670, 868, 934, 988, 1271, 1272, 1401], "old_tabl": 1431, "older": [48, 52, 356, 988], "oldw": 746, "omit": [29, 42, 135, 139, 156, 162, 180, 206, 276, 291, 313, 318, 356, 806, 809, 821, 822, 855, 856, 994, 1430, 1431], "onc": [64, 131, 151, 152, 188, 212, 264, 290, 292, 335, 356, 593, 614, 697, 748, 749, 868, 886, 964, 988, 1223, 1243, 1298, 1352, 1353, 1401, 1414], "one": [22, 39, 40, 42, 49, 58, 66, 112, 132, 134, 135, 136, 137, 138, 151, 152, 156, 160, 161, 162, 163, 166, 170, 171, 185, 187, 206, 215, 223, 226, 227, 234, 242, 243, 244, 256, 258, 260, 261, 271, 280, 288, 289, 290, 296, 299, 314, 317, 323, 336, 356, 380, 416, 462, 464, 527, 528, 532, 535, 538, 540, 598, 605, 610, 628, 655, 674, 675, 700, 708, 721, 722, 723, 738, 761, 793, 797, 799, 806, 809, 829, 845, 848, 858, 864, 868, 887, 896, 898, 899, 904, 905, 908, 909, 913, 915, 924, 932, 936, 940, 942, 953, 959, 965, 988, 1003, 1033, 1038, 1085, 1156, 1167, 1168, 1228, 1235, 1240, 1264, 1276, 1304, 1325, 1326, 1327, 1342, 1365, 1381, 1401, 1416, 1417, 1419, 1423, 1424, 1431], "oneormoredatatyp": [42, 180, 356], "ones": [679, 681, 683, 685, 687, 690, 692, 694, 868, 994, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "onf": [740, 1344], "onli": [1, 5, 12, 15, 22, 32, 39, 40, 42, 49, 57, 58, 63, 64, 66, 99, 131, 133, 146, 148, 151, 152, 153, 154, 156, 157, 159, 161, 163, 166, 169, 170, 171, 172, 175, 176, 177, 178, 182, 186, 196, 206, 226, 227, 230, 232, 235, 244, 245, 256, 259, 260, 263, 264, 280, 288, 290, 291, 310, 312, 313, 314, 325, 326, 342, 356, 380, 382, 384, 396, 450, 451, 464, 469, 481, 492, 500, 502, 522, 531, 541, 614, 621, 622, 640, 642, 644, 655, 667, 714, 724, 726, 738, 776, 792, 828, 829, 868, 893, 896, 898, 899, 900, 909, 914, 915, 929, 936, 937, 943, 954, 956, 971, 988, 994, 1001, 1002, 1003, 1070, 1073, 1091, 1103, 1118, 1128, 1146, 1153, 1160, 1169, 1243, 1268, 1318, 1328, 1330, 1342, 1375, 1378, 1381, 1401, 1410, 1413, 1429, 1430, 1432], "onlin": [232, 356, 1153, 1401], "ont": [724, 726, 1328, 1330], "onto": 182, "oof": [739, 1343, 1419, 1424], "op": [22, 151, 152, 186, 285, 356, 621, 668, 701, 868, 917, 934, 988, 1270, 1401], "opac": [356, 359, 1401, 1406], "opaqu": 971, "open": [42, 54, 149, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 223, 356, 464, 868, 896, 988], "openoffic": 162, "openpyxl": [156, 174], "oper": [4, 42, 57, 66, 99, 108, 111, 118, 125, 132, 134, 135, 136, 137, 138, 148, 153, 217, 232, 235, 237, 243, 249, 260, 261, 264, 272, 276, 278, 279, 280, 283, 284, 286, 288, 291, 292, 297, 299, 308, 314, 315, 320, 323, 324, 334, 335, 356, 379, 380, 383, 416, 456, 457, 458, 459, 460, 461, 516, 517, 532, 534, 537, 539, 564, 593, 594, 595, 596, 597, 598, 612, 613, 631, 634, 636, 637, 638, 649, 650, 651, 654, 655, 660, 667, 697, 700, 701, 766, 774, 781, 782, 784, 795, 796, 800, 812, 828, 829, 847, 868, 880, 889, 893, 895, 900, 905, 908, 913, 915, 924, 925, 933, 937, 941, 942, 946, 953, 956, 964, 988, 1033, 1074, 1079, 1080, 1081, 1082, 1083, 1084, 1143, 1144, 1153, 1164, 1166, 1194, 1223, 1224, 1225, 1226, 1227, 1228, 1242, 1254, 1255, 1268, 1298, 1304, 1340, 1375, 1380, 1381, 1382, 1401, 1420, 1428, 1429], "operand": [774, 868], "opp": 994, "oppos": 792, "opposit": [299, 356, 416, 598, 700, 868, 942, 988, 1033, 1228, 1304, 1401], "opt": [318, 356], "optim": [49, 50, 51, 52, 64, 65, 131, 146, 151, 157, 161, 163, 166, 168, 169, 170, 171, 256, 261, 279, 283, 290, 321, 356, 613, 828, 829, 868, 886, 890, 891, 901, 919, 930, 943, 951, 960, 961, 962, 971, 988, 1069, 1299, 1401], "optimis": [153, 264, 291, 342, 356, 988, 992, 1243, 1301, 1401, 1432], "optimist": 16, "option": [2, 3, 4, 5, 6, 7, 10, 32, 35, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 74, 76, 142, 151, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 179, 180, 181, 182, 185, 186, 187, 196, 197, 223, 239, 244, 254, 259, 265, 271, 296, 303, 309, 320, 323, 325, 356, 429, 464, 469, 562, 621, 622, 628, 655, 676, 677, 678, 680, 682, 684, 686, 689, 691, 693, 706, 714, 724, 726, 729, 738, 740, 754, 778, 850, 858, 868, 880, 890, 891, 896, 901, 909, 913, 914, 920, 924, 930, 940, 943, 946, 953, 954, 963, 988, 994, 1046, 1091, 1192, 1277, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1311, 1318, 1328, 1330, 1342, 1344, 1377, 1390, 1401, 1419, 1424, 1431], "optional_memb": [554, 868, 1182, 1401], "or_": 868, "oracl": 154, "orang": [219, 337, 338, 340, 341, 343, 344, 346, 348, 349, 356, 442, 773, 868, 966, 967, 969, 970, 972, 973, 975, 977, 978, 1424], "orc": 199, "order": [12, 42, 49, 50, 51, 52, 55, 58, 64, 70, 135, 151, 153, 166, 173, 175, 176, 177, 178, 214, 218, 219, 226, 227, 228, 235, 243, 244, 258, 260, 272, 278, 279, 280, 284, 288, 290, 292, 293, 297, 302, 313, 314, 319, 321, 325, 326, 356, 395, 417, 422, 441, 442, 467, 468, 528, 575, 593, 600, 606, 655, 660, 665, 675, 697, 698, 699, 708, 709, 739, 746, 747, 748, 749, 763, 772, 773, 775, 776, 778, 790, 847, 858, 868, 879, 885, 893, 898, 899, 900, 905, 908, 909, 913, 915, 924, 925, 933, 936, 937, 941, 945, 946, 950, 951, 954, 988, 992, 993, 994, 1013, 1034, 1039, 1058, 1059, 1068, 1089, 1090, 1157, 1189, 1205, 1223, 1230, 1236, 1262, 1266, 1274, 1298, 1300, 1302, 1313, 1343, 1368, 1385, 1386, 1387, 1388, 1390, 1401, 1410, 1413, 1419, 1428, 1429, 1432], "order_bi": [655, 868], "ordin": [493, 665, 868, 1119, 1266, 1401, 1430], "ordinal_dai": [477, 512], "org": [22, 44, 45, 133, 153, 154, 157, 159, 208, 209, 210, 220, 356, 629, 733, 943, 988, 996, 997, 1337], "orient": [59, 61, 106, 136, 138, 276, 356, 988, 1410], "origin": [58, 151, 152, 166, 226, 227, 235, 284, 321, 356, 467, 468, 496, 497, 510, 528, 575, 614, 638, 655, 667, 668, 669, 670, 671, 673, 715, 721, 730, 788, 789, 868, 898, 899, 905, 933, 951, 988, 1089, 1090, 1122, 1123, 1136, 1157, 1205, 1270, 1271, 1272, 1273, 1275, 1319, 1325, 1334, 1401], "orjson": 147, "orld": 1350, "orson": 147, "other": [1, 22, 38, 42, 48, 65, 66, 132, 150, 151, 152, 153, 156, 166, 171, 175, 176, 177, 178, 227, 229, 232, 235, 258, 259, 260, 271, 272, 280, 284, 289, 291, 294, 295, 318, 323, 325, 328, 330, 331, 354, 356, 359, 379, 383, 385, 395, 396, 451, 466, 502, 510, 516, 517, 528, 532, 537, 539, 549, 550, 554, 564, 571, 594, 595, 596, 597, 612, 613, 614, 618, 624, 634, 636, 649, 650, 654, 669, 670, 702, 709, 738, 765, 766, 771, 774, 781, 783, 785, 790, 793, 794, 795, 796, 804, 811, 828, 829, 831, 833, 836, 846, 850, 852, 868, 880, 883, 891, 905, 913, 914, 915, 919, 924, 925, 932, 933, 938, 939, 943, 953, 954, 957, 958, 959, 988, 994, 1003, 1073, 1088, 1128, 1136, 1143, 1144, 1145, 1153, 1164, 1166, 1177, 1182, 1194, 1201, 1224, 1225, 1226, 1227, 1242, 1243, 1254, 1255, 1271, 1272, 1383, 1392, 1400, 1401, 1406, 1416, 1429], "other_df": [258, 356], "other_lf": [913, 988], "otherwis": [40, 151, 153, 156, 163, 169, 181, 184, 188, 239, 264, 272, 291, 294, 313, 318, 342, 356, 374, 421, 426, 447, 451, 462, 518, 519, 520, 521, 605, 614, 625, 655, 659, 660, 662, 667, 703, 713, 716, 720, 725, 727, 732, 736, 737, 740, 751, 778, 782, 811, 814, 823, 828, 829, 858, 868, 925, 938, 971, 988, 993, 1038, 1043, 1065, 1073, 1085, 1147, 1148, 1149, 1150, 1235, 1243, 1262, 1264, 1268, 1299, 1301, 1308, 1317, 1320, 1324, 1329, 1331, 1336, 1340, 1341, 1344, 1355, 1390, 1401, 1421], "our": 211, "out": [8, 16, 40, 49, 50, 51, 52, 53, 54, 55, 113, 139, 142, 171, 174, 182, 186, 235, 288, 291, 356, 406, 426, 580, 582, 713, 716, 725, 858, 905, 936, 988, 1024, 1043, 1210, 1212, 1317, 1320, 1329, 1427], "outcom": [655, 868], "outer": [58, 325, 356, 954, 988], "outermost": 57, "outlin": 7, "output": [0, 8, 32, 39, 42, 44, 45, 46, 47, 48, 49, 53, 54, 55, 132, 137, 214, 222, 256, 263, 264, 269, 272, 278, 280, 290, 296, 306, 319, 326, 356, 374, 382, 384, 407, 429, 441, 442, 447, 462, 502, 567, 568, 584, 602, 605, 613, 614, 625, 628, 639, 661, 662, 669, 701, 712, 728, 729, 732, 767, 772, 773, 778, 782, 783, 784, 785, 795, 796, 797, 801, 802, 815, 825, 826, 828, 829, 833, 841, 851, 852, 858, 868, 880, 885, 895, 901, 919, 924, 925, 940, 950, 971, 988, 1001, 1002, 1016, 1017, 1025, 1036, 1046, 1058, 1059, 1065, 1085, 1128, 1197, 1198, 1214, 1232, 1243, 1263, 1264, 1316, 1332, 1336, 1371, 1385, 1386, 1390, 1401], "output_path": [629, 943, 988], "outsid": [56, 168, 171, 451, 868, 1073, 1401], "over": [52, 53, 54, 55, 66, 141, 151, 152, 156, 162, 166, 171, 182, 183, 214, 232, 255, 256, 257, 264, 272, 289, 290, 291, 303, 319, 320, 334, 342, 356, 360, 374, 441, 442, 461, 464, 519, 527, 613, 614, 625, 627, 628, 629, 630, 631, 639, 640, 665, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 772, 773, 801, 802, 815, 828, 829, 841, 847, 868, 885, 890, 901, 925, 930, 943, 946, 950, 963, 971, 985, 988, 994, 1058, 1059, 1084, 1148, 1153, 1243, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1288, 1291, 1292, 1293, 1295, 1385, 1386, 1401, 1429], "overflow": [443, 459, 460, 755, 767, 868, 887, 988, 1060, 1082, 1083, 1359, 1371, 1401], "overhead": [55, 57, 99, 166, 169, 170, 171], "overlap": [715, 722, 724, 726, 1319, 1326, 1328, 1330], "overrid": [1, 39, 42, 49, 132, 134, 135, 136, 137, 138, 151, 153, 154, 156, 160, 161, 162, 168, 170, 179, 180, 186, 188, 356, 988], "overridden": [42, 132, 134, 136, 138, 160, 161, 170, 188, 356, 988], "overview": [356, 374, 868, 880, 988, 1401, 1428, 1432], "overwrit": [16, 40, 41, 43, 52, 55, 132, 134, 135, 136, 138, 142, 147, 151, 152, 160, 161, 166, 170, 210, 325, 356, 381, 765, 868, 954, 988], "overwrite_schema": [41, 356], "ow": 745, "own": [858, 883, 1381, 1401, 1432], "p": [60, 263, 279, 356, 659, 850, 868, 928, 988, 994, 1329, 1331, 1414], "p13dt14h0": 502, "p1dt42": 502, "pa": [41, 132, 172, 356, 847, 993], "pa_tabl": 847, "pacif": [470, 1092], "pack": [276, 356], "packag": [34, 35, 36, 148, 153, 356, 360, 469, 481, 792, 1091, 1103], "pad": [734, 735, 760, 1338, 1339, 1364], "pad_end": [735, 1339], "pad_start": [734, 760, 1338, 1364], "page": [48, 52, 157, 163, 169, 171, 356, 374, 868, 880, 988, 1401, 1428], "pair": [132, 134, 135, 136, 138, 144, 160, 161, 170, 285, 356, 934, 988, 1432], "pairwis": [220, 356], "panda": [40, 133, 137, 147, 174, 235, 244, 284, 315, 321, 323, 356, 489, 490, 771, 847, 868, 905, 909, 933, 951, 953, 988, 1115, 1116, 1382, 1383, 1401, 1411, 1413, 1429], "pandas_df": 1429, "pane": [42, 356], "panic": 114, "pap": 1331, "papa": 727, "papai": [727, 1331], "papaya": [727, 740, 751, 1331, 1344, 1355], "parallel": [64, 66, 141, 154, 163, 171, 244, 259, 261, 279, 295, 331, 356, 576, 778, 858, 868, 909, 913, 914, 939, 958, 971, 988, 1084, 1206, 1390, 1401], "parallelis": [264, 342, 356, 1243, 1401], "parallelstrategi": [163, 171], "param": [42, 132, 134, 135, 136, 138, 151, 152, 160, 161, 166, 170, 181, 182, 186, 289, 356, 988], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 85, 89, 97, 100, 106, 115, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 194, 195, 196, 210, 211, 212, 214, 215, 216, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 269, 271, 272, 275, 276, 278, 279, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 339, 341, 342, 348, 350, 356, 374, 379, 381, 382, 383, 384, 385, 395, 402, 403, 406, 407, 416, 417, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 441, 442, 443, 444, 448, 451, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 469, 471, 473, 474, 479, 481, 492, 495, 496, 497, 498, 499, 501, 502, 510, 513, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 547, 548, 549, 550, 554, 562, 564, 566, 571, 572, 573, 574, 576, 578, 580, 581, 582, 583, 584, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 612, 613, 614, 621, 622, 628, 629, 630, 634, 636, 639, 640, 641, 642, 643, 644, 649, 650, 654, 655, 656, 659, 660, 662, 663, 665, 667, 668, 669, 670, 671, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 760, 761, 763, 765, 766, 768, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 868, 885, 887, 888, 890, 891, 895, 896, 897, 898, 901, 902, 903, 904, 905, 907, 908, 909, 910, 913, 914, 915, 918, 919, 920, 924, 925, 928, 929, 930, 931, 932, 933, 934, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 963, 964, 968, 970, 971, 977, 979, 988, 993, 994, 998, 1000, 1001, 1002, 1003, 1013, 1020, 1021, 1024, 1025, 1033, 1034, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1058, 1059, 1060, 1061, 1066, 1072, 1073, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1091, 1093, 1095, 1096, 1101, 1103, 1118, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1136, 1139, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1153, 1154, 1155, 1156, 1157, 1161, 1162, 1163, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1182, 1189, 1192, 1196, 1201, 1202, 1203, 1204, 1206, 1208, 1210, 1211, 1212, 1213, 1214, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1233, 1234, 1235, 1236, 1243, 1255, 1259, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1307, 1311, 1312, 1313, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1337, 1338, 1339, 1340, 1341, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1361, 1364, 1365, 1368, 1372, 1375, 1376, 1377, 1378, 1379, 1381, 1382, 1385, 1386, 1387, 1390, 1391, 1392, 1401, 1410, 1411, 1412, 1413, 1414, 1416, 1421, 1424, 1429], "parameter": 154, "parameteris": 153, "parametr": 880, "paramount": [919, 988], "parent": [42, 77, 237, 356], "parenthes": 20, "parquet": [48, 52, 53, 54, 55, 163, 164, 165, 171, 199, 356, 880, 988], "parquetcompress": [48, 356], "parquetfieldoverwrit": [52, 988], "parquetmetadata": [48, 52, 356, 988], "pars": [39, 49, 150, 151, 152, 154, 156, 161, 162, 163, 166, 169, 170, 171, 214, 243, 294, 295, 299, 302, 319, 330, 331, 335, 356, 442, 451, 549, 655, 669, 670, 709, 729, 738, 755, 765, 773, 783, 785, 790, 793, 794, 795, 796, 804, 817, 831, 833, 836, 846, 848, 850, 852, 858, 868, 885, 908, 938, 939, 942, 945, 950, 957, 958, 964, 988, 1059, 1073, 1176, 1271, 1272, 1304, 1333, 1358, 1359, 1386, 1401, 1410], "parseerror": [755, 1359], "parser": [151, 156], "part": [55, 132, 156, 206, 211, 313, 318, 356, 655, 722, 742, 743, 868, 959, 988, 998, 1326, 1346, 1347, 1424, 1425], "part_idx": 145, "parti": [613, 868], "partial": [135, 151, 166, 356, 988], "particip": [42, 356], "particular": [41, 151, 156, 157, 159, 214, 230, 319, 356, 441, 442, 772, 773, 868, 885, 950, 988, 1058, 1059, 1146, 1385, 1386, 1401], "partit": [48, 53, 54, 55, 154, 163, 167, 169, 171, 172, 257, 278, 356, 655, 868, 880], "partition_bi": [48, 152, 257, 356, 655, 868], "partition_chunk_size_byt": [48, 356], "partition_col": [48, 154, 356], "partition_df": 152, "partition_index": 198, "partition_num": 154, "partition_on": 154, "partition_rang": 154, "partitionbykei": [54, 55, 144, 145], "partitioned_object": [48, 356], "partitioningschem": [49, 50, 51, 52, 988], "partitionmax": 54, "partitionmaxs": [53, 55, 143], "partitionpart": [53, 54, 144, 145], "pass": [34, 35, 36, 38, 40, 41, 42, 48, 49, 50, 51, 52, 58, 64, 65, 70, 106, 131, 132, 134, 147, 148, 150, 153, 154, 156, 163, 166, 169, 171, 172, 175, 177, 180, 182, 184, 186, 214, 220, 224, 243, 244, 246, 259, 262, 263, 278, 279, 280, 285, 288, 294, 299, 302, 307, 315, 318, 319, 326, 330, 335, 356, 416, 442, 469, 479, 481, 492, 496, 502, 525, 546, 598, 613, 614, 629, 655, 659, 669, 670, 675, 700, 709, 738, 745, 746, 747, 754, 773, 782, 790, 792, 817, 828, 829, 850, 858, 864, 868, 885, 890, 891, 897, 901, 908, 909, 911, 914, 919, 928, 930, 934, 936, 938, 942, 943, 945, 950, 957, 963, 964, 971, 988, 993, 1033, 1059, 1091, 1101, 1103, 1122, 1128, 1154, 1170, 1196, 1228, 1243, 1271, 1272, 1304, 1342, 1349, 1350, 1351, 1358, 1372, 1382, 1386, 1401, 1414, 1429], "pass_nam": [614, 868], "pass_name_to_appli": [148, 868], "password": [151, 154, 157, 159], "past": [38, 356, 919, 988], "pat": [725, 1329], "patch": 76, "path": [3, 6, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 143, 145, 148, 149, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 223, 296, 356, 464, 628, 629, 632, 699, 868, 896, 940, 943, 988, 992, 1302, 1334, 1401, 1432], "pathlib": [37, 39, 44, 45, 48, 166, 356], "pattern": [102, 151, 152, 156, 157, 161, 163, 166, 169, 170, 171, 256, 356, 444, 448, 623, 713, 714, 715, 718, 721, 722, 723, 724, 725, 726, 736, 737, 738, 744, 883, 971, 994, 1061, 1066, 1299, 1301, 1317, 1318, 1319, 1322, 1325, 1326, 1327, 1328, 1329, 1330, 1340, 1341, 1342, 1348, 1401, 1424], "paya": 751, "pc": [932, 988], "pct": [182, 665, 868], "pct_chang": [868, 1401], "pct_valid": [665, 868], "pd": [133, 137, 771, 847, 868, 1382, 1383, 1401, 1411, 1429], "pd_df": 137, "pd_frame": 847, "pd_seri": 137, "pdsh": [141, 152], "pea": 727, "peak": [290, 356, 657, 658, 868, 1260, 1261, 1401], "peak_max": [868, 1401], "peak_min": [868, 1401], "pear": [727, 740, 751, 1331, 1344, 1355], "pearson": [220, 356, 562, 676, 706, 797, 868, 1192, 1277, 1311, 1401, 1418], "penalti": [750, 752, 753, 1354, 1356, 1357], "per": [16, 39, 42, 49, 148, 156, 180, 182, 214, 242, 265, 276, 277, 280, 295, 302, 319, 331, 345, 347, 348, 356, 406, 442, 576, 578, 580, 582, 614, 709, 773, 778, 790, 868, 885, 920, 939, 945, 950, 958, 974, 976, 977, 988, 1024, 1059, 1206, 1210, 1212, 1386, 1390, 1401], "per_partition_sort_bi": [53, 54, 55], "percent": [656, 868, 1259, 1401], "percentag": [179, 182, 186, 656, 868, 1259, 1401], "percentil": [222, 356, 665, 868, 895, 988, 1086, 1401], "perform": [40, 48, 50, 52, 58, 104, 109, 111, 116, 118, 125, 133, 151, 152, 153, 157, 161, 163, 166, 168, 169, 170, 171, 210, 235, 243, 244, 258, 259, 260, 264, 283, 284, 288, 290, 291, 314, 342, 356, 432, 437, 440, 446, 447, 532, 613, 614, 655, 675, 714, 724, 726, 731, 732, 738, 750, 752, 753, 828, 829, 868, 905, 909, 913, 914, 915, 933, 936, 945, 960, 961, 988, 1049, 1054, 1057, 1064, 1065, 1243, 1318, 1328, 1330, 1335, 1336, 1342, 1354, 1356, 1357, 1381, 1401], "perhap": [320, 356], "period": [151, 152, 166, 244, 288, 356, 497, 518, 520, 521, 656, 675, 806, 807, 809, 810, 855, 856, 868, 909, 936, 988, 1123, 1147, 1149, 1150, 1259, 1401], "persist": 1416, "phase": [40, 324, 356], "philadelphia": [736, 737], "phone": [758, 1362], "physic": [57, 70, 99, 151, 152, 259, 280, 356, 374, 771, 868, 886, 913, 914, 943, 988, 1383, 1401], "pi": [12, 463, 868, 1075, 1077, 1309, 1373, 1401, 1422, 1426], "pick": [183, 858], "pickl": [464, 868, 896, 988], "pip": [469, 481, 792, 1091, 1103], "pipe": [356, 868, 929, 988], "pipe_with_schema": [928, 988], "pipelin": [156, 318, 356], "pitfal": 116, "pivot": [324, 356, 994], "pivot_long": [323, 356, 953, 988], "pivot_wid": [280, 356], "pivotagg": [280, 356], "pixel": [42, 356], "pk": [515, 868, 1142, 1401], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 99, 103, 106, 107, 108, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 188, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 363, 364, 366, 367, 368, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 868, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 988, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1165, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1401, 1406, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1432], "pl_frame": 847, "place": [12, 13, 39, 49, 137, 172, 206, 212, 225, 232, 248, 249, 280, 286, 291, 302, 328, 356, 360, 395, 407, 417, 584, 600, 708, 709, 790, 868, 945, 988, 1003, 1013, 1025, 1034, 1153, 1214, 1230, 1267, 1313, 1401], "placehold": 816, "plai": [14, 796], "plain": [901, 932, 988], "plan": [64, 131, 146, 259, 261, 356, 464, 868, 886, 890, 896, 901, 913, 914, 929, 932, 940, 943, 988, 1431], "plan_stag": [943, 988], "plan_typ": [932, 988], "plane": [788, 789], "planner": 729, "planstag": [943, 988], "plantypeprefer": [932, 988], "platform": 174, "ple": 1424, "pleas": [137, 153, 154, 235, 244, 284, 356, 360, 519, 798, 811, 868, 905, 909, 933, 988, 1148, 1401], "plenti": 994, "plot": [356, 930, 943, 988, 1401], "plu": [462, 610, 868, 1085, 1240, 1264, 1401, 1423], "plugin": [0, 868, 880], "plugin_path": 148, "point": [10, 12, 13, 33, 34, 35, 36, 39, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 78, 79, 80, 131, 142, 143, 144, 145, 146, 147, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 226, 233, 244, 260, 261, 265, 303, 313, 318, 325, 356, 359, 360, 368, 369, 374, 450, 461, 462, 467, 469, 481, 497, 498, 526, 531, 532, 543, 557, 558, 593, 614, 662, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 694, 695, 697, 754, 792, 794, 825, 826, 845, 868, 890, 891, 898, 901, 903, 909, 915, 919, 920, 929, 930, 934, 946, 954, 962, 988, 994, 1068, 1070, 1084, 1085, 1089, 1091, 1103, 1123, 1124, 1155, 1160, 1171, 1223, 1264, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1296, 1298, 1379, 1384, 1401, 1406, 1429], "pointer": [230, 356, 1146, 1401], "poison": [647, 648, 868, 1252, 1253, 1401], "pola": 356, "polar": [1, 204, 356, 359, 360, 374, 867, 868, 874, 880, 988, 992, 993, 994, 1401, 1405, 1406, 1428, 1429, 1431], "polars_df": 1429, "polars_engine_affin": [49, 50, 51, 52, 64, 65, 890, 891, 901, 930, 943, 988], "polars_file_cache_ttl": [161, 166, 169, 170], "polars_hypothesis_profil": [185, 187], "polars_max_thread": 188, "polars_seri": 1429, "polars_verbos": [890, 901, 930, 943, 988], "polarsdatafram": 210, "polarsdataset": [318, 356], "polarsdatatyp": [67, 77, 85, 151, 152, 166, 179, 180, 181, 182, 183, 186, 215, 264, 313, 318, 356, 429, 443, 522, 613, 614, 669, 670, 729, 801, 802, 813, 815, 827, 828, 829, 839, 841, 842, 859, 864, 868, 887, 988, 994, 1046, 1060, 1243, 1271, 1272, 1333, 1401], "polarsintegertyp": [140, 755, 787, 821, 822, 1359], "polarstemporaltyp": [750, 1354], "polarstyp": 66, "pool": [16, 65, 188, 189, 891, 988], "poor": 153, "pop2": [259, 356, 914, 988], "popul": [259, 356, 914, 988], "port": [40, 151, 153, 154, 157, 159, 356], "pos_a": 1424, "posit": [42, 149, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 198, 211, 224, 231, 243, 278, 294, 295, 299, 302, 322, 330, 331, 335, 356, 416, 518, 520, 521, 522, 598, 655, 660, 662, 700, 709, 723, 736, 737, 755, 765, 788, 789, 790, 793, 794, 795, 796, 813, 846, 850, 864, 868, 897, 902, 908, 938, 939, 942, 945, 952, 957, 958, 964, 988, 994, 1033, 1147, 1149, 1150, 1228, 1262, 1264, 1304, 1327, 1359, 1401, 1430], "position": 1401, "possibl": [42, 48, 52, 106, 108, 134, 135, 138, 151, 156, 172, 179, 182, 186, 243, 256, 263, 264, 290, 321, 342, 356, 611, 613, 614, 625, 677, 743, 777, 828, 829, 868, 890, 901, 908, 930, 943, 945, 951, 988, 1243, 1278, 1347, 1401], "post": [58, 76, 932, 988], "postgr": 154, "postgresql": [40, 153, 154, 356, 655, 868, 1427], "potenti": [116, 118, 148, 166, 169, 170, 256, 289, 291, 356, 638, 736, 737, 893, 895, 900, 937, 956, 988, 1340, 1341], "pow": [868, 1401, 1422], "pow_n": 60, "power": [848, 1262, 1401, 1423], "powersofn": 60, "pre": [55, 662, 839, 842, 859, 868, 1264, 1401], "pre_execution_queri": 154, "preced": [182, 994], "precis": [12, 13, 39, 42, 49, 56, 74, 153, 256, 290, 291, 310, 313, 318, 356, 471, 825, 988, 994, 1093, 1358], "pred1": 858, "pred2": 858, "predefin": [280, 356], "predic": [41, 64, 146, 166, 169, 170, 171, 172, 215, 235, 254, 259, 260, 284, 289, 356, 443, 528, 578, 780, 815, 858, 868, 890, 901, 905, 914, 915, 919, 930, 933, 934, 943, 960, 961, 988, 1157, 1208, 1299, 1301, 1401], "predicate_pushdown": [64, 890, 901, 919, 930, 943, 962, 988], "predict": [283, 326, 356], "prefer": [151, 152, 156, 157, 161, 163, 166, 187, 214, 232, 256, 263, 264, 289, 290, 319, 342, 356, 441, 442, 522, 614, 661, 767, 772, 773, 851, 858, 868, 885, 950, 988, 992, 994, 1058, 1059, 1153, 1243, 1263, 1371, 1385, 1386, 1401, 1411, 1432], "prefilt": 171, "prefix": [41, 151, 152, 166, 206, 356, 381, 431, 448, 502, 623, 639, 642, 643, 645, 646, 744, 747, 748, 760, 868, 994, 1048, 1066, 1348, 1352, 1364], "prefix_": 642, "prefix_a": 642, "prefix_b": 642, "prefix_field": [640, 644], "presenc": [814, 823, 994], "present": [135, 182, 239, 356, 554, 629, 746, 747, 858, 868, 943, 988], "preserv": [42, 226, 227, 235, 243, 258, 260, 264, 284, 314, 315, 325, 356, 467, 468, 469, 489, 490, 528, 575, 655, 669, 703, 720, 868, 898, 899, 905, 913, 915, 933, 954, 988, 1089, 1090, 1091, 1157, 1205, 1271, 1308, 1324, 1382, 1401], "pressur": [52, 151, 152, 161, 163, 166, 170, 171, 701, 868, 988, 1305, 1401], "presum": [613, 868], "prev_pow2": 60, "prevent": [314, 356, 381, 459, 460, 638, 767, 868, 988, 1082, 1083, 1371, 1401], "preview": [242, 356], "previou": [55, 60, 206, 356, 359, 469, 656, 763, 868, 1091, 1259, 1401, 1406], "previous": [2, 3], "price": [356, 359, 1432], "primari": [156, 992, 1429, 1432], "primarili": [1, 883], "primit": [41, 356, 554, 868], "print": [9, 12, 13, 14, 15, 17, 18, 19, 21, 22, 27, 29, 30, 152, 174, 175, 177, 228, 242, 243, 257, 261, 312, 334, 356, 368, 546, 630, 806, 809, 868, 890, 911, 988, 994, 1182, 1378, 1401, 1432], "print_and_return": 368, "prior": [137, 356, 359, 1401, 1406], "prioriti": 183, "probabl": [515, 662, 868, 1142, 1264, 1401], "process": [16, 39, 49, 50, 51, 52, 64, 65, 151, 152, 153, 166, 188, 290, 356, 890, 891, 901, 930, 943, 988], "process_index": [313, 356], "produc": [2, 3, 97, 146, 182, 186, 215, 258, 356, 403, 443, 573, 625, 825, 828, 868, 913, 919, 988, 1021, 1203], "product": [58, 220, 258, 356, 459, 466, 868, 913, 988, 1082, 1088, 1401], "profil": [34, 185, 187, 890, 988], "profile_nam": 34, "programmat": [222, 356, 895, 988], "progress": [74, 80], "project": [64, 146, 166, 168, 169, 170, 171, 708, 709, 868, 890, 901, 919, 930, 934, 943, 988], "projection_pushdown": [64, 890, 901, 919, 930, 943, 962, 988], "prompt": 139, "propag": [402, 407, 517, 554, 572, 584, 647, 648, 650, 712, 728, 795, 796, 868, 1020, 1025, 1144, 1182, 1202, 1214, 1252, 1253, 1255, 1316, 1332, 1401], "propagate_nan": 797, "proper": [260, 356, 915, 988], "properti": [41, 42, 52, 197, 200, 201, 210, 218, 219, 228, 236, 247, 293, 298, 329, 333, 356, 359, 360, 892, 893, 900, 937, 956, 961, 988, 993, 994, 1141, 1159, 1251, 1303, 1401, 1406, 1432], "proport": [778, 868, 1390, 1401], "protocol": [41, 133, 153, 154, 210, 356], "prototyp": 864, "provid": [10, 33, 34, 35, 36, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 151, 152, 154, 155, 156, 161, 163, 164, 166, 167, 168, 169, 170, 171, 182, 186, 196, 212, 235, 239, 254, 259, 284, 303, 313, 356, 359, 426, 427, 502, 522, 543, 605, 716, 717, 721, 729, 730, 746, 747, 748, 749, 817, 850, 868, 880, 890, 901, 905, 914, 930, 933, 943, 946, 963, 985, 988, 994, 1043, 1044, 1128, 1171, 1191, 1243, 1320, 1321, 1325, 1333, 1334, 1379, 1401, 1414, 1421, 1424, 1429, 1432], "provis": 881, "proxi": 994, "prune": [163, 169, 171, 919, 988], "psycopg2": 153, "pt0": 502, "public": [154, 356, 374, 868, 880, 988, 1401, 1428], "pulp": 1410, "pure": [42, 146, 356, 613, 614, 828, 829, 868, 919, 988, 1243, 1401], "purpos": [637, 868, 988], "push": [151, 157, 161, 163, 166, 169, 170, 171, 172, 215, 356, 443, 868], "pushdown": [64, 146, 890, 901, 919, 930, 934, 943, 960, 961, 988, 1299, 1301, 1401], "put": [39, 49, 76, 356, 360, 988], "pwd": 153, "py": 168, "pyarrow": [41, 48, 56, 132, 137, 151, 154, 155, 157, 159, 163, 167, 172, 174, 308, 314, 315, 356, 847, 880, 993, 1375, 1381, 1382, 1401, 1411, 1413, 1429], "pyarrow_opt": [48, 155, 163, 167, 356], "pyarrow_t": 1429, "pycapsul": [132, 133, 209, 993, 997], "pycapsuleinterfac": [133, 209, 997], "pydant": 174, "pyiceberg": [43, 168, 174, 356], "pyodbc": [40, 356], "pyodbc_uri": [40, 356], "pyspark": 188, "pytest": [175, 177], "python": [0, 34, 35, 36, 44, 45, 76, 87, 102, 133, 151, 152, 157, 159, 172, 174, 175, 177, 210, 256, 264, 290, 291, 310, 342, 356, 464, 469, 473, 481, 532, 613, 614, 723, 792, 806, 807, 809, 810, 855, 856, 868, 874, 896, 971, 988, 992, 993, 1091, 1095, 1103, 1106, 1107, 1108, 1112, 1243, 1327, 1380, 1401, 1405, 1428], "pythondatatyp": [67, 85, 215, 356, 864, 887, 988, 994], "pythonliter": [1004, 1049, 1054, 1057, 1158, 1193, 1244, 1245, 1246, 1247, 1299, 1401], "pytimezon": 994, "pytorch": [318, 356, 1384, 1401], "q": [291, 356, 850, 1401, 1406, 1414], "q1": [42, 356], "q2": [42, 356], "q3": [42, 356], "q4": [42, 356], "qcut": [462, 868, 1085, 1401], "qhoo": 1432, "qmark": [153, 154], "qqr": 994, "quad": [519, 868, 1148, 1401], "qualifi": [40, 356], "quantifi": [722, 1326], "quantil": [356, 662, 686, 687, 868, 988, 1264, 1287, 1288, 1401, 1418], "quantile_cont": 1422, "quantile_disc": 1422, "quantilemethod": [222, 282, 348, 356, 663, 686, 687, 840, 868, 895, 931, 977, 988, 1086, 1265, 1287, 1288, 1401], "quarter": [244, 259, 288, 326, 356, 492, 497, 510, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1136, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "queri": [11, 49, 50, 51, 52, 53, 54, 55, 64, 65, 97, 131, 153, 154, 157, 166, 169, 170, 171, 232, 261, 279, 303, 356, 730, 847, 880, 890, 891, 901, 930, 932, 943, 946, 960, 961, 962, 963, 971, 980, 988, 1153, 1243, 1334, 1401, 1410, 1411, 1413, 1417, 1428, 1430, 1431], "queryoptflag": [49, 50, 51, 52, 64, 65, 131, 890, 891, 901, 930, 943, 988], "quick": [864, 1086, 1401, 1432], "quit": [259, 356, 914, 988], "quot": [39, 40, 49, 151, 152, 154, 166, 356, 758, 988, 1362], "quota_project_id": 36, "quote_char": [39, 49, 151, 152, 166, 356, 988], "quote_plu": 154, "quote_styl": [39, 49, 356, 988], "quotes_titl": 758, "quotient": 1423, "r": [151, 152, 166, 356, 620, 659, 715, 720, 721, 722, 723, 736, 737, 868, 994, 1319, 1324, 1325, 1326, 1327, 1340, 1341, 1355, 1414, 1424], "r1": 66, "r2": 66, "r3": 66, "rab": [713, 739, 1317, 1343, 1419], "rad": 1426, "radian": [463, 788, 868, 1422], "radix": [755, 1359], "rai": [788, 789], "raini": [736, 737, 1340, 1341], "rais": [1, 11, 17, 18, 22, 41, 56, 66, 103, 104, 107, 108, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 151, 152, 156, 162, 163, 166, 171, 175, 177, 210, 212, 215, 239, 265, 280, 289, 314, 356, 406, 426, 443, 469, 495, 496, 580, 582, 625, 660, 662, 670, 713, 716, 725, 750, 752, 753, 755, 757, 808, 827, 868, 920, 929, 963, 988, 1024, 1043, 1091, 1121, 1122, 1210, 1212, 1262, 1264, 1272, 1317, 1320, 1329, 1354, 1356, 1357, 1359, 1361, 1381, 1401], "raise_if_empti": [151, 152, 156, 162, 166], "raise_if_undetermin": 625, "raise_on_fail": 963, "raker": 147, "ram": [49, 50, 51, 52, 988], "ran": [148, 613, 828, 829, 868], "randn": 97, "random": [42, 44, 97, 157, 173, 180, 245, 292, 356, 541, 593, 665, 697, 702, 868, 880, 1169, 1223, 1266, 1298, 1307, 1401], "randomli": 181, "rang": [19, 42, 153, 154, 222, 230, 244, 257, 356, 386, 463, 469, 477, 481, 488, 493, 494, 495, 497, 510, 511, 547, 787, 792, 795, 805, 806, 807, 808, 809, 810, 821, 822, 825, 826, 845, 854, 855, 856, 868, 895, 909, 988, 994, 1086, 1091, 1099, 1103, 1114, 1119, 1120, 1121, 1123, 1136, 1137, 1146, 1259, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1424], "rank": [395, 576, 790, 797, 812, 868, 1013, 1206, 1401], "rankmethod": [665, 868, 1266, 1401], "rare": [470, 1092], "rather": [259, 356, 534, 630, 662, 674, 760, 868, 914, 988, 1264, 1276, 1364, 1401], "raw": 154, "raw_output": [629, 943, 988], "raw_valu": 144, "re": [239, 244, 255, 321, 323, 356, 489, 490, 499, 502, 909, 951, 953, 988, 1115, 1116, 1125, 1128, 1429], "reach": [54, 734, 735, 760, 1338, 1339, 1364], "read": [10, 38, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 196, 223, 232, 356, 359, 464, 534, 868, 896, 932, 988, 1153, 1401, 1406], "read_arrow_batches_from_odbc": 153, "read_clipboard": [38, 356], "read_csv": [150, 156, 166], "read_csv_batch": 141, "read_csv_opt": 156, "read_databas": [97, 154], "read_database_uri": 153, "read_excel": 162, "read_ndjson": 160, "read_od": 156, "read_opt": 156, "read_parquet": 171, "read_tabl": 163, "readabl": 864, "reader": [48, 52, 141, 146, 151, 152, 157, 159, 161, 163, 168, 356, 988], "reader_overrid": 168, "readi": 981, "readthedoc": [42, 356], "real": [722, 1326], "realli": [461, 714, 738, 868, 1084, 1318, 1342, 1401], "realloc": [161, 166, 169, 170, 232, 356, 1153, 1401], "rearrang": [264, 356], "reason": [188, 222, 356, 613, 868, 895, 988], "receiv": [58, 153, 166, 263, 264, 279, 342, 356, 614, 659, 868, 928, 929, 988, 1432], "recent": [175, 176, 177, 178, 314, 356, 656, 670, 868, 1259, 1272, 1381, 1401, 1413, 1429], "rechunk": [66, 132, 133, 137, 151, 152, 155, 157, 159, 161, 163, 166, 167, 169, 170, 171, 232, 356, 868, 1071, 1153, 1165, 1249, 1401], "recognis": [11, 17, 18, 22, 994], "recommend": [42, 165, 188, 222, 256, 261, 279, 356, 613, 614, 828, 829, 845, 868, 886, 895, 988, 994], "record": [39, 45, 49, 147, 159, 172, 356, 988], "record_batch": [257, 356], "recordbatch": [132, 257, 356, 847, 1411, 1413, 1429], "recurs": [48, 49, 50, 51, 52, 356, 518, 520, 521, 868, 988, 1147, 1149, 1150, 1401], "red": [57, 98, 99, 342, 778, 868, 971, 1390, 1401], "redempt": 1410, "redshift": 154, "redshift_format": 199, "reduc": [52, 151, 152, 161, 163, 166, 169, 170, 171, 290, 343, 344, 346, 349, 356, 701, 802, 815, 868, 972, 973, 975, 978, 988, 1245, 1263, 1305, 1371, 1401], "reduct": [237, 356], "ref": [721, 723, 1325, 1327], "refer": [0, 34, 42, 102, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 220, 223, 356, 360, 374, 464, 499, 502, 578, 665, 721, 736, 737, 750, 752, 753, 757, 868, 896, 988, 1125, 1128, 1208, 1266, 1340, 1341, 1354, 1356, 1357, 1361, 1401], "referenc": [42, 356, 613, 736, 737, 763, 868, 1340, 1341, 1411, 1429], "refin": 153, "reg": 147, "regard": [151, 605, 797], "regardless": [137, 214, 243, 259, 319, 356, 442, 474, 730, 773, 858, 868, 885, 914, 950, 988, 1059, 1096, 1334, 1386, 1401], "regex": [100, 522, 620, 621, 623, 713, 715, 721, 722, 723, 725, 736, 737, 761, 813, 868, 994, 1317, 1319, 1325, 1326, 1327, 1329, 1340, 1341], "regexp_lik": 1422, "region": [42, 168, 356], "region_nam": 34, "regist": [1, 53, 54, 55, 59, 60, 61, 62, 146, 148, 185, 187, 303, 356, 868, 946, 988, 992, 1410, 1411, 1413, 1414, 1415, 1416, 1429, 1431], "register_dataframe_namespac": [1, 60, 61, 62], "register_expr_namespac": [1, 59, 61, 62], "register_glob": [1412, 1414, 1416, 1429], "register_io_sourc": 992, "register_lazyframe_namespac": [1, 59, 60, 62], "register_mani": [1412, 1413, 1416], "register_plugin": 868, "register_plugin_funct": 868, "register_series_namespac": [1, 59, 60, 61], "registr": [303, 356, 847, 880, 946, 988, 1416, 1429], "regrid": [547, 868], "regular": [140, 256, 289, 290, 326, 333, 356, 522, 713, 714, 715, 719, 721, 722, 723, 724, 725, 726, 736, 737, 738, 792, 813, 858, 864, 868, 961, 988, 994, 1317, 1318, 1319, 1323, 1325, 1326, 1327, 1328, 1329, 1330, 1340, 1341, 1342, 1427], "reinterpret": [868, 1401], "rel": [42, 53, 54, 55, 148, 154, 155, 167, 168, 175, 176, 177, 178, 356, 492, 518, 520, 521, 550, 778, 868, 1118, 1147, 1149, 1150, 1177, 1390, 1401], "rel_tol": [175, 176, 177, 178, 550, 868, 1177, 1401], "relat": [139, 153, 206, 371, 736, 737, 994, 1340, 1341, 1417], "releas": [65, 258, 356, 614, 868, 891, 913, 988, 1432], "release_year": 1410, "relev": 66, "reli": [258, 356, 913, 988], "reliabl": [98, 99], "remain": [53, 151, 152, 166, 226, 227, 230, 235, 250, 280, 284, 356, 467, 468, 528, 547, 548, 575, 669, 742, 743, 868, 898, 899, 905, 912, 919, 933, 988, 1089, 1090, 1146, 1157, 1174, 1175, 1205, 1271, 1346, 1347, 1401, 1416], "remaind": [743, 1347, 1423], "remap": 101, "remot": [97, 151, 152, 157, 159, 988], "remov": [4, 48, 52, 151, 152, 164, 166, 210, 224, 235, 265, 311, 356, 522, 614, 639, 745, 746, 747, 748, 749, 754, 813, 868, 897, 905, 920, 988, 1349, 1350, 1351, 1352, 1353, 1376, 1401, 1431], "removes_pronoun": 738, "removesuffix": 639, "renam": [1, 44, 45, 135, 139, 151, 152, 156, 157, 159, 163, 166, 169, 170, 171, 175, 176, 177, 178, 189, 214, 243, 244, 258, 280, 288, 294, 295, 308, 319, 326, 330, 331, 335, 337, 356, 381, 442, 461, 518, 520, 521, 534, 631, 632, 639, 640, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 763, 765, 773, 843, 844, 846, 850, 868, 885, 908, 909, 913, 936, 938, 939, 950, 957, 958, 964, 966, 988, 1000, 1084, 1145, 1147, 1149, 1150, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1329, 1368, 1375, 1377, 1401, 1429], "rename_field": [742, 743, 1346, 1347], "render": [629, 943, 988], "render_as_str": 153, "reoconstruct": [291, 356], "reorder": [265, 356, 920, 988], "repeat": [55, 146, 157, 169, 374, 666, 668, 839, 859, 868, 1270, 1401], "repeat_bi": [868, 1401], "replac": [40, 41, 43, 151, 152, 166, 233, 234, 286, 320, 323, 330, 331, 356, 359, 473, 496, 613, 614, 670, 737, 738, 753, 868, 953, 957, 958, 988, 1095, 1122, 1272, 1299, 1301, 1341, 1342, 1357, 1401, 1406, 1422], "replace_al": [736, 1271, 1340, 1401], "replace_column": 356, "replace_strict": [669, 868, 1271, 1401], "replace_time_zon": [470, 476, 478, 1097, 1098, 1126], "replace_with": [738, 1342], "replic": [771, 868, 1383, 1401], "report": [153, 230, 356, 733, 1146, 1337, 1401], "repr": [139, 444, 448, 502, 1061, 1066, 1128], "repres": [39, 42, 43, 49, 72, 73, 75, 86, 90, 95, 132, 134, 136, 137, 138, 153, 280, 303, 304, 313, 314, 327, 334, 356, 374, 447, 532, 557, 558, 601, 607, 613, 711, 727, 732, 736, 737, 740, 751, 779, 782, 799, 811, 813, 827, 828, 829, 838, 843, 844, 849, 857, 864, 868, 946, 947, 955, 988, 994, 1065, 1299, 1315, 1331, 1336, 1340, 1341, 1344, 1355, 1381, 1391, 1401, 1429], "represent": [12, 46, 47, 72, 73, 75, 90, 139, 296, 312, 356, 444, 446, 447, 448, 472, 477, 480, 483, 484, 485, 486, 487, 488, 491, 493, 494, 498, 511, 512, 514, 628, 771, 868, 901, 917, 940, 988, 1061, 1064, 1065, 1066, 1067, 1094, 1099, 1102, 1104, 1105, 1109, 1110, 1111, 1113, 1114, 1117, 1119, 1120, 1124, 1137, 1138, 1140, 1378, 1383, 1401, 1420], "request": 36, "requested_schema": [209, 997], "requir": [1, 34, 35, 36, 41, 42, 58, 66, 137, 142, 153, 154, 175, 176, 177, 178, 191, 220, 226, 289, 313, 314, 315, 318, 356, 422, 444, 448, 518, 520, 521, 606, 655, 679, 681, 683, 685, 687, 690, 692, 694, 698, 701, 750, 752, 753, 775, 791, 793, 797, 799, 842, 868, 883, 893, 898, 899, 900, 945, 956, 988, 1039, 1145, 1147, 1149, 1150, 1236, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1300, 1305, 1340, 1354, 1356, 1357, 1381, 1382, 1387, 1401], "require_al": 994, "require_http": 191, "required_cast": [929, 988], "rerais": [65, 891, 988], "rerun": [232, 356, 1153, 1401], "resampl": [244, 356, 909, 988], "reset": [4, 206], "reset_index": [137, 244, 356, 909, 988], "reshap": [280, 314, 356, 577, 794, 868, 1207, 1401], "resolv": [148, 235, 356, 473, 892, 893, 900, 929, 937, 956, 988], "resourc": [963, 992], "respect": [42, 151, 152, 166, 175, 176, 177, 178, 265, 280, 356, 714, 724, 726, 738, 920, 988, 994, 1318, 1328, 1330, 1342, 1384, 1401], "respons": [154, 272, 356, 925, 988], "rest": [758, 1362, 1424], "restor": [206, 356, 359, 1401, 1406], "restore_default": 206, "restrict": [32, 743, 1347], "result": [15, 39, 46, 47, 48, 49, 50, 51, 52, 58, 66, 136, 137, 138, 153, 154, 156, 166, 169, 171, 172, 186, 232, 235, 244, 245, 258, 259, 260, 276, 280, 284, 288, 291, 296, 297, 299, 313, 314, 315, 326, 333, 335, 341, 356, 469, 497, 499, 502, 510, 518, 519, 520, 521, 525, 532, 541, 549, 562, 604, 613, 628, 655, 660, 662, 669, 670, 671, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 700, 720, 737, 741, 742, 753, 774, 778, 801, 802, 806, 808, 809, 810, 811, 826, 827, 828, 829, 839, 842, 843, 844, 847, 858, 859, 868, 886, 890, 895, 905, 909, 913, 914, 915, 919, 930, 933, 936, 940, 941, 942, 961, 964, 970, 981, 982, 988, 994, 1003, 1123, 1125, 1128, 1136, 1147, 1149, 1150, 1153, 1154, 1169, 1176, 1192, 1234, 1243, 1262, 1264, 1271, 1272, 1273, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1302, 1304, 1324, 1345, 1346, 1357, 1381, 1382, 1390, 1401, 1411, 1417, 1424, 1429, 1430, 1432], "resultset": 153, "retain": [235, 284, 356, 905, 933, 988], "retri": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 196, 356, 988], "retriev": [191, 192, 196, 239, 313, 356, 400, 401, 569, 570, 761, 838, 1018, 1019, 1199, 1200, 1365, 1379, 1401, 1417], "return": [1, 5, 6, 10, 32, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 97, 109, 112, 120, 128, 131, 132, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 188, 189, 196, 208, 211, 214, 216, 219, 220, 221, 225, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 242, 243, 244, 246, 247, 248, 252, 254, 255, 256, 257, 258, 261, 262, 264, 265, 267, 269, 274, 275, 276, 278, 279, 280, 285, 288, 289, 290, 291, 292, 296, 303, 306, 307, 313, 314, 315, 318, 319, 320, 321, 326, 329, 330, 331, 337, 339, 341, 342, 345, 350, 356, 361, 368, 382, 384, 387, 388, 389, 390, 391, 392, 395, 396, 400, 401, 402, 404, 406, 407, 409, 420, 425, 426, 427, 428, 429, 430, 431, 441, 442, 446, 447, 452, 453, 454, 455, 456, 462, 463, 469, 470, 472, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 519, 524, 532, 535, 536, 538, 542, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 565, 566, 569, 570, 572, 577, 580, 582, 583, 584, 586, 593, 603, 604, 611, 613, 626, 628, 629, 630, 635, 659, 661, 662, 664, 668, 669, 670, 671, 673, 674, 697, 698, 703, 704, 705, 712, 713, 715, 716, 717, 719, 720, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 739, 740, 741, 742, 743, 751, 755, 760, 767, 768, 769, 770, 772, 773, 774, 776, 777, 778, 781, 782, 787, 788, 789, 790, 791, 792, 793, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 814, 815, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 839, 841, 842, 845, 846, 847, 850, 851, 853, 854, 855, 856, 858, 859, 868, 883, 885, 888, 890, 891, 893, 894, 895, 900, 901, 907, 909, 910, 913, 917, 918, 919, 920, 928, 929, 930, 934, 936, 940, 943, 949, 950, 951, 956, 957, 958, 966, 968, 970, 974, 979, 981, 988, 993, 994, 996, 998, 1001, 1002, 1003, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1024, 1025, 1027, 1037, 1039, 1042, 1043, 1044, 1046, 1047, 1058, 1059, 1063, 1064, 1065, 1067, 1072, 1078, 1079, 1085, 1086, 1091, 1092, 1094, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1146, 1148, 1152, 1153, 1158, 1163, 1170, 1171, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1207, 1208, 1210, 1212, 1213, 1214, 1216, 1223, 1233, 1234, 1241, 1243, 1248, 1257, 1263, 1264, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1298, 1300, 1308, 1316, 1317, 1319, 1320, 1321, 1323, 1324, 1325, 1326, 1327, 1329, 1330, 1331, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1343, 1344, 1345, 1346, 1347, 1355, 1359, 1364, 1371, 1372, 1375, 1382, 1385, 1386, 1388, 1389, 1390, 1392, 1401, 1410, 1411, 1415, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1427, 1429, 1430, 1431, 1432], "return_as_str": [242, 356, 630], "return_dtyp": [42, 264, 356, 368, 374, 613, 614, 669, 670, 781, 801, 802, 815, 828, 829, 841, 868, 1243, 1271, 1272, 1401], "return_typ": [313, 318, 356], "returns_scalar": [148, 613, 614, 801, 802, 815, 828, 829, 841, 868], "reus": [64, 206, 890, 901, 930, 943, 988], "reusabl": 206, "rev": [260, 356, 915, 988], "revers": [214, 230, 319, 356, 442, 456, 457, 458, 459, 460, 639, 641, 643, 773, 794, 800, 868, 885, 950, 988, 1059, 1079, 1080, 1081, 1082, 1083, 1386, 1401, 1419, 1422], "reverse_": 641, "reverse_a": 641, "reverse_b": 641, "revert": [7, 9, 12], "rfc": 151, "rhap": [724, 726, 1330], "rhapsodi": [724, 726, 1330], "right": [9, 12, 17, 18, 20, 29, 42, 74, 151, 152, 175, 176, 177, 178, 244, 258, 259, 288, 325, 356, 462, 518, 519, 520, 521, 549, 594, 595, 596, 597, 662, 675, 679, 681, 683, 685, 687, 690, 692, 694, 698, 706, 793, 806, 807, 809, 810, 825, 826, 855, 856, 858, 868, 909, 913, 914, 936, 954, 988, 1085, 1147, 1148, 1149, 1150, 1176, 1224, 1225, 1226, 1227, 1264, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1300, 1311, 1401, 1417, 1422], "right_left": [258, 325, 356, 913, 954, 988], "right_on": [258, 259, 325, 356, 913, 914, 954, 988], "rightmost": [698, 868, 1300, 1401, 1424], "rld": [745, 747, 1351], "rle": [674, 868, 1276, 1401], "rle_id": [673, 868, 1401], "rle_id_a": [674, 868], "rle_id_ab": [674, 868], "rmm": 963, "rn": [151, 152, 166], "role": [34, 154], "rolearn": 10, "rolesessionnam": 10, "roll": [244, 356, 469, 489, 490, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 795, 843, 844, 868, 909, 988, 1091, 1115, 1116, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1401], "rollback": [490, 1116], "rolled_forward": 469, "rollforward": [489, 1115], "rolling_kurtosi": [868, 1401], "rolling_map": [868, 1401], "rolling_max": [868, 1401], "rolling_max_bi": [868, 1401], "rolling_mean": [868, 1401], "rolling_mean_bi": [868, 1401], "rolling_median": [868, 1401], "rolling_median_bi": [868, 1401], "rolling_min": [868, 1401], "rolling_min_bi": [868, 1401], "rolling_quantil": [868, 1401], "rolling_quantile_bi": [868, 1401], "rolling_row_max": [679, 868], "rolling_row_mean": [681, 868], "rolling_row_median": [683, 868], "rolling_row_min": [685, 868], "rolling_row_quantil": [687, 868], "rolling_row_std": [690, 868], "rolling_row_sum": [692, 868], "rolling_row_var": [694, 868], "rolling_skew": [868, 1401], "rolling_std": [868, 1401], "rolling_std_bi": [868, 1295, 1401], "rolling_sum": [677, 868, 1278, 1401], "rolling_sum_bi": [868, 1401], "rolling_var": [868, 1401], "rolling_var_bi": [868, 1401], "rollinggroupbi": [288, 356], "ronaldo": [721, 1325], "root": [155, 167, 449, 627, 638, 639, 641, 643, 645, 646, 710, 867, 868, 1069, 1314, 1401, 1423], "rotat": [356, 359, 1401, 1406], "round": [22, 42, 60, 139, 153, 356, 450, 454, 531, 696, 769, 868, 1070, 1160, 1297, 1401, 1422], "round_sig_fig": [868, 1401], "round_str": 1123, "round_td": 1123, "rounded_corn": 22, "roundmod": [695, 868, 1296, 1401], "row": [16, 22, 27, 39, 40, 42, 48, 49, 52, 54, 58, 59, 61, 66, 106, 112, 120, 128, 135, 136, 137, 138, 139, 146, 147, 151, 152, 153, 156, 157, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 175, 176, 182, 211, 212, 214, 215, 216, 226, 227, 232, 235, 237, 238, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 264, 271, 272, 276, 280, 284, 288, 291, 292, 301, 307, 310, 312, 313, 318, 319, 321, 323, 324, 325, 332, 333, 337, 339, 341, 342, 350, 356, 360, 395, 396, 404, 421, 429, 442, 443, 524, 532, 536, 542, 566, 567, 568, 577, 602, 605, 655, 656, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 702, 707, 709, 720, 768, 773, 787, 790, 796, 798, 815, 819, 821, 822, 824, 826, 841, 843, 844, 853, 868, 885, 888, 898, 899, 905, 906, 907, 909, 910, 913, 914, 915, 916, 918, 919, 924, 925, 933, 944, 949, 950, 951, 953, 954, 960, 961, 966, 968, 970, 971, 979, 988, 998, 1013, 1016, 1017, 1022, 1036, 1046, 1152, 1153, 1163, 1170, 1196, 1197, 1198, 1207, 1232, 1259, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1312, 1324, 1333, 1372, 1401, 1410, 1417, 1419, 1430, 1431, 1432], "row_count_nam": [151, 152, 157, 159, 163, 166, 169, 170, 171], "row_count_offset": [151, 152, 157, 159, 163, 166, 169, 170, 171], "row_group": [163, 171], "row_group_s": [48, 52, 356, 988], "row_height": [42, 356], "row_idx": 212, "row_index": [42, 356], "row_index_nam": [151, 152, 157, 159, 161, 163, 166, 169, 170, 171], "row_index_offset": [151, 152, 157, 159, 161, 163, 166, 169, 170, 171], "row_nr": [332, 356, 960, 988], "row_tot": [42, 356], "rowname_col": [356, 360], "rows_by_kei": [256, 290, 309, 356], "rowserror": [289, 356], "rowtotalsdefinit": [42, 356], "rtol": [175, 176, 177, 178], "rtrim": 1422, "ru": 1424, "rule": [151, 163, 166, 171, 237, 265, 356, 714, 738, 753, 920, 988, 1318, 1342, 1357], "run": [49, 50, 51, 52, 64, 65, 73, 97, 131, 153, 182, 185, 186, 187, 243, 258, 261, 264, 295, 321, 331, 342, 356, 447, 461, 576, 614, 673, 674, 732, 846, 868, 890, 891, 901, 908, 913, 919, 924, 930, 932, 939, 943, 951, 958, 963, 988, 992, 994, 1065, 1084, 1206, 1243, 1275, 1276, 1336, 1401, 1429, 1432], "runtim": [154, 992], "runtimeerror": [314, 356, 1381, 1401], "rust": [39, 48, 49, 102, 114, 148, 156, 157, 159, 163, 264, 342, 356, 723, 988, 992, 1243, 1327, 1401], "s1": [57, 98, 99, 177, 178, 237, 356, 793, 797, 799, 1038, 1144, 1145, 1165, 1191, 1201, 1235, 1255, 1267, 1392, 1401], "s2": [1, 57, 98, 99, 177, 178, 237, 356, 793, 797, 799, 1038, 1071, 1088, 1144, 1145, 1165, 1182, 1191, 1201, 1235, 1249, 1255, 1267, 1392, 1401], "s3": [1, 41, 155, 167, 168, 171, 172, 356, 932, 988, 1038, 1235, 1401], "s_": 502, "s_bar": 1419, "s_dt": [502, 1424, 1425], "s_dt1": 1424, "s_dt2": 1424, "s_dtm": 502, "s_foo": 1419, "s_from_str_repr": [1378, 1401], "s_head_5": 727, "s_head_n": 727, "s_tail_5": 751, "s_tail_n": 751, "s_td": 502, "s_tm": [502, 1424, 1425], "safe": [667, 868, 1268, 1401], "sale": [655, 868], "salesforce_format": 199, "sam": 14, "same": [22, 41, 42, 55, 57, 58, 64, 65, 66, 98, 99, 115, 146, 157, 166, 175, 176, 177, 178, 180, 206, 212, 226, 227, 233, 234, 235, 243, 259, 264, 280, 284, 290, 291, 302, 321, 330, 331, 335, 342, 356, 368, 374, 378, 385, 420, 446, 467, 468, 502, 526, 527, 528, 532, 534, 535, 538, 604, 618, 624, 655, 669, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 702, 709, 720, 731, 763, 858, 864, 868, 890, 891, 898, 899, 903, 904, 905, 908, 914, 917, 919, 933, 943, 945, 951, 957, 958, 964, 988, 994, 999, 1037, 1064, 1089, 1090, 1095, 1128, 1155, 1156, 1234, 1243, 1271, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1295, 1324, 1335, 1392, 1401, 1415, 1417, 1425], "samoa": [470, 1092], "sampl": [151, 152, 342, 356, 702, 706, 825, 826, 868, 971, 1311, 1401, 1418], "sample_s": [151, 152], "sampled_from": 1432, "sandwich": [240, 356], "sanit": 172, "sat": [356, 359], "satisfi": [549, 868, 1176, 1401], "saturdai": [244, 356, 909, 988], "save": [2, 3, 6, 244, 259, 288, 326, 356, 470, 478, 492, 497, 510, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 811, 855, 856, 864, 868, 880, 909, 914, 936, 988, 1100, 1118, 1123, 1136, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [148, 211, 212, 254, 264, 289, 299, 356, 447, 613, 698, 700, 727, 732, 740, 751, 801, 815, 827, 828, 829, 841, 868, 942, 988, 998, 1065, 1191, 1300, 1304, 1331, 1336, 1344, 1355, 1401], "scale": [30, 74, 230, 356, 430, 614, 659, 695, 754, 868, 994, 1146, 1358, 1401], "scale_negative_even": [659, 868], "scan": [56, 135, 138, 151, 152, 153, 156, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 196, 356, 880, 988, 1333], "scan_csv": [49, 50, 51, 52, 151, 152, 988], "scan_ipc": 157, "scan_ndjson": 161, "scan_parquet": [53, 54, 55, 163, 165, 172, 932, 988], "scan_pyarrow_dataset": [163, 171], "scan_tabl": 204, "scancastopt": 171, "scatter": [356, 359, 1401, 1406], "scenario": 1401, "schedul": [65, 891, 988], "schema": [0, 1, 16, 30, 37, 40, 41, 56, 59, 60, 61, 66, 97, 106, 123, 124, 132, 134, 135, 136, 138, 146, 147, 151, 152, 153, 154, 156, 158, 160, 161, 162, 163, 165, 166, 169, 170, 171, 192, 194, 195, 196, 200, 202, 216, 217, 218, 224, 228, 230, 257, 261, 264, 265, 272, 276, 285, 314, 318, 356, 374, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 476, 604, 625, 626, 629, 630, 640, 642, 644, 781, 850, 868, 880, 888, 889, 892, 893, 897, 900, 919, 920, 925, 929, 934, 956, 971, 988, 994, 1074, 1333, 1401, 1410], "schema_mod": [41, 356], "schema_overrid": [132, 134, 135, 136, 137, 138, 151, 152, 153, 154, 156, 160, 161, 162, 166, 170, 257, 314, 356, 695, 868, 988, 994], "schemadefinit": [132, 134, 135, 136, 138, 160, 161, 170, 356, 988], "schemadict": [89, 97, 132, 134, 135, 136, 137, 138, 146, 151, 153, 154, 156, 162, 163, 166, 169, 171, 265, 356, 374, 626, 629, 630, 850, 919, 920, 971, 988], "schemaerror": [265, 356, 920, 988], "schemainitdatatyp": 993, "scheme": [53, 54, 55], "schindler": 1410, "scientif": [13, 39, 49, 356, 988], "scikit": [318, 356], "scipi": [562, 706, 868, 1192, 1311, 1401], "scope": [35, 36, 206, 879, 994, 1413, 1416, 1429], "score": [42, 280, 356], "script": [356, 359, 1401, 1406], "scroll": [42, 356], "sdiff": 596, "sdk": 191, "search": [259, 356, 714, 724, 726, 738, 914, 945, 988, 1173, 1318, 1328, 1330, 1342, 1401], "search_sort": [868, 1401], "searchsortedsid": [698, 868, 1300, 1401], "searchstrategi": [179, 181, 182, 183, 184, 186], "season": [736, 737], "sec": [1425, 1432], "second": [39, 49, 161, 166, 169, 170, 175, 176, 177, 178, 244, 259, 288, 326, 356, 480, 484, 486, 487, 491, 492, 495, 497, 502, 509, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 736, 737, 750, 753, 808, 809, 810, 811, 854, 855, 856, 868, 909, 914, 929, 936, 988, 994, 1118, 1121, 1123, 1135, 1136, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1340, 1341, 1354, 1357, 1401, 1424, 1425, 1430, 1432], "second_part": [742, 743, 1346, 1347], "seconds_diff": 509, "secret": [168, 171], "section": [280, 356, 713, 721, 722, 725, 736, 737, 806, 807, 809, 810, 855, 856, 992, 1317, 1325, 1326, 1329, 1340, 1341], "secur": [464, 868, 896, 988], "see": [39, 41, 42, 44, 45, 48, 49, 50, 51, 52, 73, 146, 148, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 182, 186, 196, 208, 220, 235, 244, 258, 279, 280, 284, 325, 356, 360, 435, 436, 438, 439, 451, 502, 527, 562, 613, 706, 713, 721, 722, 725, 727, 736, 737, 751, 806, 807, 809, 810, 841, 855, 856, 864, 868, 905, 909, 933, 954, 963, 988, 992, 994, 996, 1052, 1053, 1055, 1056, 1073, 1128, 1192, 1311, 1317, 1325, 1326, 1329, 1331, 1340, 1341, 1355, 1401, 1432], "seed": [97, 173, 245, 292, 356, 541, 593, 665, 697, 702, 868, 1169, 1223, 1266, 1298, 1307, 1401], "seed_1": [245, 356, 541, 868, 1169, 1401], "seed_2": [245, 356, 541, 868, 1169, 1401], "seed_3": [245, 356, 541, 868, 1169, 1401], "seen": [502, 1128], "seen_group": 152, "select": [1, 8, 40, 49, 50, 51, 52, 58, 59, 60, 61, 64, 65, 97, 103, 149, 151, 152, 153, 154, 155, 157, 159, 163, 166, 168, 172, 181, 211, 213, 254, 255, 259, 263, 264, 276, 279, 289, 295, 301, 303, 316, 322, 326, 333, 356, 363, 364, 367, 368, 374, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 409, 410, 411, 412, 413, 418, 419, 420, 421, 422, 423, 425, 428, 431, 432, 437, 440, 441, 442, 445, 449, 450, 452, 453, 454, 455, 461, 463, 465, 466, 467, 468, 471, 473, 474, 483, 489, 490, 492, 496, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 518, 520, 521, 522, 523, 524, 525, 529, 531, 536, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552, 555, 561, 562, 563, 565, 566, 576, 577, 605, 608, 609, 610, 611, 613, 615, 616, 617, 621, 633, 635, 637, 638, 640, 642, 644, 647, 648, 652, 653, 654, 655, 657, 658, 661, 663, 664, 665, 666, 667, 668, 671, 672, 673, 676, 677, 688, 695, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 720, 721, 722, 723, 724, 725, 726, 728, 733, 750, 761, 763, 764, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 782, 784, 786, 789, 790, 791, 794, 795, 797, 798, 799, 803, 810, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 830, 832, 834, 835, 837, 838, 841, 842, 845, 847, 848, 849, 850, 851, 853, 857, 864, 868, 883, 884, 890, 891, 893, 901, 914, 928, 930, 939, 943, 944, 946, 952, 959, 961, 963, 988, 994, 998, 1122, 1162, 1206, 1299, 1301, 1312, 1330, 1334, 1354, 1401, 1410, 1411, 1412, 1413, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431], "select_from": [181, 184, 186], "select_seq": [356, 988], "selector": [0, 42, 215, 224, 226, 227, 231, 263, 271, 278, 280, 302, 311, 313, 318, 321, 323, 324, 356, 360, 374, 502, 522, 621, 868, 880, 887, 897, 898, 899, 902, 924, 945, 951, 953, 988], "selectortyp": [42, 356], "self": [1, 59, 60, 61, 62, 64, 303, 334, 356, 369, 847, 868, 890, 901, 930, 943, 946, 959, 988, 1003, 1050, 1051, 1052, 1053, 1055, 1056, 1060, 1074, 1079, 1153, 1157, 1172, 1241, 1243, 1256, 1260, 1261, 1267, 1270, 1271, 1272, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1299, 1301, 1302, 1313, 1389, 1392, 1401, 1412, 1413, 1414, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1429], "self_dtyp": [613, 614, 868], "semi": [147, 258, 356, 913, 988, 1417], "semigraph": 22, "sens": [151, 157, 159, 272, 326, 356, 655, 868, 925, 988], "sensit": [713, 722, 725, 736, 737, 1317, 1326, 1329, 1340, 1341], "sep": 147, "separ": [9, 12, 26, 29, 38, 39, 49, 141, 147, 150, 151, 152, 156, 166, 278, 280, 311, 320, 322, 356, 404, 407, 502, 577, 584, 614, 720, 796, 801, 802, 868, 943, 952, 988, 1022, 1025, 1128, 1207, 1214, 1324, 1370, 1376, 1401, 1424], "seq": 28, "seq1": 28, "seq2": 28, "sequenc": [42, 48, 52, 53, 55, 58, 89, 132, 134, 135, 136, 138, 142, 147, 151, 152, 153, 156, 160, 161, 162, 166, 170, 180, 181, 182, 183, 184, 212, 214, 222, 232, 258, 259, 263, 271, 276, 278, 279, 280, 291, 302, 311, 313, 318, 319, 323, 324, 325, 326, 356, 421, 442, 462, 535, 554, 605, 613, 659, 662, 669, 670, 709, 738, 748, 749, 763, 773, 790, 801, 802, 815, 817, 825, 826, 828, 829, 838, 841, 845, 848, 868, 885, 895, 913, 914, 924, 928, 945, 950, 953, 954, 988, 994, 1038, 1059, 1085, 1086, 1153, 1235, 1264, 1271, 1272, 1342, 1368, 1386, 1401], "sequenti": [64, 295, 331, 356, 613, 828, 829, 868, 890, 901, 930, 939, 943, 958, 988], "ser": [1097, 1098, 1126], "seri": [0, 1, 13, 27, 42, 57, 59, 60, 61, 62, 66, 67, 76, 89, 98, 99, 108, 132, 134, 137, 139, 148, 175, 177, 178, 182, 211, 212, 225, 235, 237, 239, 241, 244, 245, 248, 249, 250, 251, 253, 255, 263, 267, 269, 274, 284, 286, 288, 292, 306, 309, 311, 312, 314, 316, 317, 336, 356, 368, 385, 396, 421, 425, 444, 445, 446, 447, 448, 450, 496, 525, 528, 531, 535, 536, 546, 547, 548, 552, 554, 555, 557, 558, 559, 560, 571, 577, 580, 605, 611, 613, 614, 665, 666, 667, 668, 669, 670, 675, 677, 688, 699, 701, 727, 738, 750, 751, 752, 753, 757, 761, 772, 777, 787, 791, 793, 794, 797, 799, 801, 802, 806, 807, 809, 810, 815, 817, 821, 822, 825, 826, 827, 828, 829, 839, 841, 842, 846, 847, 850, 855, 856, 859, 868, 880, 905, 909, 912, 933, 936, 965, 988, 1393, 1395, 1397, 1400, 1402, 1405, 1406, 1407, 1408, 1409, 1411, 1413, 1424, 1429, 1432], "serial": [46, 47, 223, 356, 464, 632, 868, 896, 988], "serializ": [148, 868], "serializationformat": [223, 296, 356, 464, 628, 868, 896, 940, 988], "seriesplot": [1401, 1406], "server": [40, 153, 154, 356], "servic": 34, "service_account": [155, 167], "service_account_json_absolute_path": [155, 167], "session": 153, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 27, 28, 29, 32, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 58, 59, 64, 65, 70, 73, 74, 76, 133, 134, 135, 138, 148, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 196, 206, 210, 219, 226, 227, 236, 239, 243, 245, 256, 258, 259, 269, 271, 290, 292, 296, 301, 306, 311, 313, 314, 318, 320, 321, 323, 324, 325, 356, 359, 382, 384, 406, 407, 421, 433, 435, 436, 438, 439, 451, 462, 495, 496, 513, 541, 554, 580, 582, 584, 593, 594, 595, 596, 597, 599, 605, 613, 614, 621, 622, 628, 659, 662, 669, 670, 676, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 697, 702, 706, 707, 712, 728, 736, 737, 740, 745, 746, 747, 748, 749, 750, 752, 753, 757, 778, 782, 784, 787, 791, 793, 796, 797, 799, 801, 802, 806, 807, 808, 809, 810, 811, 815, 821, 822, 825, 826, 827, 828, 829, 833, 839, 841, 842, 843, 844, 846, 850, 852, 855, 856, 858, 859, 868, 880, 890, 891, 898, 901, 908, 913, 914, 919, 924, 930, 940, 943, 944, 951, 953, 954, 962, 971, 988, 1001, 1002, 1024, 1025, 1038, 1043, 1050, 1052, 1053, 1055, 1056, 1073, 1085, 1121, 1122, 1139, 1159, 1169, 1182, 1189, 1210, 1212, 1214, 1223, 1224, 1225, 1226, 1227, 1229, 1235, 1243, 1264, 1271, 1272, 1277, 1278, 1279, 1281, 1283, 1285, 1287, 1289, 1290, 1292, 1294, 1298, 1299, 1300, 1307, 1311, 1312, 1316, 1332, 1333, 1340, 1341, 1344, 1349, 1350, 1351, 1354, 1356, 1357, 1361, 1381, 1390, 1401, 1420, 1428, 1432], "set_": 206, "set_decimal_separ": 29, "set_environ": 185, "set_except": [65, 891, 988], "set_fmt_float": 32, "set_fmt_str_length": [714, 724, 726, 738, 1318, 1330, 1342], "set_index": [244, 356, 909, 988], "set_legend": [42, 356], "set_sort": [288, 326, 356, 675, 868, 936, 988, 1401], "set_stat": 32, "set_streaming_chunk_s": [890, 988], "set_styl": [42, 356], "set_tbl_column_data_type_inlin": 26, "set_tbl_format": [7, 58], "set_tbl_row": 206, "set_tbl_width_char": 738, "set_thousands_separ": 9, "set_titl": [42, 356], "set_verbos": 206, "setosa": [356, 359], "setup": 1432, "seventeen": [545, 868], "sever": [132, 134, 135, 136, 138, 160, 161, 170, 356, 932, 988, 1432], "sfu": 154, "shape": [1, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 57, 58, 59, 60, 61, 62, 66, 67, 85, 89, 97, 98, 99, 106, 125, 132, 133, 134, 135, 136, 137, 138, 139, 147, 151, 160, 161, 166, 172, 175, 177, 179, 182, 186, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 237, 238, 239, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 292, 294, 296, 299, 301, 302, 303, 304, 305, 306, 307, 309, 311, 312, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 364, 367, 368, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 633, 634, 635, 636, 637, 638, 639, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 868, 883, 884, 885, 887, 888, 890, 891, 894, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 940, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 988, 993, 994, 998, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160, 1162, 1163, 1165, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1248, 1255, 1256, 1257, 1259, 1260, 1261, 1262, 1264, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1309, 1310, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1367, 1370, 1372, 1373, 1374, 1376, 1377, 1378, 1383, 1385, 1386, 1387, 1388, 1389, 1390, 1392, 1401, 1410, 1411, 1412, 1413, 1415, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1429, 1430], "share": [175, 176, 177, 178, 230, 356, 1146, 1401], "shawshank": 1410, "sheet": [42, 156, 162, 356], "sheet1": [42, 356], "sheet_id": [156, 162], "sheet_nam": [156, 162], "sheet_zoom": [42, 356], "sheetnam": [156, 162], "shift": [244, 356, 424, 465, 533, 574, 656, 795, 868, 909, 988, 1041, 1087, 1161, 1204, 1259, 1401], "short": [175, 177], "shorten": [175, 177], "shorter": [151, 152, 166, 821, 822], "shorthand": [356, 359, 858, 1401, 1406], "should": [12, 40, 42, 48, 49, 50, 51, 52, 66, 97, 132, 134, 136, 138, 146, 147, 156, 160, 161, 166, 168, 170, 172, 179, 180, 182, 186, 212, 224, 256, 258, 259, 263, 264, 289, 290, 291, 302, 310, 311, 322, 342, 356, 380, 461, 464, 469, 513, 519, 522, 550, 557, 558, 576, 614, 628, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 706, 709, 736, 737, 754, 778, 790, 792, 811, 813, 827, 829, 843, 844, 864, 868, 890, 896, 897, 901, 913, 914, 919, 930, 940, 943, 945, 952, 988, 994, 1084, 1091, 1139, 1148, 1177, 1206, 1243, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1300, 1311, 1340, 1341, 1358, 1390, 1401, 1411], "show": [32, 42, 222, 227, 242, 261, 277, 356, 543, 629, 868, 895, 930, 943, 988, 1171, 1401, 1415, 1428], "show_graph": [261, 356, 988], "show_plot": [930, 988], "shrink": [300, 356, 701, 868, 1305, 1306, 1401], "shrink_dtyp": [263, 356, 868, 1401], "shrink_to_fit": [356, 1401], "shuffl": [173, 292, 318, 342, 356, 593, 697, 868, 971, 1223, 1298, 1401], "side": [42, 148, 153, 244, 288, 356, 549, 594, 595, 596, 597, 675, 679, 681, 683, 685, 687, 690, 692, 694, 698, 806, 807, 809, 810, 825, 826, 855, 856, 868, 909, 936, 988, 1176, 1224, 1225, 1226, 1227, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1300, 1401], "sign": [72, 73, 75, 80, 81, 82, 83, 84, 90, 374, 492, 667, 736, 737, 760, 868, 994, 1118, 1268, 1340, 1341, 1364, 1401, 1422], "sign_x": 1423, "signed_integ": 994, "signific": [171, 256, 264, 356, 435, 436, 438, 439, 614, 696, 868, 1052, 1053, 1055, 1056, 1243, 1297, 1401], "significantli": [156, 264, 342, 356, 1243, 1401, 1432], "silenc": 106, "silent": [56, 171, 755, 1359], "similar": [38, 48, 56, 150, 188, 212, 237, 259, 299, 321, 323, 356, 416, 499, 502, 598, 655, 700, 765, 824, 858, 868, 905, 914, 942, 951, 953, 988, 1033, 1125, 1128, 1228, 1304, 1401], "similarli": [42, 135, 244, 259, 288, 326, 356, 492, 497, 510, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 855, 856, 868, 909, 914, 936, 988, 1118, 1123, 1136, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "simpl": [42, 276, 356], "simpler": [994, 1340], "simpli": [166, 801, 815, 1067], "simplifi": [64, 890, 901, 930, 943, 988], "simplify_express": [64, 890, 901, 930, 943, 962, 988], "sin": [868, 1401, 1422], "sinc": [8, 41, 64, 67, 70, 72, 73, 90, 151, 152, 153, 155, 161, 163, 166, 167, 169, 170, 171, 179, 180, 181, 182, 186, 189, 213, 271, 314, 332, 337, 356, 476, 479, 513, 534, 613, 614, 632, 669, 701, 712, 720, 780, 789, 797, 817, 828, 868, 884, 890, 901, 924, 930, 943, 945, 959, 960, 966, 988, 1098, 1101, 1107, 1108, 1139, 1168, 1271, 1316, 1324, 1381, 1401], "sind": 1422, "sine": [389, 390, 613, 704, 705, 868, 1007, 1008, 1309, 1310, 1401, 1426], "singl": [42, 48, 58, 65, 66, 77, 150, 151, 152, 153, 154, 155, 156, 163, 166, 167, 169, 180, 212, 215, 224, 225, 226, 227, 232, 239, 245, 254, 260, 264, 278, 289, 291, 302, 313, 314, 356, 403, 447, 451, 469, 492, 535, 538, 541, 573, 580, 613, 614, 666, 669, 671, 673, 709, 712, 727, 728, 732, 740, 751, 780, 790, 794, 795, 796, 822, 826, 828, 829, 848, 856, 858, 864, 868, 887, 897, 898, 899, 915, 945, 988, 994, 1021, 1065, 1073, 1091, 1118, 1153, 1169, 1203, 1210, 1267, 1271, 1273, 1275, 1316, 1331, 1332, 1336, 1344, 1355, 1375, 1381, 1401, 1412], "singlecolselector": 211, "singleindexselector": [211, 998], "sinh": [868, 1401], "sink": 881, "sink_": [53, 55], "sink_csv": [53, 54, 55, 988], "sink_ipc": 988, "sink_ndjson": 988, "sink_parquet": [53, 142, 988], "site_id": [356, 360], "six": [698, 868], "size": [16, 48, 52, 54, 146, 151, 152, 153, 179, 180, 181, 182, 186, 188, 230, 324, 356, 429, 510, 671, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 787, 821, 822, 843, 844, 845, 868, 890, 988, 1046, 1136, 1146, 1273, 1277, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1295, 1401, 1432], "sizeunit": [230, 356, 430, 1047, 1146, 1401], "skew": [688, 868, 1289, 1401], "skewtest": [706, 868, 1311, 1401], "skip": [151, 152, 156, 163, 166, 171, 259, 324, 356, 914, 988, 1243, 1401, 1417], "skip_empty_lin": 156, "skip_lin": [151, 152, 166], "skip_nul": [614, 868, 1243, 1401], "skip_row": [151, 152, 166], "skip_rows_after_head": [151, 152, 166], "sklearn": [318, 356], "slice": [59, 64, 148, 230, 246, 257, 307, 356, 583, 603, 613, 625, 627, 677, 678, 680, 682, 684, 686, 689, 691, 693, 727, 751, 828, 829, 868, 883, 890, 901, 919, 930, 943, 988, 1146, 1170, 1213, 1233, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1331, 1355, 1372, 1401, 1424], "slice_pushdown": [64, 890, 901, 919, 930, 943, 962, 988], "slide": [461, 868, 1084, 1401], "slightli": [49, 50, 51, 52, 102, 532, 868, 988, 1425], "slot": [461, 465, 574, 868, 1084, 1087, 1204, 1401], "slow": [118, 135, 138, 151, 152, 153, 156, 160, 161, 162, 166, 170, 171, 356, 461, 614, 677, 868, 971, 988, 1084, 1278, 1333, 1401], "slower": [136, 138, 156, 243, 264, 278, 326, 342, 356, 614, 828, 829, 868, 908, 971, 988, 1243, 1401], "small": [13, 154, 497, 988, 1432], "smaller": [48, 52, 54, 230, 356, 988, 1146, 1401], "smallest": [214, 319, 356, 441, 442, 773, 868, 885, 950, 988, 1058, 1059, 1386, 1401, 1418, 1421], "smooth": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "snappi": [37, 48, 52, 356, 988], "snapshot": 168, "snapshot_id": 168, "snowflak": [153, 154], "snowflake_format": 199, "snowi": [736, 737], "so": [1, 42, 153, 154, 156, 166, 188, 206, 242, 244, 260, 280, 288, 356, 366, 396, 406, 464, 532, 549, 582, 605, 614, 675, 736, 737, 738, 745, 746, 747, 761, 868, 883, 896, 909, 915, 936, 988, 994, 1024, 1212, 1340, 1341, 1342, 1349, 1350, 1351], "softwar": [38, 150, 356], "solut": [40, 356], "solv": [97, 146], "some": [16, 32, 42, 48, 52, 57, 66, 99, 135, 151, 152, 153, 166, 210, 227, 280, 291, 314, 356, 360, 736, 737, 864, 932, 988, 1182, 1340, 1341, 1401, 1432], "some_account": [722, 1326], "some_t": 1431, "someth": [613, 828, 868], "sometim": [811, 867], "somewher": [722, 1326], "sort": [53, 54, 55, 58, 59, 214, 244, 259, 272, 279, 280, 288, 297, 319, 326, 339, 350, 356, 395, 441, 442, 519, 528, 614, 655, 675, 698, 699, 709, 772, 773, 778, 780, 790, 806, 809, 829, 845, 868, 885, 901, 909, 914, 925, 928, 930, 936, 941, 943, 950, 968, 979, 988, 994, 1013, 1058, 1059, 1148, 1189, 1300, 1302, 1385, 1386, 1387, 1390, 1401, 1417, 1430, 1432], "sort_bi": 868, "sort_column": [280, 356], "sorted": [259, 356, 914, 988], "sorted_asc": [1159, 1401], "sorted_desc": [1159, 1401], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 868, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 988, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1401, 1406, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1429], "source_ac": 139, "source_actor_id": 139, "source_alia": [41, 356], "source_cha": 139, "source_channel_id": 139, "south": 76, "space": [22, 244, 356, 502, 825, 826, 909, 988, 994, 1128], "spam": [268, 356, 722, 1326], "span": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "spanner": [356, 360], "spark": [48, 356], "sparklin": [42, 356], "speak": [706, 868, 1311, 1401], "spearman": 797, "speci": [356, 359], "special": [40, 55, 151, 152, 154, 166, 318, 333, 356, 677, 722, 736, 737, 868, 961, 988, 1243, 1278, 1326, 1340, 1341, 1401], "specif": [1, 32, 41, 42, 44, 45, 50, 102, 132, 134, 136, 138, 147, 151, 154, 155, 156, 160, 161, 162, 167, 168, 170, 212, 215, 256, 258, 265, 308, 313, 356, 366, 374, 499, 502, 550, 750, 752, 753, 757, 778, 868, 887, 913, 920, 988, 993, 994, 1125, 1128, 1177, 1354, 1356, 1357, 1361, 1375, 1379, 1390, 1401, 1417, 1429, 1431, 1432], "specifi": [11, 39, 40, 41, 42, 48, 49, 58, 103, 106, 109, 124, 127, 151, 156, 162, 163, 166, 171, 183, 192, 194, 195, 196, 212, 214, 215, 230, 231, 234, 239, 243, 244, 258, 259, 278, 280, 288, 289, 291, 294, 295, 299, 302, 313, 319, 322, 330, 331, 335, 356, 374, 442, 451, 495, 502, 518, 520, 521, 522, 527, 655, 668, 670, 678, 680, 682, 684, 686, 689, 691, 693, 700, 709, 765, 773, 790, 793, 794, 795, 796, 806, 807, 809, 810, 811, 813, 846, 850, 855, 856, 864, 868, 885, 887, 902, 904, 908, 909, 913, 914, 936, 938, 939, 942, 945, 950, 952, 957, 958, 964, 988, 994, 1059, 1073, 1121, 1128, 1146, 1147, 1149, 1150, 1156, 1270, 1272, 1304, 1379, 1386, 1401, 1417, 1424, 1431], "speed": [52, 297, 356, 614, 868, 941, 988, 992, 1432], "speedup": [58, 171, 256, 264, 356, 614, 868, 1243, 1401], "split": [1, 42, 48, 53, 54, 55, 59, 257, 356, 720, 742, 743, 1324, 1346, 1347, 1424], "split_by_column_dtyp": 61, "split_inclus": 741, "split_part": 1422, "splitfram": [1, 59], "spreadsheet": [38, 150, 156, 162, 280, 356], "spring": [736, 737], "sql": [0, 40, 121, 122, 130, 153, 154, 258, 299, 356, 416, 598, 700, 824, 848, 868, 880, 942, 988, 1033, 1228, 1304, 1401, 1410, 1411, 1413, 1415, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1430, 1431], "sql_expr": 1429, "sqlalchemi": [40, 153, 174, 356], "sqlcontext": [303, 356, 847, 946, 988, 1428], "sqldw_format": 199, "sqlite": [40, 153, 154, 356], "sqrt": [614, 706, 765, 868, 1243, 1311, 1401, 1422], "sqrt_x": 1423, "squar": [1, 62, 342, 562, 671, 710, 868, 971, 1192, 1273, 1314, 1401, 1423], "st": [34, 1432], "stabil": [245, 356, 541, 868, 1169, 1401], "stabl": [163, 208, 220, 222, 223, 245, 292, 296, 303, 356, 464, 541, 610, 628, 771, 868, 895, 896, 924, 940, 945, 946, 988, 996, 1169, 1383, 1401], "stack": [66, 248, 328, 356, 359, 1411], "stage": [929, 943, 988], "stai": [613, 702, 868], "standalon": [180, 994], "standard": [7, 12, 39, 42, 153, 304, 313, 318, 356, 483, 520, 689, 690, 706, 711, 730, 733, 849, 864, 868, 883, 947, 988, 994, 1105, 1144, 1149, 1255, 1291, 1311, 1315, 1334, 1337, 1401, 1418, 1432], "standardis": [42, 356], "start": [42, 49, 50, 51, 52, 55, 149, 151, 152, 154, 156, 157, 159, 161, 162, 163, 166, 169, 170, 171, 188, 238, 243, 244, 261, 301, 326, 332, 333, 356, 425, 428, 431, 444, 448, 469, 477, 481, 488, 493, 497, 510, 511, 522, 536, 581, 599, 674, 679, 681, 683, 685, 687, 690, 692, 694, 707, 713, 718, 722, 726, 735, 740, 744, 745, 747, 748, 751, 760, 787, 792, 801, 805, 806, 807, 808, 809, 810, 813, 815, 821, 822, 825, 826, 855, 856, 858, 864, 868, 907, 908, 909, 930, 944, 960, 961, 988, 994, 1048, 1061, 1066, 1091, 1093, 1096, 1099, 1101, 1102, 1109, 1111, 1113, 1114, 1117, 1119, 1123, 1127, 1136, 1137, 1163, 1211, 1229, 1276, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1312, 1322, 1326, 1330, 1339, 1344, 1348, 1349, 1351, 1355, 1364, 1401, 1417, 1424, 1432], "start_bi": [244, 356, 909, 988], "startbi": [244, 356, 909, 988], "starts_a": 1424, "starts_with": [59, 280, 356, 360, 425, 428, 444, 621, 713, 718, 847, 946, 988, 994, 1061, 1322, 1422], "starts_with_expr": 431, "starts_with_lit": 431, "startup": [313, 356], "stat": [562, 706, 868, 1192, 1311, 1401], "state": [4, 5, 114, 613, 614, 801, 802, 828, 829, 868, 880, 919, 988, 1243, 1401, 1429], "statement": [154, 655, 858, 868, 1415, 1430], "static": [95, 361, 971], "statist": [48, 52, 151, 152, 163, 169, 171, 222, 356, 520, 521, 562, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 706, 868, 895, 988, 1086, 1149, 1150, 1192, 1277, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1295, 1311, 1401], "std": [222, 356, 689, 690, 868, 895, 988, 1086, 1290, 1291, 1295, 1401], "std_dev": [42, 356], "stddev": 1422, "stddev_samp": 1418, "stdev": [42, 356, 1418], "stdev_samp": 1418, "stdout": [206, 242, 356, 630], "step": [324, 356, 532, 787, 821, 822, 845, 868, 883], "steve": [272, 356, 925, 988], "still": [153, 154], "stock": [356, 359], "stop": [146, 149, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 679, 681, 683, 685, 687, 690, 692, 694, 868, 883, 1093, 1096, 1101, 1102, 1109, 1111, 1113, 1117, 1123, 1127, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "storag": [10, 39, 41, 44, 48, 49, 50, 51, 52, 151, 155, 157, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 196, 356, 988], "storage_loc": [197, 200, 201], "storage_opt": [39, 41, 44, 48, 49, 50, 51, 52, 151, 155, 157, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 196, 356, 988], "store": [41, 168, 232, 256, 290, 356, 445, 673, 868, 1062, 1153, 1275, 1401], "store_id": [655, 868], "str": [1, 2, 3, 5, 6, 9, 12, 14, 17, 18, 19, 22, 23, 28, 29, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 73, 76, 77, 100, 131, 132, 133, 134, 135, 136, 138, 139, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 180, 182, 185, 186, 187, 191, 192, 194, 195, 196, 197, 198, 200, 201, 206, 212, 214, 215, 219, 222, 223, 224, 225, 226, 227, 228, 230, 231, 235, 236, 237, 239, 240, 242, 243, 244, 246, 248, 249, 251, 253, 254, 256, 258, 259, 260, 262, 263, 265, 266, 268, 270, 271, 272, 273, 276, 278, 280, 282, 284, 285, 286, 287, 288, 289, 290, 292, 296, 297, 301, 302, 303, 304, 305, 307, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 366, 367, 368, 374, 379, 380, 381, 402, 407, 421, 425, 426, 427, 428, 431, 432, 437, 440, 442, 444, 445, 448, 456, 462, 464, 466, 474, 492, 496, 497, 499, 502, 510, 519, 522, 528, 530, 534, 535, 538, 546, 549, 571, 582, 583, 584, 599, 603, 605, 614, 625, 627, 628, 629, 630, 632, 639, 640, 641, 642, 643, 644, 645, 646, 652, 655, 659, 662, 668, 669, 670, 672, 674, 675, 679, 681, 683, 685, 687, 690, 692, 694, 701, 708, 709, 761, 762, 763, 764, 773, 778, 780, 781, 782, 783, 784, 785, 786, 788, 789, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 864, 868, 875, 885, 887, 890, 891, 893, 895, 896, 897, 898, 899, 901, 902, 905, 908, 909, 911, 913, 914, 915, 920, 924, 925, 928, 930, 933, 934, 935, 936, 940, 941, 943, 944, 945, 946, 950, 951, 952, 953, 954, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 988, 993, 994, 1000, 1025, 1038, 1044, 1060, 1061, 1062, 1066, 1085, 1086, 1096, 1118, 1122, 1123, 1125, 1128, 1136, 1148, 1156, 1159, 1201, 1214, 1235, 1251, 1252, 1253, 1264, 1269, 1271, 1272, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1301, 1365, 1367, 1368, 1376, 1377, 1378, 1379, 1390, 1401, 1407, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1421, 1424, 1425, 1429, 1430, 1432], "str_date": 1424, "str_timestamp": 1424, "str_valu": [53, 144], "strategi": [39, 49, 58, 66, 151, 171, 179, 180, 181, 182, 183, 184, 186, 234, 244, 258, 259, 275, 325, 326, 356, 424, 457, 460, 527, 533, 614, 868, 881, 904, 909, 913, 914, 932, 954, 988, 1041, 1156, 1161, 1235, 1401], "stream": [11, 16, 44, 45, 49, 50, 51, 52, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 243, 258, 321, 356, 890, 901, 908, 913, 919, 924, 930, 943, 945, 951, 988], "stream_result": 153, "streamabl": [919, 924, 953, 988], "streaming_t": 203, "strftime": [102, 502, 1128, 1422, 1424], "strict": [134, 135, 138, 147, 215, 224, 285, 356, 426, 443, 502, 713, 716, 725, 750, 752, 753, 755, 757, 838, 868, 887, 897, 934, 988, 994, 1043, 1060, 1128, 1145, 1317, 1320, 1329, 1354, 1356, 1357, 1359, 1361, 1401], "strictli": [39, 49, 57, 99, 151, 259, 356, 914, 988], "string": [1, 2, 3, 5, 6, 14, 16, 17, 18, 22, 37, 39, 40, 41, 42, 46, 47, 49, 57, 70, 73, 76, 89, 96, 98, 99, 100, 102, 108, 126, 135, 139, 147, 151, 152, 153, 154, 166, 175, 176, 177, 178, 179, 186, 190, 214, 215, 218, 223, 228, 230, 237, 239, 242, 243, 244, 259, 265, 278, 280, 288, 291, 293, 294, 295, 296, 302, 312, 313, 319, 320, 324, 326, 330, 331, 335, 356, 366, 367, 374, 379, 402, 407, 428, 442, 444, 446, 447, 448, 451, 464, 492, 497, 499, 502, 510, 519, 522, 530, 534, 549, 584, 628, 630, 655, 659, 669, 670, 675, 679, 681, 683, 685, 687, 690, 692, 694, 709, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 765, 773, 781, 783, 785, 790, 793, 794, 795, 796, 804, 806, 807, 809, 810, 816, 831, 833, 836, 846, 850, 852, 855, 856, 858, 864, 868, 880, 885, 887, 892, 896, 900, 901, 908, 909, 914, 920, 929, 936, 937, 938, 939, 940, 945, 950, 957, 958, 964, 988, 993, 994, 1025, 1043, 1044, 1045, 1059, 1061, 1064, 1065, 1066, 1118, 1123, 1125, 1128, 1136, 1148, 1176, 1214, 1271, 1272, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1316, 1317, 1318, 1319, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1367, 1378, 1379, 1386, 1401, 1410, 1411, 1419, 1422, 1425, 1428, 1432], "string_to_arrai": 1422, "stringcach": [98, 99, 258, 356, 880], "stringio": [160, 161, 534, 868], "strings_hex": 717, "strip": [30, 745, 746, 747, 748, 749, 1349, 1350, 1351, 1424], "strip_chars_end": [747, 749], "strip_chars_start": [746, 748], "strip_prefix": [747, 749], "strip_suffix": [746, 748], "strongli": [42, 188, 264, 289, 342, 356, 614, 868, 1243, 1401], "strpo": 1422, "strptime": [288, 356, 496, 675, 868, 936, 988, 1122, 1422], "struct": [8, 56, 77, 127, 139, 142, 263, 265, 276, 317, 322, 356, 374, 421, 462, 543, 605, 613, 614, 640, 642, 644, 662, 673, 674, 723, 729, 742, 743, 771, 778, 801, 802, 804, 828, 858, 868, 920, 952, 971, 988, 994, 1038, 1085, 1235, 1243, 1264, 1275, 1327, 1333, 1346, 1347, 1381, 1383, 1401], "struct_col": [761, 763, 764], "struct_seri": 971, "structarrai": [230, 356, 1146, 1401], "structfieldnotfounderror": 763, "structur": [42, 44, 45, 50, 108, 111, 125, 147, 212, 232, 279, 291, 308, 314, 356, 659, 868, 928, 988, 1153, 1375, 1401, 1429], "student": [280, 356], "style": [7, 22, 42, 53, 153, 154, 280, 356], "sub": [342, 400, 401, 402, 405, 406, 407, 408, 410, 411, 412, 413, 414, 418, 419, 423, 584, 591, 868, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1035, 1036, 1040, 1214, 1221], "subarrai": [398, 399, 1016, 1017], "subclass": [1, 356], "subexpress": [64, 890, 901, 930, 943, 988], "subinterv": 1418, "subject": [48, 280, 356], "sublist": [406, 569, 570, 572, 574, 579, 580, 581, 582, 583, 584, 585, 594, 599, 603, 1024, 1182, 1199, 1200, 1202, 1204, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1224, 1229, 1233, 1235, 1401], "subplan": [64, 131, 890, 901, 930, 943, 988], "subscript": 883, "subsequ": [42, 163, 171, 283, 315, 356, 847, 858, 901, 988, 1382, 1401, 1416], "subset": [226, 227, 276, 321, 356, 898, 899, 951, 988], "substr": [425, 428, 431, 444, 448, 713, 718, 725, 736, 737, 740, 741, 742, 743, 744, 994, 1042, 1045, 1048, 1061, 1066, 1317, 1322, 1329, 1340, 1341, 1344, 1345, 1346, 1347, 1348, 1422], "subtl": [42, 356], "subtli": [532, 868], "subtract": [562, 766, 868, 1192, 1401], "succe": [151, 152, 166], "success": [715, 722, 1319, 1326], "successfulli": [53, 54, 55, 890, 901, 930, 943, 988], "suffer": 55, "suffix": [258, 259, 260, 335, 356, 381, 428, 442, 444, 557, 558, 559, 560, 619, 639, 641, 644, 645, 646, 672, 695, 718, 746, 749, 773, 868, 913, 914, 915, 959, 964, 988, 994, 1045, 1061, 1322, 1353], "suffix_field": [640, 642], "sugar": [325, 356, 669, 670, 738, 782, 784, 786, 798, 800, 803, 813, 818, 819, 820, 830, 832, 834, 835, 837, 839, 840, 846, 849, 851, 853, 857, 859, 868, 954, 988, 1271, 1272, 1314, 1342, 1401], "suggest": [356, 359, 1401, 1406], "suitabl": [58, 66, 153, 180, 264, 356, 614, 698, 868, 1243, 1300, 1401], "sum": [42, 97, 148, 230, 237, 243, 244, 254, 280, 288, 306, 335, 356, 459, 460, 464, 515, 528, 614, 625, 627, 628, 629, 630, 631, 669, 670, 675, 680, 689, 691, 692, 693, 780, 782, 794, 801, 803, 804, 815, 829, 841, 852, 868, 890, 891, 896, 901, 908, 909, 927, 930, 932, 936, 940, 943, 964, 988, 994, 1082, 1083, 1142, 1146, 1292, 1293, 1401, 1410, 1417, 1419, 1422, 1429], "sum_": [706, 868, 1311, 1401], "sum_a": [288, 356, 675, 868, 936, 988], "sum_horizont": [58, 356, 851], "summari": [222, 356, 895, 988, 1086, 1401, 1417], "summer": [736, 737], "sun": [356, 359, 750, 1354], "sundai": [244, 356, 469, 481, 499, 502, 512, 792, 909, 988, 1091, 1103, 1125, 1128, 1138], "sunni": [736, 737, 1340, 1341], "supercast": [237, 356], "supertyp": [66, 148, 234, 314, 318, 356, 385, 795, 868, 904, 988, 1401], "suppli": [40, 42, 132, 134, 135, 136, 138, 153, 160, 161, 170, 235, 284, 289, 313, 356, 528, 659, 868, 905, 933, 988, 1379, 1401], "support": [1, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 64, 65, 66, 132, 133, 134, 135, 136, 137, 138, 139, 153, 154, 155, 156, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 179, 183, 186, 196, 206, 212, 256, 257, 258, 259, 290, 291, 301, 302, 310, 315, 318, 356, 429, 502, 519, 599, 655, 669, 670, 707, 709, 714, 724, 726, 727, 736, 737, 738, 740, 751, 864, 868, 874, 883, 890, 891, 901, 913, 914, 930, 943, 944, 945, 988, 994, 1046, 1128, 1148, 1229, 1271, 1272, 1312, 1318, 1328, 1330, 1331, 1340, 1341, 1342, 1344, 1355, 1382, 1384, 1401, 1405, 1419, 1424, 1425, 1427, 1428, 1429], "supportsinterchang": 133, "suppos": [211, 280, 356, 614, 868, 1243, 1401], "sure": [66, 132, 133, 137, 148, 151, 152, 155, 157, 159, 163, 167, 283, 356, 868], "surreal_query_to_fram": 153, "surrealdb": 153, "surrealql": 153, "suscept": 988, "swap": [858, 934, 988], "swim": 796, "switch": [64, 65, 470, 890, 891, 901, 930, 943, 988, 1092], "sy": 206, "sydnei": 808, "symbol": [38, 39, 49, 356, 868, 988], "symmetr": [550, 596, 868, 994, 1177, 1226, 1401], "symmetri": [893, 900, 937, 956, 988], "sync": [49, 50, 51, 52, 988], "sync_on_clos": [49, 50, 51, 52, 988], "synchron": [153, 982], "synconclosemethod": [49, 50, 51, 52, 988], "syntact": [325, 356, 669, 670, 738, 782, 784, 786, 798, 800, 803, 813, 818, 819, 820, 830, 832, 834, 835, 837, 839, 840, 846, 849, 851, 853, 857, 859, 868, 954, 988, 1271, 1272, 1314, 1342, 1401], "syntax": [42, 122, 212, 235, 264, 276, 284, 356, 629, 713, 721, 722, 725, 736, 737, 821, 822, 864, 883, 905, 933, 943, 988, 1317, 1325, 1326, 1329, 1340, 1341, 1401, 1425, 1427], "system": [38, 151, 152, 356, 474, 890, 901, 930, 943, 988, 1096], "t": [38, 39, 41, 49, 66, 97, 137, 146, 150, 151, 156, 162, 166, 172, 244, 259, 264, 279, 321, 324, 356, 461, 470, 478, 496, 502, 515, 518, 520, 521, 576, 614, 655, 659, 721, 725, 736, 737, 747, 750, 753, 758, 858, 868, 909, 914, 928, 951, 988, 994, 1084, 1122, 1128, 1142, 1147, 1149, 1150, 1206, 1243, 1325, 1329, 1340, 1341, 1350, 1351, 1354, 1357, 1362, 1401, 1413, 1414, 1424], "t_": [322, 356, 519, 868, 952, 988, 1148, 1401], "t_0": [288, 356, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 868, 936, 988, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "t_1": [288, 356, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 868, 936, 988, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "t_a": [322, 356, 952, 988], "t_b": [322, 356, 952, 988], "t_c": [322, 356, 952, 988], "t_d": [322, 356, 952, 988], "t_i": [519, 868, 1148, 1401], "t_id": [260, 356, 915, 988], "t_n": [288, 356, 675, 679, 681, 683, 685, 687, 690, 692, 694, 868, 936, 988, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401], "t_struct": [322, 356, 952, 988], "tab_spann": [356, 360], "tab_stub": [356, 360], "tab_styl": [356, 360], "tabl": [7, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 40, 41, 42, 43, 132, 139, 147, 155, 156, 162, 167, 168, 192, 195, 196, 198, 201, 202, 258, 260, 280, 303, 308, 315, 324, 325, 356, 360, 847, 880, 913, 915, 946, 954, 988, 1411, 1412, 1413, 1414, 1416, 1417, 1428, 1429], "table_id": 201, "table_nam": [40, 42, 156, 192, 196, 303, 356, 946, 988], "table_path": [41, 155, 167, 168, 356], "table_styl": [42, 356], "table_typ": 201, "tableinfo": [192, 195, 204], "tablemerg": [41, 356], "tablenotfounderror": [41, 356], "tables_scale_100": [141, 152], "tabletyp": [201, 204], "tail": [242, 246, 356, 385, 706, 868, 988, 1170, 1311, 1401], "take": [42, 97, 147, 156, 162, 182, 183, 206, 237, 238, 244, 269, 272, 279, 280, 285, 356, 395, 469, 481, 492, 528, 535, 536, 580, 581, 613, 640, 642, 644, 709, 790, 792, 812, 814, 823, 868, 907, 909, 925, 932, 934, 988, 1013, 1091, 1103, 1118, 1162, 1163, 1210, 1211, 1392, 1401, 1419], "taken": [599, 740, 1229, 1344], "talkin": [758, 1362], "tan": [868, 1401, 1422], "tand": 1422, "tangent": [391, 392, 769, 770, 868, 1009, 1010, 1373, 1374, 1401, 1426], "tanh": [280, 356, 868, 1401], "target": [1, 40, 41, 42, 43, 63, 156, 265, 318, 356, 721, 736, 737, 750, 752, 753, 858, 920, 988, 994, 1325, 1340, 1341, 1354, 1356, 1357, 1424], "target_alia": [41, 356], "target_t": [40, 356], "task": [65, 891, 988], "tau": [518, 519, 868, 1147, 1148, 1401], "tb": [175, 177, 230, 356, 430, 1146, 1401], "tbl": [97, 139, 141, 152, 1431], "tbl0": 1416, "tbl1": [1414, 1416], "tbl2": [1414, 1416], "tbl3": 1414, "tbl4": 1414, "tbl_cell_numeric_align": [9, 12, 29], "tbl_col": 19, "tbl_format": [22, 206], "tbl_hide_column_data_typ": 22, "tbl_hide_dataframe_shap": 22, "tbl_row": [27, 222, 356, 895, 988], "tbl_width_char": 811, "td": 502, "td1": 994, "td2": 994, "td3": 994, "tdf": [279, 356], "technic": 864, "tell": [714, 738, 1318, 1342], "tempor": [42, 102, 215, 244, 256, 288, 290, 291, 310, 356, 374, 429, 451, 502, 549, 675, 679, 681, 683, 685, 687, 690, 692, 694, 825, 868, 880, 887, 909, 936, 988, 994, 1046, 1073, 1128, 1176, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1422, 1428], "temporalliter": [451, 825, 826, 868, 1073, 1107, 1108, 1401], "temporari": [40, 356], "temporarili": [188, 206, 244, 288, 356, 675, 868, 909, 936, 988], "tenant": 35, "tenant_id": 35, "tend": [175, 177], "tensor": [318, 356, 1384, 1401], "tensordataset": [318, 356], "term": [518, 520, 521, 727, 740, 751, 868, 1147, 1149, 1150, 1331, 1344, 1355, 1401], "termin": [39, 49, 356, 988], "terminologi": 200, "test": [0, 40, 153, 154, 156, 162, 168, 229, 280, 356, 880, 1145, 1401, 1424], "test1": 1416, "test2": 1416, "test3": 1416, "test_1": [280, 356], "test_1_math": [280, 356], "test_1_phys": [280, 356], "test_2": [280, 356], "test_2_math": [280, 356], "test_2_phys": [280, 356], "test_data": 153, "test_df_height": 182, "test_func": 828, "test_lf": [959, 988], "test_miscellan": 1432, "test_numer": 1432, "test_price_calcul": 1432, "test_series_len": 186, "test_tabl": 154, "test_unique_xyz": 180, "testdb": 154, "testing1234": 1416, "text": [150, 153, 199, 446, 447, 550, 719, 727, 731, 732, 733, 736, 737, 739, 740, 751, 848, 868, 932, 988, 1064, 1065, 1177, 1331, 1335, 1336, 1343, 1344, 1355, 1401, 1416, 1432], "text1": 737, "text2": 737, "textclaus": 153, "texttt": [706, 868, 1311, 1401], "th": [238, 356, 536, 581, 594, 706, 727, 751, 868, 907, 988, 1163, 1211, 1224, 1311, 1331, 1355, 1401, 1424], "than": [42, 49, 50, 51, 52, 55, 105, 128, 136, 138, 151, 152, 153, 156, 162, 166, 172, 216, 243, 256, 258, 259, 264, 278, 289, 290, 292, 324, 342, 356, 446, 532, 534, 537, 539, 549, 564, 593, 612, 613, 614, 630, 662, 674, 697, 706, 727, 731, 734, 735, 743, 751, 760, 797, 828, 829, 858, 868, 908, 913, 914, 919, 971, 988, 1064, 1176, 1223, 1243, 1264, 1276, 1298, 1311, 1331, 1335, 1338, 1339, 1347, 1355, 1364, 1381, 1401, 1432], "the_aws_access_key_id": [41, 155, 167, 168, 356], "the_aws_region": [41, 356], "the_aws_secret_access_kei": [41, 155, 167, 168, 356], "thei": [39, 42, 49, 57, 65, 66, 98, 99, 135, 146, 148, 153, 166, 206, 259, 261, 263, 291, 356, 655, 698, 738, 746, 747, 868, 890, 901, 914, 930, 943, 988, 992, 994, 1300, 1342, 1401], "them": [65, 132, 134, 135, 136, 138, 153, 154, 156, 160, 161, 162, 163, 166, 169, 170, 171, 206, 231, 232, 244, 259, 260, 272, 280, 288, 318, 326, 356, 407, 519, 549, 584, 647, 648, 655, 675, 795, 806, 807, 809, 810, 855, 856, 868, 891, 902, 909, 914, 915, 925, 936, 988, 994, 1025, 1148, 1153, 1214, 1252, 1253, 1401, 1419, 1429], "then1": 858, "then2": 858, "therebi": [166, 169, 170], "therefor": [55, 151, 157, 161, 163, 230, 356, 1146, 1401], "theta": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "thi": [1, 4, 5, 10, 12, 14, 16, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 72, 73, 74, 75, 80, 90, 97, 99, 106, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 200, 202, 206, 208, 210, 211, 213, 214, 217, 218, 220, 222, 223, 226, 227, 230, 232, 236, 237, 242, 243, 244, 245, 249, 251, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 268, 270, 271, 272, 273, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 303, 304, 305, 308, 310, 313, 314, 315, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 337, 342, 355, 356, 359, 360, 368, 369, 374, 382, 385, 386, 395, 407, 415, 416, 417, 422, 424, 441, 442, 445, 451, 461, 462, 464, 469, 470, 471, 481, 483, 489, 490, 492, 496, 499, 502, 513, 517, 524, 533, 534, 541, 543, 546, 547, 549, 550, 554, 576, 577, 584, 593, 594, 595, 596, 597, 598, 600, 606, 610, 611, 613, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 632, 637, 640, 642, 644, 647, 648, 650, 655, 662, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 699, 700, 701, 702, 707, 708, 709, 712, 714, 721, 724, 726, 728, 733, 734, 735, 738, 745, 746, 747, 748, 749, 754, 758, 760, 762, 765, 772, 773, 775, 776, 777, 778, 782, 786, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 814, 815, 817, 819, 820, 823, 824, 825, 826, 828, 829, 832, 834, 837, 839, 841, 845, 846, 849, 853, 857, 858, 859, 864, 868, 880, 884, 885, 886, 889, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 905, 908, 909, 911, 913, 914, 915, 917, 919, 920, 924, 925, 929, 930, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 950, 951, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 966, 971, 985, 986, 987, 988, 992, 993, 994, 996, 1003, 1004, 1013, 1025, 1032, 1033, 1034, 1039, 1041, 1058, 1059, 1062, 1068, 1073, 1074, 1084, 1085, 1091, 1092, 1093, 1095, 1103, 1105, 1115, 1116, 1118, 1122, 1125, 1128, 1139, 1141, 1144, 1146, 1152, 1153, 1161, 1163, 1165, 1169, 1171, 1177, 1182, 1191, 1206, 1207, 1214, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1236, 1241, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1255, 1258, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1312, 1313, 1315, 1316, 1318, 1325, 1328, 1330, 1332, 1333, 1337, 1338, 1339, 1342, 1349, 1350, 1351, 1358, 1362, 1364, 1365, 1367, 1370, 1371, 1375, 1377, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1389, 1390, 1391, 1401, 1406, 1410, 1411, 1412, 1416, 1424, 1427, 1428, 1429, 1430, 1432], "thing": [166, 173], "think": [489, 490, 1115, 1116], "third": [613, 868], "thoma": [272, 356, 925, 988], "those": [5, 32, 42, 151, 156, 235, 284, 291, 315, 325, 356, 532, 665, 721, 829, 868, 883, 933, 954, 988, 994, 1266, 1325, 1382, 1401], "though": [40, 151, 153, 244, 356, 864, 909, 988], "thought": 858, "thousand": [9, 29], "thousands_separ": [9, 12, 29], "thread": [16, 39, 49, 65, 141, 151, 152, 154, 188, 189, 302, 356, 576, 614, 709, 790, 868, 891, 945, 988, 1034, 1206, 1230, 1313, 1401], "thread_loc": [614, 868], "thread_pool_s": 189, "three": [42, 211, 288, 317, 356, 462, 662, 675, 698, 727, 736, 751, 868, 936, 988, 1038, 1085, 1235, 1264, 1331, 1341, 1355, 1401], "threshold": [294, 356, 938, 988], "through": [153, 265, 280, 356, 864, 920, 988, 994, 1401, 1416], "throughout": 206, "throw": [41, 134, 135, 138, 224, 285, 356, 729, 730, 887, 897, 934, 988, 1333, 1334, 1401], "thu": [42, 232, 356, 359, 797, 992, 1153, 1401], "thursdai": [244, 356, 469, 481, 792, 909, 988, 1091, 1103], "ti": [665, 868, 1266, 1401], "time": [10, 14, 39, 41, 44, 48, 49, 50, 51, 52, 55, 63, 64, 65, 73, 75, 115, 155, 161, 163, 164, 166, 167, 169, 170, 171, 182, 183, 186, 196, 222, 232, 244, 259, 260, 288, 326, 356, 441, 442, 470, 471, 473, 474, 475, 478, 479, 489, 490, 492, 495, 496, 497, 499, 501, 502, 510, 513, 519, 571, 605, 674, 675, 679, 681, 683, 685, 687, 690, 692, 694, 702, 750, 753, 757, 771, 772, 773, 795, 796, 806, 807, 808, 809, 810, 811, 817, 825, 855, 856, 868, 890, 891, 895, 909, 914, 915, 930, 936, 988, 994, 1058, 1059, 1092, 1093, 1095, 1096, 1100, 1101, 1118, 1121, 1122, 1123, 1125, 1127, 1128, 1136, 1139, 1148, 1153, 1201, 1276, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1307, 1354, 1357, 1361, 1383, 1385, 1386, 1401, 1410, 1416, 1425, 1432], "time_column": [326, 356], "time_format": [39, 49, 356, 988], "time_unit": [73, 75, 471, 473, 479, 501, 513, 753, 808, 809, 810, 811, 817, 993, 994, 1093, 1095, 1101, 1127, 1139, 1357], "time_unit_m": [471, 1093], "time_unit_n": [471, 1093], "time_unit_u": 513, "time_zon": [73, 474, 476, 496, 753, 808, 809, 810, 993, 994, 1092, 1096, 1100, 1122, 1357], "timedelta": [244, 259, 288, 326, 356, 492, 497, 502, 510, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 806, 807, 809, 810, 855, 856, 868, 909, 914, 936, 988, 993, 994, 1106, 1112, 1118, 1123, 1136, 1148, 1252, 1253, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1315, 1391, 1401], "timeout": [65, 891, 988], "timestamp": [139, 155, 167, 244, 356, 496, 497, 510, 817, 909, 988, 1122, 1123, 1136, 1422], "timestamp_m": 501, "timestamp_n": 1127, "timestamp_u": [501, 1127], "timestep": 817, "timeunit": [39, 49, 73, 75, 356, 471, 473, 501, 513, 753, 808, 809, 810, 811, 988, 994, 1093, 1095, 1127, 1139, 1357], "timezon": [56, 73, 155, 167, 476, 994, 1425], "tip": [614, 868], "titl": [42, 356, 359, 1401, 1406, 1410], "titlecas": [758, 1362], "tm": [473, 502, 994, 1425], "to_arrow": [257, 356, 1381, 1401, 1429], "to_batch": [257, 356], "to_dict": [215, 291, 356, 887, 988, 994], "to_dtype_expr": [363, 364, 366, 367, 374], "to_dummi": [313, 318, 356, 1401], "to_fram": [445, 479, 497, 501, 510, 750, 993, 1085, 1264, 1299, 1301, 1346, 1347, 1354, 1401, 1406], "to_init_repr": [139, 356, 1401], "to_jax": [318, 356, 1401], "to_list": [139, 288, 356, 1317, 1329, 1401], "to_lowercas": 646, "to_numpi": [313, 318, 356, 613, 868, 1401], "to_panda": [356, 1401], "to_phys": [868, 1401], "to_python": 993, "to_seri": [59, 239, 356, 750, 791, 842, 1354, 1424], "to_signed_integ": 374, "to_sql": [40, 356], "to_str": [499, 1125], "to_struct": [356, 722], "to_torch": [313, 356, 1401], "to_unsigned_integ": 374, "to_uppercas": [381, 645, 723, 868], "togeth": [260, 356, 915, 988, 1424], "token": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 168, 169, 170, 171, 191, 196, 356, 988], "tokyo": [139, 994], "tokyo_tz": 994, "toler": [175, 176, 177, 178, 259, 356, 550, 868, 914, 988, 1177, 1401], "tone": [42, 356], "tonight": [714, 738, 1318, 1342], "too": [16, 280, 356, 655, 868, 988], "tooltip": [356, 359, 1401, 1406], "toomanyrowsreturnederror": [289, 356], "top": [42, 303, 319, 356, 359, 773, 868, 946, 950, 988, 1401, 1406, 1429], "top_col": [42, 356], "top_k": [214, 356, 441, 442, 773, 868, 885, 988, 1058, 1059, 1386, 1401], "top_k_bi": [441, 442, 772, 868, 1058, 1059, 1385, 1401], "top_row": [42, 356], "tor_id": 139, "torch": [174, 318, 356, 1384, 1401], "torchexporttyp": [318, 356], "total": [42, 230, 337, 356, 503, 504, 505, 506, 507, 508, 509, 565, 586, 868, 966, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1146, 1195, 1216, 1401], "total_gross": 1410, "toward": [337, 565, 586, 868, 966, 1195, 1216, 1401], "tp": [1, 61], "tpu": [313, 356, 1379, 1401], "tr15": [733, 1337], "trace": 76, "traceback": [175, 176, 177, 178, 314, 356, 670, 868, 1272, 1381, 1401], "tracebacktyp": 1429, "track": [155, 167, 168, 264, 356, 1429], "trail": [30, 242, 356, 745, 746, 1349, 1350], "train": [318, 356], "train_lf": [959, 988], "transfer": 154, "transferencod": [426, 427, 716, 717, 1043, 1044, 1320, 1321], "transform": [264, 303, 356, 613, 758, 847, 868, 946, 988, 1362], "transform_dens": [1401, 1406], "transit": [235, 284, 356, 905, 933, 988], "translat": 153, "transpar": [890, 901, 930, 943, 988], "transpos": [280, 356, 374], "travel": [155, 167], "travers": [678, 680, 682, 684, 686, 689, 691, 693, 868, 1279, 1281, 1285, 1290, 1292, 1294, 1401], "treat": [151, 152, 166, 208, 402, 519, 554, 572, 713, 715, 725, 736, 737, 858, 868, 996, 1020, 1148, 1182, 1202, 1317, 1319, 1329, 1340, 1341, 1401], "tree": [630, 901, 988], "tree_format": [901, 988], "trend": [42, 356], "tri": [264, 356, 613, 614, 828, 829, 868], "triangl": [342, 971], "trigger": [41, 148, 261, 315, 356, 868, 1382, 1401], "trigonometri": [1422, 1428], "trim": [139, 1424], "trim_decimal_zero": 30, "trip": 153, "true": [7, 8, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 55, 64, 65, 66, 97, 132, 133, 134, 135, 137, 138, 139, 141, 142, 147, 148, 151, 152, 153, 155, 156, 157, 159, 162, 163, 166, 167, 169, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 191, 206, 210, 215, 216, 217, 222, 224, 229, 234, 235, 237, 239, 241, 242, 243, 244, 251, 252, 253, 256, 258, 259, 260, 261, 263, 268, 269, 275, 276, 278, 280, 281, 284, 285, 289, 290, 291, 292, 302, 303, 306, 309, 311, 313, 314, 315, 318, 320, 321, 322, 324, 325, 326, 330, 336, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 359, 374, 380, 381, 382, 383, 384, 385, 396, 398, 399, 402, 406, 407, 417, 421, 425, 426, 428, 431, 432, 437, 440, 442, 443, 444, 448, 456, 457, 458, 459, 460, 462, 469, 471, 474, 477, 479, 481, 482, 489, 490, 492, 493, 496, 497, 498, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 520, 521, 528, 535, 537, 538, 539, 540, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 572, 580, 582, 584, 600, 605, 612, 613, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 649, 650, 652, 654, 657, 658, 662, 667, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 701, 702, 706, 708, 709, 712, 713, 714, 715, 716, 718, 724, 725, 726, 728, 729, 730, 736, 737, 741, 742, 744, 750, 752, 753, 755, 757, 761, 763, 764, 773, 775, 778, 781, 782, 783, 784, 785, 787, 790, 791, 792, 793, 797, 799, 806, 809, 815, 821, 825, 826, 828, 829, 833, 838, 839, 842, 846, 847, 850, 852, 855, 858, 859, 868, 887, 888, 889, 890, 891, 895, 897, 901, 904, 905, 908, 909, 913, 914, 915, 917, 919, 924, 930, 933, 934, 943, 945, 946, 951, 952, 953, 954, 957, 963, 965, 967, 969, 972, 973, 974, 975, 976, 977, 978, 987, 988, 993, 994, 1001, 1002, 1014, 1016, 1017, 1020, 1024, 1025, 1034, 1042, 1043, 1045, 1048, 1060, 1061, 1066, 1068, 1071, 1072, 1085, 1091, 1092, 1093, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1108, 1109, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1142, 1144, 1145, 1147, 1149, 1150, 1157, 1167, 1171, 1173, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1197, 1198, 1202, 1210, 1212, 1214, 1230, 1243, 1249, 1255, 1257, 1260, 1261, 1264, 1267, 1268, 1277, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1295, 1311, 1313, 1316, 1317, 1318, 1319, 1320, 1322, 1328, 1329, 1330, 1332, 1333, 1334, 1340, 1341, 1345, 1346, 1348, 1354, 1356, 1357, 1359, 1361, 1376, 1381, 1382, 1390, 1392, 1401, 1406, 1410, 1411, 1413, 1415, 1419, 1421, 1424, 1429, 1432], "truediv": [532, 868], "truncat": [22, 139, 151, 152, 166, 242, 244, 256, 290, 291, 310, 356, 909, 930, 988, 1428], "truncate_nod": [930, 988], "truncate_ragged_lin": [151, 152, 166], "truncate_str": 510, "truncate_td": 510, "trust": [464, 868, 896, 988], "truth": 605, "try": [39, 44, 48, 49, 50, 51, 52, 64, 125, 151, 152, 157, 161, 163, 164, 166, 169, 170, 171, 196, 356, 858, 890, 901, 930, 943, 988], "try_cast": 1422, "try_parse_d": [141, 151, 152, 166], "try_parse_hive_d": [163, 169, 171], "ts_local": [496, 1122], "tseri": [489, 490, 1115, 1116], "tstamp": 994, "tstamp_tokyo": 994, "tstamp_utc": 994, "tue": [356, 359], "tuesdai": [244, 356, 909, 988], "tupl": [42, 67, 154, 156, 162, 211, 212, 256, 264, 278, 289, 290, 291, 298, 318, 334, 356, 629, 671, 868, 930, 943, 988, 993, 994, 1273, 1303, 1401], "turn": [8, 64, 151, 152, 166, 258, 259, 356, 701, 868, 890, 901, 913, 914, 919, 930, 988], "twice": [42, 356], "two": [42, 57, 98, 99, 134, 136, 138, 154, 211, 235, 237, 259, 260, 271, 272, 284, 290, 317, 323, 336, 342, 356, 360, 380, 466, 473, 532, 535, 538, 550, 605, 662, 708, 788, 789, 795, 797, 799, 806, 809, 843, 844, 847, 868, 905, 914, 915, 924, 925, 933, 953, 965, 971, 988, 994, 1038, 1088, 1095, 1177, 1235, 1264, 1401, 1416, 1417, 1418, 1421, 1430], "two_a": 1429, "tworld": [747, 1349, 1351], "txt": [1, 14, 166, 713, 725, 1329, 1424], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 56, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 132, 134, 135, 136, 137, 138, 140, 151, 152, 153, 155, 156, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 208, 211, 212, 218, 228, 231, 237, 242, 244, 245, 257, 258, 264, 288, 293, 296, 308, 313, 314, 317, 318, 321, 333, 356, 374, 382, 384, 387, 388, 389, 390, 391, 392, 395, 400, 401, 402, 404, 407, 420, 421, 425, 426, 427, 428, 429, 430, 431, 443, 445, 446, 447, 451, 452, 453, 454, 455, 462, 463, 469, 470, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 522, 524, 535, 538, 541, 549, 550, 551, 552, 553, 554, 555, 556, 565, 569, 570, 572, 577, 584, 586, 604, 605, 628, 662, 664, 668, 669, 670, 671, 673, 674, 675, 679, 681, 683, 685, 687, 690, 692, 694, 703, 704, 705, 712, 715, 716, 717, 720, 721, 722, 723, 726, 727, 728, 730, 731, 732, 740, 741, 742, 743, 750, 751, 755, 769, 770, 771, 778, 787, 795, 798, 805, 806, 807, 808, 809, 810, 811, 813, 821, 822, 824, 825, 826, 827, 828, 829, 839, 842, 854, 855, 856, 859, 864, 868, 880, 881, 890, 900, 901, 902, 909, 913, 930, 936, 937, 943, 951, 961, 988, 993, 994, 996, 1001, 1002, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1024, 1025, 1027, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1047, 1060, 1062, 1064, 1065, 1073, 1085, 1086, 1091, 1092, 1094, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1145, 1148, 1152, 1169, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1197, 1198, 1199, 1200, 1202, 1207, 1214, 1216, 1234, 1235, 1257, 1264, 1270, 1271, 1272, 1273, 1275, 1276, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1306, 1308, 1316, 1317, 1319, 1320, 1321, 1323, 1324, 1325, 1326, 1327, 1330, 1331, 1332, 1334, 1335, 1336, 1344, 1345, 1346, 1347, 1354, 1355, 1359, 1380, 1381, 1383, 1392, 1401, 1410, 1417, 1422, 1424, 1428, 1429], "type_coercion": [64, 890, 901, 930, 943, 988], "type_json": 198, "type_nam": 198, "type_text": 198, "typeerror": [41, 212, 356], "typenam": [42, 356], "typic": [135, 153, 171, 264, 356, 478, 703, 868, 994, 1100, 1243, 1308, 1401], "tz": [753, 1357], "tzinfo": [73, 155, 167, 994], "u": [42, 73, 75, 171, 184, 259, 356, 471, 473, 479, 501, 513, 750, 753, 783, 785, 808, 809, 810, 811, 817, 914, 988, 993, 994, 1093, 1095, 1101, 1127, 1139, 1354, 1357, 1414, 1425], "u1": [314, 356], "u16": [166, 1427, 1432], "u32": [14, 153, 213, 215, 221, 277, 332, 333, 337, 341, 347, 349, 356, 363, 364, 374, 380, 386, 393, 394, 395, 396, 397, 400, 401, 403, 409, 414, 430, 446, 447, 455, 456, 543, 545, 565, 569, 570, 573, 586, 591, 637, 653, 665, 673, 674, 679, 681, 683, 685, 687, 690, 692, 694, 698, 715, 725, 726, 731, 732, 733, 771, 776, 778, 782, 786, 790, 791, 798, 800, 821, 824, 837, 845, 868, 884, 887, 894, 927, 960, 961, 966, 970, 976, 978, 988, 994, 1013, 1014, 1015, 1018, 1019, 1021, 1027, 1031, 1060, 1064, 1065, 1079, 1171, 1199, 1200, 1203, 1216, 1221, 1266, 1275, 1276, 1300, 1319, 1329, 1330, 1335, 1336, 1383, 1388, 1390, 1401, 1410, 1418, 1419, 1420, 1424, 1429], "u64": [245, 333, 356, 541, 667, 868, 930, 961, 988, 994, 1169, 1268, 1401], "u8": [215, 311, 312, 324, 356, 670, 781, 868, 887, 988, 994, 1272, 1376, 1401, 1432], "udf": [188, 263, 264, 279, 342, 356, 464, 613, 614, 659, 828, 829, 868, 896, 919, 928, 971, 988, 1243, 1401], "ufunc": 105, "uid": 153, "uint": 1432, "uint16": [166, 459, 460, 767, 868, 994, 1082, 1083, 1371, 1381, 1384, 1401], "uint2": 1427, "uint32": [140, 174, 215, 230, 288, 333, 356, 374, 395, 400, 401, 430, 446, 447, 455, 519, 535, 538, 565, 569, 570, 586, 668, 673, 674, 675, 679, 681, 683, 685, 687, 690, 692, 694, 715, 726, 731, 732, 771, 798, 821, 824, 868, 887, 936, 961, 988, 994, 1014, 1018, 1019, 1027, 1047, 1060, 1064, 1065, 1146, 1148, 1199, 1200, 1216, 1270, 1275, 1276, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1319, 1330, 1335, 1336, 1383, 1384, 1401], "uint4": 1429, "uint64": [140, 245, 288, 333, 356, 400, 401, 519, 541, 569, 570, 667, 675, 679, 681, 683, 685, 687, 690, 692, 694, 868, 936, 961, 988, 994, 1018, 1019, 1148, 1169, 1199, 1200, 1268, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1384, 1401], "uint8": [153, 215, 312, 313, 314, 324, 356, 459, 460, 670, 767, 781, 868, 887, 988, 993, 994, 1082, 1083, 1272, 1371, 1384, 1401, 1432], "uint8_pair": 1432, "uit": [740, 1344], "uk": [722, 1326], "unabl": [107, 156], "unalias": 620, "unari": [651, 868], "unbias": [520, 521, 868, 1149, 1150, 1401], "unchang": [230, 356, 669, 771, 868, 919, 971, 988, 1146, 1271, 1383, 1401], "uncompress": [37, 44, 45, 48, 50, 52, 157, 169, 356, 988], "undefin": [151, 774, 868], "under": [39, 44, 48, 49, 50, 51, 52, 57, 59, 60, 61, 62, 98, 99, 161, 163, 164, 166, 169, 170, 171, 194, 195, 196, 280, 303, 356, 370, 372, 373, 860, 861, 863, 864, 869, 870, 873, 875, 876, 877, 946, 988, 1393, 1395, 1397, 1402, 1407, 1408, 1409], "underestim": [230, 356, 1146, 1401], "underli": [1, 57, 72, 73, 75, 90, 99, 104, 114, 132, 134, 135, 136, 138, 153, 154, 156, 160, 161, 162, 163, 170, 179, 182, 186, 231, 232, 256, 257, 290, 308, 314, 356, 426, 471, 472, 473, 477, 480, 482, 483, 484, 485, 486, 487, 488, 491, 493, 494, 496, 498, 502, 511, 512, 513, 514, 667, 695, 713, 716, 725, 868, 902, 988, 994, 1043, 1093, 1094, 1095, 1099, 1102, 1104, 1105, 1109, 1110, 1111, 1113, 1114, 1117, 1119, 1120, 1122, 1124, 1128, 1137, 1138, 1139, 1140, 1153, 1268, 1296, 1306, 1317, 1320, 1329, 1375, 1381, 1401, 1429], "understood": 829, "undo": [631, 638], "unexpect": [114, 123, 153, 235, 284, 356, 905, 933, 988, 1243, 1401], "unformat": [42, 356], "unhelpfulli": [175, 177], "unicod": [22, 447, 727, 732, 733, 740, 751, 994, 1065, 1331, 1336, 1337, 1344, 1355, 1424], "unicodeform": [733, 1337], "unifi": [42, 313, 318, 356, 994], "uniform": [42, 356, 543, 662, 868, 1171, 1264, 1401], "unimod": [706, 868, 1311, 1401], "union": [64, 66, 597, 890, 901, 930, 943, 988, 994, 1227, 1428, 1429], "uniqu": [48, 52, 58, 76, 148, 156, 179, 180, 181, 184, 186, 213, 253, 258, 276, 280, 291, 347, 356, 386, 397, 414, 462, 561, 591, 637, 662, 750, 752, 753, 757, 776, 778, 786, 837, 868, 884, 913, 976, 988, 1004, 1015, 1031, 1085, 1190, 1221, 1250, 1264, 1354, 1356, 1357, 1361, 1388, 1390, 1401, 1417, 1419], "unique_column_valu": [280, 356], "unique_count": [868, 1401], "uniquekeepstrategi": [321, 356, 951, 988], "unit": [42, 73, 75, 148, 175, 176, 177, 178, 182, 186, 230, 356, 430, 471, 473, 479, 495, 501, 513, 519, 525, 611, 613, 626, 750, 753, 777, 794, 808, 809, 810, 811, 817, 828, 829, 868, 930, 988, 994, 1047, 1093, 1095, 1101, 1121, 1127, 1139, 1146, 1148, 1154, 1241, 1354, 1357, 1389, 1401, 1432], "uniti": [191, 192, 194, 195, 196, 204, 880], "unity_catalog": 199, "univers": [208, 996], "unix": [72, 73, 479, 510, 817, 1101, 1136], "unknown": [721, 827, 1325], "unless": [42, 58, 134, 151, 258, 263, 313, 318, 356, 374, 745, 746, 842, 913, 988, 1349, 1424], "unlik": [147, 244, 325, 356, 883, 909, 954, 988], "unnam": [723, 1327], "unnest": [147, 356, 462, 662, 673, 722, 723, 742, 743, 763, 765, 778, 858, 868, 988, 1038, 1085, 1235, 1264, 1275, 1346, 1347, 1401, 1422, 1428], "unpivot": [271, 356, 924, 988], "unregist": [1412, 1413, 1414, 1429, 1431], "unsaf": [148, 868], "unset": [40, 163, 169, 181, 341, 356, 434, 435, 436, 438, 439, 496, 868, 970, 1051, 1052, 1053, 1055, 1056, 1122, 1401, 1410], "unsign": [91, 92, 93, 94, 374, 667, 868, 994, 1268, 1401], "unsigned_integ": 994, "unstabl": [10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 129, 131, 142, 143, 144, 145, 146, 147, 153, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 265, 303, 313, 318, 325, 356, 359, 360, 368, 369, 374, 461, 462, 469, 481, 543, 614, 662, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 694, 754, 792, 794, 845, 868, 890, 891, 901, 920, 929, 930, 943, 946, 954, 962, 988, 994, 1068, 1084, 1085, 1091, 1103, 1171, 1264, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1379, 1384, 1401, 1406], "unstack": 356, "unstackdirect": [324, 356], "unsuit": 130, "unsupport": [41, 212, 356, 883], "until": [49, 50, 51, 52, 97, 98, 244, 261, 356, 734, 735, 760, 909, 988, 1338, 1339, 1364], "untrust": 172, "up": [12, 42, 89, 154, 256, 259, 280, 290, 291, 297, 310, 356, 450, 451, 614, 727, 736, 737, 751, 868, 913, 914, 919, 941, 988, 994, 1070, 1331, 1340, 1341, 1355, 1401], "upcast": [56, 265, 356, 385, 868, 920, 988], "upcast_integer_typ": [1, 61], "updat": [41, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 206, 222, 356, 895, 988], "updated_at": [197, 200, 201], "updated_bi": [197, 200, 201], "upgrad": 110, "upheld": [919, 988], "upon": 152, "upper": [151, 152, 153, 230, 244, 356, 451, 543, 549, 605, 640, 777, 787, 806, 807, 809, 810, 825, 826, 855, 856, 868, 909, 988, 1073, 1146, 1171, 1176, 1241, 1389, 1401, 1419, 1422], "upper_bound": [244, 356, 451, 549, 605, 868, 909, 988, 1073, 1176, 1241, 1401], "uppercas": [646, 759, 1363, 1424], "upsampl": [244, 356, 909, 988], "urandom": [430, 1047], "uri": [40, 41, 153, 154, 155, 167, 168, 356], "url": [153, 154, 163, 169, 171, 191, 721, 723, 1325, 1327], "urllib": 154, "us": [1, 7, 9, 10, 11, 13, 14, 16, 22, 27, 29, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 64, 65, 66, 67, 73, 89, 98, 99, 102, 106, 129, 133, 135, 136, 138, 140, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 191, 212, 213, 214, 215, 218, 222, 224, 226, 227, 233, 234, 235, 237, 243, 244, 251, 253, 255, 256, 257, 259, 260, 263, 264, 271, 275, 276, 278, 279, 280, 284, 288, 289, 290, 291, 292, 294, 295, 297, 302, 303, 304, 308, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 323, 324, 325, 326, 327, 330, 331, 332, 333, 335, 342, 356, 359, 374, 380, 382, 384, 386, 395, 396, 421, 426, 427, 429, 442, 444, 446, 447, 448, 451, 461, 464, 467, 468, 476, 495, 496, 497, 499, 502, 510, 513, 515, 518, 519, 520, 521, 522, 526, 527, 528, 532, 547, 548, 549, 562, 576, 593, 601, 605, 607, 613, 614, 617, 655, 661, 662, 665, 667, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 697, 699, 701, 702, 706, 708, 709, 711, 712, 713, 714, 716, 717, 718, 720, 721, 722, 724, 725, 726, 729, 730, 731, 732, 733, 736, 737, 738, 740, 742, 744, 746, 747, 748, 749, 750, 752, 753, 754, 757, 760, 761, 765, 767, 773, 779, 780, 782, 783, 784, 785, 786, 789, 790, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 817, 821, 822, 824, 825, 827, 828, 829, 830, 831, 833, 835, 836, 839, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 855, 856, 857, 858, 859, 864, 867, 868, 879, 880, 883, 884, 885, 886, 887, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 914, 915, 917, 924, 929, 930, 933, 936, 937, 938, 939, 941, 943, 945, 946, 947, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 971, 988, 992, 993, 994, 1001, 1002, 1004, 1034, 1038, 1043, 1044, 1046, 1059, 1064, 1065, 1068, 1084, 1086, 1089, 1090, 1098, 1107, 1108, 1121, 1122, 1123, 1125, 1128, 1136, 1139, 1142, 1147, 1148, 1149, 1150, 1155, 1156, 1162, 1168, 1175, 1176, 1192, 1206, 1208, 1223, 1230, 1235, 1243, 1263, 1264, 1266, 1268, 1271, 1273, 1275, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1298, 1299, 1301, 1302, 1305, 1311, 1313, 1315, 1316, 1317, 1318, 1320, 1321, 1324, 1325, 1326, 1328, 1329, 1330, 1335, 1336, 1337, 1340, 1341, 1342, 1344, 1346, 1354, 1356, 1357, 1358, 1361, 1364, 1371, 1375, 1376, 1378, 1381, 1382, 1386, 1391, 1401, 1410, 1411, 1412, 1413, 1414, 1416, 1417, 1424, 1425, 1429, 1431, 1432], "usag": [182, 186, 300, 356, 858, 994, 1306, 1401], "usd": [242, 356, 1432], "use_abs_path": 148, "use_pyarrow": [48, 52, 151, 155, 157, 159, 163, 167, 314, 356, 988, 1381, 1401], "use_pyarrow_extension_arrai": [315, 356, 1382, 1401], "use_pyarrow_write_to_dataset": [48, 356], "use_statist": [163, 171], "user": [40, 146, 148, 153, 154, 172, 208, 263, 264, 279, 342, 356, 614, 659, 699, 801, 815, 829, 841, 868, 928, 971, 988, 992, 996, 1243, 1302, 1401], "user_conn": 153, "userid": 368, "usernam": [151, 154, 157, 159], "userwarn": 1, "usr": 153, "usual": [106, 154, 206, 318, 356, 470, 1092], "utc": [155, 167, 470, 474, 476, 478, 496, 750, 753, 993, 994, 1092, 1096, 1100, 1122, 1354, 1357], "utc_tz": 994, "utf": [39, 49, 88, 356, 988], "utf8": [22, 151, 152, 166, 727, 740, 751, 1331, 1344, 1355], "utf8_borders_onli": 22, "utf8_ful": [22, 58, 139], "utf8_full_condens": [7, 22, 139], "utf8_horizontal_onli": 22, "utf8_no_bord": 22, "util": [318, 356, 817, 988], "uvloop": 153, "uvw": [722, 1326], "v": [8, 9, 11, 48, 230, 356, 698, 783, 785, 868, 1300, 1401, 1413, 1414], "v1": 34, "v2": [8, 11, 157, 169], "val": [42, 287, 356, 614, 659, 771, 858, 868, 935, 988], "valid": [39, 42, 49, 73, 97, 146, 151, 152, 153, 157, 159, 163, 166, 186, 206, 224, 230, 258, 259, 285, 356, 461, 713, 715, 721, 722, 723, 725, 730, 736, 737, 858, 868, 897, 913, 914, 934, 963, 988, 994, 1084, 1146, 1317, 1319, 1325, 1326, 1327, 1329, 1334, 1340, 1341, 1401, 1410, 1411], "validate_output_schema": [919, 988], "validate_schema": [97, 146], "vals_phys": [771, 868], "valu": [4, 5, 12, 13, 14, 15, 19, 22, 30, 32, 38, 39, 42, 48, 49, 52, 53, 55, 57, 58, 66, 67, 70, 76, 77, 85, 86, 95, 99, 108, 134, 135, 137, 138, 144, 151, 152, 153, 154, 163, 166, 169, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 206, 210, 212, 213, 214, 215, 222, 226, 227, 229, 232, 233, 234, 235, 239, 242, 244, 245, 246, 250, 254, 256, 258, 259, 262, 264, 266, 267, 268, 269, 270, 271, 273, 274, 276, 278, 280, 281, 282, 284, 285, 288, 289, 290, 291, 292, 299, 302, 304, 305, 306, 307, 309, 310, 311, 314, 315, 319, 320, 323, 324, 325, 326, 327, 334, 337, 338, 340, 343, 344, 346, 347, 356, 359, 360, 374, 378, 379, 380, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 430, 431, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 460, 461, 462, 465, 467, 468, 473, 477, 488, 493, 502, 511, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 598, 600, 601, 602, 603, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 622, 633, 634, 635, 636, 637, 647, 648, 649, 650, 653, 655, 656, 659, 660, 661, 662, 663, 665, 668, 669, 670, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 703, 704, 705, 706, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 721, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 751, 760, 762, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 786, 790, 793, 795, 796, 798, 800, 801, 802, 803, 804, 814, 815, 820, 821, 822, 823, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 841, 842, 843, 844, 851, 852, 858, 868, 884, 885, 895, 898, 899, 903, 904, 905, 909, 911, 912, 913, 914, 921, 922, 923, 924, 926, 927, 931, 932, 933, 934, 936, 942, 945, 947, 948, 950, 953, 954, 955, 966, 967, 969, 972, 973, 975, 976, 988, 994, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1059, 1060, 1061, 1064, 1065, 1066, 1070, 1073, 1075, 1076, 1077, 1079, 1084, 1085, 1086, 1087, 1089, 1090, 1095, 1099, 1114, 1119, 1128, 1137, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1153, 1154, 1155, 1156, 1160, 1161, 1162, 1163, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1228, 1230, 1231, 1232, 1233, 1236, 1237, 1243, 1244, 1245, 1247, 1248, 1250, 1252, 1253, 1255, 1256, 1258, 1259, 1263, 1264, 1265, 1266, 1270, 1271, 1272, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1298, 1299, 1300, 1301, 1304, 1308, 1309, 1310, 1311, 1313, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1346, 1347, 1348, 1355, 1364, 1367, 1371, 1372, 1373, 1374, 1376, 1381, 1382, 1383, 1386, 1388, 1390, 1392, 1401, 1410, 1415, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1427, 1429, 1431, 1432], "value1": [709, 868], "value2": [709, 868], "value_a": 1429, "value_b": 1429, "value_count": [776, 868, 1401], "value_cum_sum": [460, 868], "value_cum_sum_all_fil": [460, 868], "value_nam": [271, 323, 356, 924, 953, 988], "value_var": [271, 323, 356, 924, 953, 988], "valueerror": [11, 17, 22, 212], "valueexcept": 827, "var": [42, 187, 356, 693, 694, 868, 988, 1401, 1418], "var_samp": 1418, "vari": [156, 162, 212, 470, 1092, 1432], "variabl": [32, 39, 44, 48, 49, 50, 51, 52, 64, 65, 85, 161, 163, 164, 166, 169, 170, 171, 185, 188, 196, 271, 311, 323, 356, 890, 891, 901, 924, 930, 943, 953, 988, 1376, 1401, 1411, 1413, 1429], "variable_nam": [271, 323, 356, 924, 953, 988], "variad": 153, "varianc": [327, 356, 521, 562, 693, 694, 779, 857, 868, 955, 988, 1150, 1192, 1294, 1295, 1391, 1401, 1422], "variou": [153, 211, 218, 356, 868, 892, 988, 993, 994, 1401], "vector": [172, 678, 680, 682, 684, 686, 689, 691, 693, 868, 1279, 1281, 1285, 1290, 1292, 1294, 1401], "vector_index_format": 199, "vectoris": [489, 490, 1115, 1116], "vein": 206, "verbos": [31, 175, 177, 206, 722, 1326], "veri": [256, 263, 320, 356, 614, 868, 971, 1423], "verifi": [259, 356, 914, 988], "versicolor": [356, 359], "version": [40, 41, 44, 45, 55, 63, 64, 67, 70, 133, 139, 151, 152, 155, 156, 157, 159, 163, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 196, 210, 213, 214, 223, 244, 245, 258, 271, 280, 288, 296, 303, 308, 313, 314, 318, 319, 326, 332, 337, 356, 359, 374, 442, 461, 464, 469, 476, 489, 490, 502, 513, 518, 520, 521, 534, 541, 613, 614, 621, 622, 628, 632, 669, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 701, 712, 720, 754, 765, 773, 780, 789, 792, 797, 841, 843, 844, 847, 868, 884, 885, 890, 896, 901, 909, 913, 924, 930, 932, 936, 940, 943, 946, 950, 959, 960, 966, 988, 994, 1084, 1091, 1098, 1107, 1108, 1115, 1116, 1128, 1139, 1145, 1147, 1149, 1150, 1168, 1169, 1271, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1316, 1324, 1358, 1375, 1379, 1381, 1384, 1401, 1406, 1429], "versionchang": [605, 729], "versu": [222, 356, 895, 988], "vertic": [66, 232, 324, 328, 356, 712, 728, 1316, 1332], "vertical_relax": 66, "via": [32, 151, 152, 153, 154, 157, 161, 163, 166, 169, 170, 171, 209, 211, 223, 256, 290, 356, 464, 614, 723, 868, 896, 932, 988, 997, 1327], "view": 203, "virtual": 148, "visibl": [19, 230, 356, 1146, 1401], "visit": [461, 868, 1084, 1401], "visual": [251, 253, 356, 629, 943, 988], "volk": 147, "vote": [721, 723, 1325, 1327], "vowel": [736, 737, 1340, 1341], "vstack": [66, 232, 356], "w": [42, 153, 244, 291, 356, 715, 719, 721, 723, 783, 785, 909, 988, 994, 1319, 1323, 1325, 1327, 1350, 1413, 1414, 1417], "w_i": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "wa": [40, 44, 45, 63, 70, 106, 139, 151, 152, 156, 157, 159, 163, 166, 169, 170, 171, 175, 176, 177, 178, 214, 223, 244, 258, 280, 288, 308, 313, 314, 319, 326, 356, 359, 442, 461, 464, 518, 520, 521, 670, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 738, 754, 773, 811, 843, 844, 868, 885, 896, 909, 913, 936, 950, 988, 994, 1084, 1145, 1147, 1149, 1150, 1272, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1342, 1375, 1381, 1401, 1406, 1424, 1429], "wai": [98, 99, 132, 134, 135, 136, 138, 160, 161, 170, 243, 257, 279, 302, 335, 356, 497, 659, 698, 709, 721, 798, 858, 864, 868, 893, 900, 908, 928, 937, 945, 956, 964, 971, 988, 992, 1123, 1300, 1325, 1401], "wait": [49, 50, 51, 52, 988], "walk": 796, "want": [42, 65, 135, 137, 151, 152, 153, 156, 157, 161, 163, 166, 206, 232, 264, 276, 288, 303, 356, 374, 446, 469, 481, 528, 613, 614, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 702, 714, 731, 736, 737, 738, 792, 801, 806, 809, 815, 828, 839, 842, 859, 868, 891, 946, 963, 988, 994, 1064, 1091, 1103, 1153, 1243, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1318, 1335, 1340, 1341, 1342, 1401, 1416], "warehous": 154, "warn": [101, 102, 105, 106, 109, 116, 118, 119, 129, 655, 825, 826, 868, 1401], "watermark": [48, 356], "wb": [42, 356], "we": [48, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 211, 222, 223, 244, 259, 280, 288, 326, 356, 359, 464, 492, 497, 510, 543, 576, 613, 675, 679, 681, 683, 685, 687, 690, 692, 694, 723, 736, 737, 755, 805, 806, 807, 808, 809, 810, 827, 828, 855, 856, 858, 868, 895, 896, 905, 909, 914, 919, 933, 936, 988, 994, 1118, 1123, 1136, 1171, 1206, 1243, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1327, 1341, 1359, 1401, 1406, 1413], "weather": [736, 737, 1340, 1341], "wed": [356, 359], "wednesdai": [244, 356, 499, 502, 909, 988, 1125, 1128], "week": [244, 259, 288, 326, 356, 469, 481, 492, 497, 510, 512, 519, 675, 679, 681, 683, 685, 687, 690, 692, 694, 792, 806, 807, 809, 810, 811, 855, 856, 868, 909, 914, 936, 988, 994, 1091, 1103, 1118, 1123, 1136, 1138, 1148, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "week_mask": [469, 481, 792, 1091, 1103], "weekdai": [477, 493], "weekend": [469, 481, 792, 1091, 1103], "weekli": [244, 356, 510, 909, 988, 1136], "weghorst": [723, 1327], "weight": [147, 518, 519, 520, 521, 677, 678, 680, 682, 684, 686, 689, 691, 693, 706, 868, 1147, 1148, 1149, 1150, 1278, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1311, 1401], "wei\u00df": 1424, "well": [42, 151, 152, 153, 166, 356, 549, 847, 868, 1176, 1401, 1429], "were": [175, 176, 177, 178, 206, 669, 670, 864, 868, 1271, 1272, 1401], "west": [76, 260, 356, 915, 988], "what": [53, 211, 265, 276, 356, 469, 714, 738, 920, 988, 1091, 1318, 1342], "whatev": 206, "when": [11, 12, 16, 19, 21, 25, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 73, 89, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 147, 151, 152, 153, 154, 156, 157, 159, 161, 162, 163, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 182, 186, 206, 214, 222, 228, 230, 232, 234, 235, 237, 244, 258, 260, 264, 272, 279, 285, 289, 291, 294, 295, 299, 302, 308, 311, 313, 314, 318, 319, 321, 325, 331, 356, 374, 416, 429, 446, 447, 451, 469, 481, 518, 520, 521, 527, 598, 613, 626, 659, 661, 669, 670, 700, 708, 709, 714, 720, 724, 726, 727, 731, 732, 738, 740, 745, 746, 747, 750, 751, 767, 790, 792, 801, 815, 825, 851, 868, 885, 895, 904, 909, 913, 915, 919, 925, 934, 938, 939, 942, 945, 950, 951, 954, 958, 985, 988, 1033, 1046, 1064, 1065, 1073, 1086, 1091, 1103, 1146, 1147, 1149, 1150, 1153, 1156, 1182, 1228, 1271, 1272, 1299, 1301, 1304, 1318, 1324, 1328, 1330, 1331, 1335, 1336, 1342, 1344, 1349, 1350, 1351, 1354, 1355, 1375, 1376, 1381, 1401, 1416, 1429], "when1": 858, "when2": 858, "when_matched_update_al": [41, 356], "when_not_matched_insert_al": [41, 356], "whenev": [613, 614, 828, 829, 868], "where": [42, 55, 58, 106, 153, 154, 156, 212, 226, 227, 232, 235, 244, 256, 260, 271, 280, 284, 290, 303, 304, 313, 318, 323, 325, 327, 356, 396, 429, 502, 512, 515, 517, 519, 528, 601, 607, 613, 650, 668, 698, 706, 709, 711, 738, 758, 779, 791, 797, 799, 843, 844, 847, 849, 857, 858, 868, 898, 899, 905, 909, 915, 924, 933, 946, 947, 953, 954, 955, 988, 1014, 1046, 1128, 1138, 1142, 1144, 1148, 1153, 1157, 1255, 1270, 1300, 1311, 1315, 1342, 1362, 1391, 1392, 1401, 1410, 1418, 1428, 1429, 1431], "wherea": [151, 166, 288, 356, 444, 448, 497, 510, 647, 648, 675, 868, 936, 988, 1123, 1136, 1252, 1253, 1401], "wherev": [42, 264, 342, 356, 614, 868, 1243, 1401], "whether": [39, 49, 53, 55, 97, 136, 138, 146, 147, 156, 162, 163, 169, 171, 186, 190, 229, 255, 259, 297, 302, 356, 374, 382, 384, 398, 399, 481, 482, 498, 540, 550, 567, 568, 655, 698, 699, 709, 724, 726, 790, 801, 815, 841, 868, 914, 919, 932, 941, 945, 988, 994, 1001, 1002, 1016, 1017, 1063, 1068, 1103, 1104, 1124, 1145, 1167, 1168, 1177, 1197, 1198, 1300, 1328, 1330, 1401, 1413, 1429], "which": [1, 6, 10, 11, 12, 22, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 66, 135, 137, 151, 152, 153, 154, 155, 156, 161, 162, 163, 166, 167, 168, 169, 170, 171, 182, 185, 187, 206, 214, 215, 222, 223, 226, 227, 230, 232, 243, 244, 249, 258, 259, 260, 280, 288, 296, 313, 314, 319, 321, 325, 326, 356, 382, 421, 429, 464, 469, 481, 492, 497, 499, 510, 519, 525, 549, 552, 555, 557, 558, 559, 560, 605, 613, 614, 626, 628, 675, 679, 681, 683, 685, 687, 690, 692, 694, 737, 755, 792, 806, 807, 809, 810, 811, 825, 826, 855, 856, 858, 868, 885, 887, 890, 893, 895, 896, 898, 900, 901, 909, 913, 914, 915, 930, 932, 936, 940, 943, 950, 951, 954, 956, 988, 994, 1038, 1046, 1091, 1103, 1118, 1123, 1125, 1136, 1146, 1148, 1153, 1154, 1176, 1180, 1183, 1185, 1186, 1187, 1188, 1235, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1301, 1359, 1379, 1381, 1401, 1411, 1417, 1429, 1432], "while": [41, 65, 152, 155, 156, 167, 171, 182, 186, 196, 206, 256, 271, 320, 323, 325, 356, 447, 669, 732, 868, 891, 924, 953, 954, 988, 1065, 1271, 1336, 1401], "white": [42, 356], "whitespac": [139, 745, 746, 747, 1349, 1350, 1351, 1424], "whole": [613, 708, 709, 721, 868, 971, 988, 1325], "whose": [58, 100, 259, 280, 356, 522, 813, 868, 914, 988, 994], "why": [890, 901, 930, 943, 988], "wide": [153, 242, 271, 280, 323, 324, 356, 924, 953, 988], "wider": 56, "width": [28, 42, 67, 151, 152, 166, 356, 359, 374, 604, 794, 988, 994, 1234, 1401, 1406], "wiki": 22, "wikipedia": 22, "wildcard": [148, 522, 761, 801, 802, 815, 841, 864, 868, 994], "win_loss": [42, 356], "window": [151, 152, 166, 244, 288, 356, 461, 518, 520, 521, 614, 655, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 795, 843, 844, 868, 909, 936, 988, 1084, 1147, 1149, 1150, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1401], "window_s": [676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 843, 844, 868, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1401], "windowmappingstrategi": [655, 868], "winter": [724, 726, 736, 737, 1328, 1330], "wise": [42, 58, 153, 237, 356, 387, 388, 389, 390, 391, 392, 452, 453, 454, 523, 609, 703, 704, 705, 769, 770, 815, 841, 868, 1005, 1006, 1007, 1008, 1009, 1010, 1075, 1076, 1077, 1151, 1239, 1240, 1308, 1309, 1310, 1373, 1374, 1401], "wish": [214, 319, 356, 441, 442, 772, 773, 868, 885, 950, 988, 1058, 1059, 1385, 1386, 1401], "with_column": [1, 14, 61, 64, 146, 212, 244, 263, 279, 288, 318, 324, 331, 356, 374, 379, 381, 396, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 414, 415, 416, 417, 421, 426, 427, 429, 430, 443, 444, 446, 447, 448, 451, 456, 457, 458, 459, 460, 462, 465, 469, 470, 472, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 511, 512, 514, 516, 517, 519, 526, 527, 532, 537, 539, 541, 547, 548, 549, 550, 553, 554, 556, 557, 558, 559, 560, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 612, 613, 614, 634, 636, 638, 639, 641, 643, 645, 646, 649, 650, 651, 655, 656, 659, 660, 662, 665, 669, 670, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 700, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 754, 755, 756, 758, 759, 760, 762, 765, 766, 771, 774, 781, 783, 785, 788, 792, 793, 794, 795, 796, 800, 801, 802, 804, 805, 807, 808, 812, 822, 825, 826, 828, 831, 833, 836, 845, 848, 852, 854, 856, 858, 864, 868, 890, 901, 909, 911, 928, 929, 930, 936, 943, 958, 988, 994, 1085, 1122, 1264, 1330, 1401, 1429], "with_column_nam": 166, "with_columns_seq": [356, 988], "with_context": 988, "with_field": [614, 868], "with_replac": [292, 356, 593, 697, 868, 1223, 1298, 1401], "with_row_count": [356, 988], "with_row_index": [1, 288, 332, 356, 679, 681, 683, 685, 687, 690, 692, 694, 868, 960, 988, 1299, 1401, 1406], "within": [48, 53, 54, 55, 67, 77, 85, 175, 176, 177, 178, 197, 198, 200, 212, 243, 244, 245, 259, 288, 326, 356, 541, 665, 709, 868, 909, 914, 936, 988, 1169, 1401, 1429], "without": [1, 10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 74, 80, 106, 109, 131, 139, 142, 143, 144, 145, 146, 147, 153, 154, 155, 158, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 258, 260, 263, 265, 303, 313, 314, 318, 324, 325, 356, 359, 360, 368, 369, 374, 461, 462, 469, 481, 543, 613, 614, 662, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 694, 701, 714, 724, 726, 738, 754, 792, 794, 798, 825, 826, 828, 829, 845, 846, 868, 890, 891, 901, 913, 915, 920, 929, 930, 946, 954, 962, 988, 992, 994, 1068, 1084, 1085, 1091, 1103, 1171, 1264, 1277, 1278, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1293, 1295, 1318, 1328, 1330, 1342, 1379, 1381, 1384, 1401, 1406, 1431], "without_fil": [155, 167, 168], "wod": [747, 1351], "womp": [322, 356, 952, 988], "word": [154, 736, 737, 746, 747, 758, 1362, 1424], "work": [42, 74, 80, 151, 152, 157, 161, 163, 172, 295, 331, 356, 382, 384, 422, 446, 447, 450, 451, 522, 531, 576, 606, 614, 655, 727, 731, 732, 740, 751, 775, 825, 868, 932, 939, 958, 988, 992, 994, 1001, 1002, 1039, 1064, 1065, 1070, 1073, 1160, 1206, 1236, 1331, 1335, 1336, 1344, 1355, 1387, 1401], "workaround": 356, "workbook": [42, 156, 162, 356], "workday_raas_format": 199, "worker": [932, 988], "working_with_conditional_format": [42, 356], "working_with_sparklin": [42, 356], "worksheet": [42, 156, 162, 356], "workspac": 191, "workspace_url": 191, "world": [1, 22, 714, 738, 745, 746, 747, 994, 1214, 1318, 1342, 1349, 1350, 1351, 1412, 1415, 1424], "wors": [945, 988], "worth": [576, 1206], "worthwhil": [175, 177], "would": [105, 151, 152, 165, 166, 211, 314, 318, 356, 359, 395, 406, 469, 481, 582, 614, 625, 655, 661, 665, 767, 790, 792, 845, 851, 868, 1013, 1024, 1091, 1103, 1212, 1263, 1266, 1371, 1381, 1401, 1406, 1427], "wow": 994, "wrap": [87, 139, 374, 443, 549, 613, 828, 868, 1060, 1401], "wrap_in_arrai": 374, "wrap_in_list": 374, "wrap_numer": [443, 868, 1060, 1401], "wrapper": [65, 891, 988], "writabl": [37, 39, 44, 45, 46, 47, 48, 296, 314, 356, 1381, 1401], "write": [10, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 137, 142, 150, 152, 157, 206, 218, 356, 451, 629, 632, 868, 917, 943, 988, 994, 1073, 1401], "write_avro": 356, "write_clipboard": [150, 356], "write_csv": [38, 152, 166, 356], "write_databas": 356, "write_delta": 356, "write_excel": 356, "write_iceberg": 356, "write_ipc": [157, 356], "write_ipc_stream": 356, "write_json": 356, "write_markdown_frame_to_stdout": 206, "write_ndjson": [46, 356], "write_parquet": 356, "write_t": [48, 356], "write_to_dataset": [48, 356], "writeabl": [314, 356, 1381, 1401], "writer": [41, 356], "writer_properti": [41, 356], "writerproperti": [41, 356], "written": [6, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 296, 356, 628, 940, 988], "ww": [1424, 1431], "www": [733, 763, 1337], "x": [29, 58, 66, 89, 108, 133, 139, 142, 151, 152, 154, 156, 162, 166, 179, 180, 182, 210, 230, 248, 251, 253, 258, 263, 280, 290, 291, 320, 323, 324, 356, 359, 366, 367, 374, 379, 381, 383, 402, 407, 430, 456, 463, 516, 517, 532, 537, 539, 541, 564, 571, 584, 610, 612, 613, 614, 634, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 654, 660, 668, 669, 670, 674, 703, 706, 742, 765, 766, 771, 774, 781, 783, 785, 788, 789, 795, 799, 801, 802, 804, 815, 827, 828, 831, 833, 836, 841, 845, 847, 852, 858, 868, 913, 919, 944, 946, 953, 988, 993, 994, 1025, 1079, 1156, 1175, 1243, 1271, 1272, 1308, 1311, 1346, 1379, 1383, 1384, 1401, 1406, 1413, 1414, 1417, 1423, 1424, 1429, 1431], "x00": [425, 426, 427, 428, 429, 431, 716, 1042, 1043, 1044, 1045, 1046, 1048, 1320], "x01": [429, 1046], "x05": [429, 1046], "x07": 430, "x1": 430, "x10": [429, 1046], "x80": 430, "x83": 430, "x88": 430, "x8e": 430, "x99": 430, "x_": [519, 868, 1148, 1401], "x_0": [324, 356, 518, 519, 520, 521, 868, 1147, 1148, 1149, 1150, 1401], "x_1": [324, 356, 519, 868, 1148, 1401], "x_2": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "x_i": [519, 868, 1148, 1401], "x_invers": [660, 868], "x_pow_8": 1423, "x_round": 1423, "x_round_1": 1423, "x_squar": [660, 868], "x_t": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "x_uniqu": [637, 868], "x_y": [407, 584], "xb": 430, "xb9neq": 430, "xbd": 430, "xc14": 430, "xd3": 430, "xdist": 1432, "xee": 430, "xf4v": 430, "xf9": 430, "xfb": 430, "xff": [425, 426, 427, 428, 431, 716, 1042, 1043, 1044, 1045, 1048, 1320], "xi": [722, 1326], "xl": 156, "xlog2": [636, 660, 868], "xlsb": 156, "xlsx": [42, 156, 356], "xlsx2csv": [156, 174], "xlsx2csv_option": 156, "xlsxwriter": [42, 174, 356], "xor": [440, 868, 1057, 1401, 1420], "xor_xi": [781, 868], "xx": [12, 59, 61, 186, 222, 249, 303, 356, 895, 988, 994, 1417, 1424, 1431], "xxx": [226, 356, 763, 898, 988], "xy": [59, 61], "xyz": [7, 18, 20, 21, 22, 23, 24, 25, 26, 27, 379, 715, 722, 868, 1319, 1326, 1377, 1401, 1424], "y": [29, 58, 66, 89, 108, 133, 139, 142, 179, 180, 182, 210, 230, 251, 253, 258, 280, 290, 291, 320, 323, 324, 356, 359, 366, 367, 374, 379, 381, 383, 402, 407, 430, 499, 502, 516, 517, 537, 539, 564, 571, 584, 612, 614, 637, 639, 641, 643, 645, 646, 649, 650, 654, 668, 669, 670, 674, 750, 752, 753, 765, 774, 781, 783, 785, 788, 789, 799, 804, 811, 827, 831, 833, 836, 847, 852, 868, 913, 944, 946, 953, 988, 993, 994, 1025, 1125, 1128, 1271, 1272, 1354, 1356, 1357, 1401, 1406, 1417, 1424, 1425, 1431], "y_": [518, 519, 520, 521, 868, 1147, 1148, 1149, 1150, 1401], "y_0": [324, 356, 518, 519, 520, 521, 868, 1147, 1148, 1149, 1150, 1401], "y_1": [324, 356], "y_i": [519, 868, 1148, 1401], "y_mul": 765, "y_t": [518, 520, 521, 868, 1147, 1149, 1150, 1401], "y_uniqu": [637, 868], "ya": [740, 1344], "ya29": 168, "ye": [142, 858], "year": [53, 55, 244, 259, 288, 303, 326, 356, 469, 481, 482, 483, 492, 493, 495, 497, 510, 511, 675, 679, 681, 683, 685, 687, 690, 692, 694, 792, 805, 806, 807, 808, 809, 810, 855, 856, 868, 909, 914, 936, 988, 994, 1091, 1103, 1104, 1105, 1118, 1119, 1121, 1123, 1136, 1137, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1401, 1425], "yellow": [356, 360, 425, 426, 427, 428, 431], "yield": [136, 138, 151, 152, 153, 166, 230, 232, 255, 320, 356, 532, 655, 868, 988, 1146, 1153, 1401], "you": [1, 12, 16, 42, 48, 52, 58, 65, 66, 132, 134, 135, 136, 137, 138, 148, 151, 152, 153, 154, 156, 157, 160, 161, 163, 165, 166, 170, 172, 206, 214, 232, 235, 244, 255, 256, 259, 264, 276, 280, 284, 288, 289, 290, 291, 303, 310, 313, 319, 320, 321, 323, 342, 356, 359, 366, 374, 441, 442, 446, 469, 481, 489, 490, 492, 496, 499, 502, 522, 528, 549, 576, 578, 613, 614, 629, 655, 660, 661, 667, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 702, 714, 731, 736, 737, 738, 758, 761, 767, 772, 773, 792, 801, 806, 809, 811, 815, 825, 828, 829, 839, 842, 845, 847, 851, 859, 868, 885, 891, 905, 909, 914, 932, 933, 936, 943, 946, 950, 951, 953, 963, 971, 988, 992, 994, 1058, 1059, 1064, 1091, 1103, 1115, 1116, 1122, 1125, 1128, 1153, 1176, 1206, 1243, 1262, 1263, 1268, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1318, 1335, 1340, 1341, 1342, 1362, 1371, 1379, 1385, 1386, 1401, 1406, 1411, 1416, 1432], "your": [40, 42, 57, 58, 99, 146, 151, 152, 153, 154, 156, 172, 206, 256, 258, 264, 290, 291, 294, 310, 330, 335, 342, 356, 359, 474, 519, 534, 614, 723, 750, 752, 753, 760, 828, 829, 868, 913, 919, 938, 957, 964, 971, 988, 992, 1096, 1148, 1243, 1327, 1354, 1356, 1357, 1364, 1401, 1406, 1432], "yy": [12, 59, 61, 186, 222, 249, 303, 356, 895, 988, 994, 1417, 1424, 1431], "yyi": [226, 356, 763, 898, 988], "yyyi": [42, 356], "yz": [59, 61], "z": [42, 66, 89, 139, 180, 230, 251, 253, 258, 290, 291, 320, 323, 324, 356, 374, 379, 381, 383, 541, 571, 614, 639, 641, 643, 645, 646, 654, 668, 669, 670, 714, 722, 724, 726, 738, 750, 753, 783, 785, 804, 831, 833, 836, 842, 847, 852, 868, 913, 944, 946, 953, 988, 993, 994, 1156, 1271, 1272, 1318, 1326, 1328, 1330, 1342, 1354, 1357, 1401, 1413, 1417, 1429, 1431], "z_0": [324, 356], "z_1": [324, 356], "zap": 994, "zero": [30, 42, 132, 133, 149, 151, 152, 157, 159, 163, 181, 184, 210, 234, 244, 256, 289, 303, 308, 314, 315, 356, 374, 527, 610, 695, 698, 706, 760, 774, 868, 888, 904, 909, 988, 1072, 1156, 1235, 1311, 1364, 1375, 1381, 1382, 1401, 1423, 1429], "zero_copy_onli": [1381, 1401], "zfill": [735, 781, 868, 1339], "zip": 1432, "zip_with": [237, 356, 1401], "zone": [73, 182, 183, 186, 470, 474, 496, 519, 753, 808, 809, 810, 868, 994, 1092, 1096, 1122, 1148, 1357, 1401], "zoneinfo": [73, 994], "zoom": [42, 356], "zstd": [41, 44, 45, 48, 50, 52, 356, 988], "zz": [186, 222, 249, 303, 356, 895, 988, 1417, 1424, 1431], "zzz": 763, "\u03bc": [139, 215, 244, 256, 288, 290, 291, 310, 326, 356, 470, 471, 473, 474, 475, 476, 478, 480, 484, 486, 487, 489, 490, 491, 492, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 675, 679, 681, 683, 685, 687, 690, 692, 694, 750, 753, 808, 809, 810, 811, 817, 825, 868, 887, 909, 936, 988, 994, 1092, 1093, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1108, 1109, 1113, 1115, 1116, 1117, 1118, 1122, 1123, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1139, 1280, 1282, 1284, 1286, 1288, 1291, 1293, 1295, 1354, 1357, 1401, 1424], "\u0441\u0438\u043d\u0438\u0439": 1424, "\u0967\u096f\u096f\u096f": 994, "\u0968\u0966\u096d\u096d": 994, "\u4eac\u90fd": 994, "\u5927\u962a": 994, "\u6771\u4eac": [446, 447, 731, 732, 994, 1064, 1065, 1335, 1336], "\u90fd\u5e02": 994, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [733, 1337], "\uff54\uff45\uff53\uff54": 1424, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1424, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1424, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1424, "\ud835\udf0b": 1423}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_default_credential_provider", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.ScanCastOptions", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.parquet.ParquetFieldOverwrites", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_metadata", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.__setitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_columns", "polars.DataFrame.map_rows", "polars.DataFrame.match_to_schema", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "polars.DataType.to_dtype_expr", "polars.DataTypeExpr.arr.inner_dtype", "polars.DataTypeExpr.arr.shape", "polars.DataTypeExpr.arr.width", "polars.DataTypeExpr.list.inner_dtype", "polars.DataTypeExpr.struct.field_dtype", "polars.DataTypeExpr.struct.field_names", "polars.dtype_of", "polars.self_dtype", "Array", "Functions", "List", "Struct", "DataType expressions", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.len", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_close", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.filter", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.row_index", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.__getitem__", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.match_to_schema", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.pipe_with_schema", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.QueryOptFlags", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.len", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.bottom_k_by", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_close", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.filter", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.repeat_by", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_max_by", "polars.Series.rolling_mean", "polars.Series.rolling_mean_by", "polars.Series.rolling_median", "polars.Series.rolling_median_by", "polars.Series.rolling_min", "polars.Series.rolling_min_by", "polars.Series.rolling_quantile", "polars.Series.rolling_quantile_by", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_std_by", "polars.Series.rolling_sum", "polars.Series.rolling_sum_by", "polars.Series.rolling_var", "polars.Series.rolling_var_by", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.top_k_by", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1417, 1430], "IF": 1421, "__array__": [208, 996], "__arrow_c_stream__": [209, 997], "__dataframe__": 210, "__getitem__": [211, 883, 998], "__iter__": 334, "__setitem__": 212, "ab": [378, 999, 1423], "aco": 1426, "acosd": 1426, "add": 379, "add_business_dai": [469, 1091], "agg": [335, 964], "agg_group": 380, "aggreg": [207, 377, 882, 995, 1418], "alia": [381, 1000], "alias": [1418, 1423, 1424], "align_fram": 58, "all": [336, 382, 398, 567, 782, 965, 1001, 1016, 1197, 1430], "all_horizont": 783, "and_": 383, "ani": [384, 399, 568, 784, 1002, 1017, 1198], "any_horizont": 785, "api": [1, 59, 60, 61, 62, 880, 1429], "append": [385, 1003], "approx_n_uniqu": [213, 386, 786, 884, 1004], "arang": 787, "arcco": [387, 1005], "arccosh": [388, 1006], "arcsin": [389, 1007], "arcsinh": [390, 1008], "arctan": [391, 1009], "arctan2": 788, "arctan2d": 789, "arctanh": [392, 1010], "arg_max": [393, 400, 569, 1011, 1018, 1199], "arg_min": [394, 401, 570, 1012, 1019, 1200], "arg_sort": [395, 1013], "arg_sort_bi": 790, "arg_tru": [396, 1014], "arg_uniqu": [397, 1015], "arg_wher": 791, "arr": [362, 363, 364, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "arrai": [67, 370, 860, 1393, 1419], "array_agg": 1419, "array_contain": 1419, "array_get": 1419, "array_length": 1419, "array_low": 1419, "array_mean": 1419, "array_revers": 1419, "array_sum": 1419, "array_to_str": 1419, "array_uniqu": 1419, "array_upp": 1419, "asin": 1426, "asind": 1426, "assert": 1432, "assert_frame_equ": 175, "assert_frame_not_equ": 176, "assert_series_equ": 177, "assert_series_not_equ": 178, "atan": 1426, "atan2": 1426, "atan2d": 1426, "atand": 1426, "attribut": [351, 983, 1394], "avail": 1, "avg": 1418, "avro": 881, "backward_fil": [424, 1041], "base_utc_offset": [470, 1092], "basepartitioncontext": 143, "batched_read": 141, "batchedcsvread": 141, "bin": [425, 426, 427, 428, 429, 430, 431, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "binari": [68, 861, 874, 1395], "bit_and": 1420, "bit_count": 1420, "bit_length": 1424, "bit_or": 1420, "bit_xor": 1420, "bitwis": 1420, "bitwise_and": [432, 1049], "bitwise_count_on": [433, 1050], "bitwise_count_zero": [434, 1051], "bitwise_leading_on": [435, 1052], "bitwise_leading_zero": [436, 1053], "bitwise_or": [437, 1054], "bitwise_trailing_on": [438, 1055], "bitwise_trailing_zero": [439, 1056], "bitwise_xor": [440, 1057], "boolean": [69, 862, 1396], "bottom_k": [214, 441, 885, 1058], "bottom_k_bi": [442, 1059], "build_info": 63, "business_day_count": 792, "cach": 886, "cancel": 980, "cast": [215, 443, 881, 887, 1060, 1427], "cast_time_unit": [471, 1093], "cat": [444, 445, 446, 447, 448, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068], "catalog": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205], "cataloginfo": 197, "categor": 70, "categori": [863, 1397], "categoricalremappingwarn": 101, "cbrt": [449, 1069, 1423], "ceil": [450, 1070, 1423], "centuri": [472, 1094], "chronoformatwarn": 102, "chunk_length": 1071, "claus": 1417, "clear": [216, 888, 1072], "clip": [451, 1073], "clipboard": 881, "clone": [217, 889, 1074], "cloud": 881, "co": [452, 1075, 1426], "coalesc": [793, 1421], "col": 864, "collect": 890, "collect_al": 64, "collect_all_async": 65, "collect_async": 891, "collect_schema": [218, 892], "column": [179, 180, 219, 865, 893], "columninfo": 198, "columnnotfounderror": 103, "combin": [473, 1095], "comparison": [874, 1405], "comput": [352, 866, 1398], "computeerror": 104, "concat": [66, 571, 712, 1201, 1316, 1424], "concat_arr": 794, "concat_list": 795, "concat_str": 796, "concat_w": 1424, "condit": 1421, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 206], "conjunct": 874, "contain": [402, 425, 572, 713, 1020, 1042, 1202, 1317], "contains_ani": [714, 1318], "context": 206, "convers": 879, "convert_time_zon": [474, 1096], "corr": [220, 797, 1418], "cosd": 1426, "cosh": [453, 1076], "cot": [454, 1077, 1426], "cotd": 1426, "count": [221, 337, 455, 798, 894, 966, 1078, 1418], "count_match": [403, 573, 715, 1021, 1203, 1319], "cov": 799, "creat": 1431, "create_list_strategi": 181, "credenti": 881, "credentialprovid": 33, "credentialprovideraw": 34, "credentialproviderazur": 35, "credentialprovidergcp": 36, "csv": [141, 881], "cum_count": [456, 800, 1079], "cum_fold": 801, "cum_max": [457, 1080], "cum_min": [458, 1081], "cum_prod": [459, 1082], "cum_reduc": 802, "cum_sum": [460, 803, 1083], "cum_sum_horizont": 804, "cumulative_ev": [461, 1084], "customufuncwarn": 105, "cut": [462, 1085], "dai": [477, 1099], "data": 375, "databas": 881, "datafram": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 182, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356], "dataorientationwarn": 106, "dataset": 881, "datasourceformat": 199, "datatyp": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 361, 374, 375], "datatypeexpr": [362, 363, 364, 365, 366, 367], "date": [72, 475, 805, 1097, 1424], "date_part": 1425, "date_rang": [806, 807], "datetim": [73, 476, 808, 1098], "datetime_rang": [809, 810], "decim": 74, "decod": [426, 716, 1043, 1320], "decor": 206, "defer": 97, "degre": [463, 1426], "delet": 1431, "delta": 881, "describ": [222, 895, 1086], "descript": [353, 984, 1399], "deseri": [223, 464, 896], "diff": [465, 574, 1087, 1204], "disable_string_cach": 98, "distinct": 1417, "div": 1423, "document": 1429, "dot": [466, 1088], "drop": [224, 897, 1431], "drop_in_plac": 225, "drop_nan": [226, 467, 898, 1089], "drop_nul": [227, 468, 575, 899, 1090, 1205], "dst_offset": [478, 1100], "dt": [469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140], "dtype": [183, 228, 900, 1141], "dtype_of": 368, "duplicateerror": 107, "durat": [75, 811], "element": 812, "enable_string_cach": 99, "encod": [427, 717, 1044, 1321], "ends_with": [428, 444, 718, 1045, 1061, 1322, 1424], "engine_config": 963, "entropi": [515, 1142], "enum": 76, "epoch": [479, 1101], "eq": [516, 618, 1143], "eq_miss": [517, 1144], "equal": [229, 1145], "error": 376, "escape_regex": [100, 719, 1323], "estimated_s": [230, 1146], "eval": [576, 1206], "ewm_mean": [518, 1147], "ewm_mean_bi": [519, 1148], "ewm_std": [520, 1149], "ewm_var": [521, 1150], "exampl": [1, 994, 1432], "excel": 881, "except": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 376, 1430], "exclud": [522, 813], "execut": 1410, "execute_glob": 1411, "exp": [523, 1151, 1423], "explain": [901, 1431], "explain_al": 131, "explod": [231, 404, 524, 577, 720, 902, 1022, 1152, 1207, 1324], "export": [354, 1400], "expr": [378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781], "express": [374, 868, 992, 1429], "extend": [1, 232, 1153], "extend_const": [525, 1154], "extract": [721, 1325, 1425], "extract_al": [722, 1326], "extract_group": [723, 1327], "extract_mani": [724, 1328], "feather": 881, "fetch": 981, "fetch_block": 982, "field": [77, 761, 1365, 1366], "field_dtyp": 366, "field_nam": 367, "fill_nan": [233, 526, 903, 1155], "fill_nul": [234, 527, 904, 1156], "filter": [235, 528, 578, 905, 1157, 1208], "find": [725, 1329], "find_mani": [726, 1330], "first": [338, 405, 529, 579, 814, 906, 967, 1023, 1158, 1209, 1418], "flag": [236, 1159], "flatten": 530, "float32": 78, "float64": 79, "floor": [531, 1160, 1423], "floordiv": 532, "fold": [237, 815], "format": 816, "forward_fil": [533, 1161], "frame": 1429, "from": 1417, "from_arrow": 132, "from_datafram": 133, "from_dict": [134, 135], "from_epoch": 817, "from_json": 534, "from_numpi": 136, "from_panda": 137, "from_record": 138, "from_repr": 139, "function": [1, 371, 867, 879, 994, 1422], "gather": [535, 580, 1162, 1210], "gather_everi": [238, 536, 581, 907, 1163, 1211], "ge": [537, 1164], "get": [406, 538, 582, 1024, 1212], "get_categori": [445, 1062], "get_chunk": 1165, "get_column": [239, 241], "get_column_index": 240, "get_index_typ": 140, "get_polars_schema": 202, "get_table_info": 192, "glimps": 242, "global": 1429, "gpuengin": [963, 985], "greatest": 1421, "group": [818, 1417], "group_bi": [243, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 908, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979], "group_by_dynam": [244, 909], "groupbi": [334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 355, 986], "gt": [539, 1166], "has_multiple_output": 619, "has_nul": [540, 1167], "has_valid": 1168, "hash": [541, 1169], "hash_row": 245, "have": 1417, "head": [246, 339, 542, 583, 727, 819, 910, 968, 1170, 1213, 1331], "height": 247, "helper": 1432, "hist": [543, 1171], "hour": [480, 1102], "hstack": 248, "iceberg": 881, "ifnul": 1421, "implod": [544, 820, 1172], "import": 994, "in_process": [980, 981, 982], "index": 0, "index_of": [545, 1173], "initcap": 1424, "inner_dtyp": [362, 365], "inprocessqueri": [980, 981, 982, 987], "input": 881, "insert_column": 249, "inspect": [546, 911], "instanc": 206, "int128": 80, "int16": 81, "int32": 82, "int64": 83, "int8": 84, "int_rang": [821, 822], "interfac": 1428, "interpol": [250, 547, 912, 1174], "interpolate_bi": [548, 1175], "intersect": 1430, "introduct": 1429, "invalidoperationerror": 108, "io": [141, 142, 143, 144, 145, 146, 992], "ipc": 881, "is_between": [549, 1176], "is_business_dai": [481, 1103], "is_clos": [550, 1177], "is_column": 620, "is_column_select": 621, "is_dupl": [251, 551, 1178], "is_empti": [252, 1179], "is_finit": [552, 1180], "is_first_distinct": [553, 1181], "is_in": [554, 1182], "is_infinit": [555, 1183], "is_last_distinct": [556, 1184], "is_leap_year": [482, 1104], "is_liter": 622, "is_loc": 1063, "is_nan": [557, 1185], "is_not_nan": [558, 1186], "is_not_nul": [559, 1187], "is_nul": [560, 1188], "is_regex_project": 623, "is_sort": 1189, "is_uniqu": [253, 561, 1190], "iso_year": [483, 1105], "item": [254, 1191], "iter_column": 255, "iter_row": 256, "iter_slic": 257, "join": [258, 407, 584, 728, 913, 1025, 1214, 1332, 1417], "join_asof": [259, 914], "join_wher": [260, 915], "json": 881, "json_decod": [729, 1333], "json_encod": [762, 1367], "json_norm": 147, "json_path_match": [730, 1334], "keep": 638, "keyedpartit": 144, "keyedpartitioncontext": 145, "kurtosi": [562, 1192], "lake": 881, "last": [340, 408, 563, 585, 823, 916, 969, 1026, 1193, 1215, 1418], "lazi": [261, 917], "lazyfram": [49, 50, 51, 52, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 988], "lazygroupbi": [964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979], "le": [564, 1194], "least": 1421, "left": 1424, "len": [341, 409, 565, 586, 824, 970, 1027, 1195, 1216], "len_byt": [446, 731, 1064, 1335], "len_char": [447, 732, 1065, 1336], "length": 1424, "limit": [262, 566, 918, 1196, 1417], "linear_spac": [825, 826], "list": [85, 184, 365, 372, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 869, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1402], "list_catalog": 193, "list_namespac": 194, "list_tabl": 195, "lit": 827, "ln": 1423, "load": [2, 206], "load_from_fil": 3, "load_profil": 185, "log": [608, 1238, 1423], "log10": [609, 1239, 1423], "log1p": [610, 1240, 1423], "log2": 1423, "lower": 1424, "lower_bound": [611, 1241], "lt": [612, 1242], "ltrim": 1424, "manag": 206, "manipul": [358, 872, 990, 1404], "map": 639, "map_batch": [613, 828, 919], "map_column": 263, "map_el": [614, 1243], "map_field": 640, "map_group": [342, 829, 971], "map_row": 264, "mapwithoutreturndtypewarn": 109, "match_to_schema": [265, 920], "math": 1423, "max": [266, 343, 410, 587, 615, 830, 921, 972, 1028, 1106, 1217, 1244, 1418], "max_horizont": [267, 831], "mean": [268, 344, 411, 588, 616, 832, 922, 973, 1107, 1218, 1245], "mean_horizont": [269, 833], "median": [270, 345, 412, 589, 617, 834, 923, 974, 1029, 1108, 1219, 1246, 1418], "melt": [271, 924], "merge_sort": [272, 925], "meta": [618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 870], "metadata": 991, "method": 1429, "microsecond": [484, 1109], "millennium": [485, 1110], "millisecond": [486, 1111], "min": [273, 346, 413, 590, 633, 835, 926, 975, 1030, 1112, 1220, 1247, 1418], "min_horizont": [274, 836], "minut": [487, 1113], "miscellan": [357, 871, 879, 989, 1403], "mod": [634, 1423], "mode": [635, 1248], "moduleupgraderequirederror": 110, "month": [488, 1114], "month_end": [489, 1115], "month_start": [490, 1116], "mul": 636, "multipl": [206, 879], "n_chunk": [275, 1249], "n_uniqu": [276, 347, 414, 591, 637, 837, 976, 1031, 1221, 1250], "name": [638, 639, 640, 641, 642, 643, 644, 645, 646, 865, 873, 1251, 1430], "namespaceinfo": 200, "nan_max": [647, 1252], "nan_min": [648, 1253], "nanosecond": [491, 1117], "ne": [624, 649, 1254], "ne_miss": [650, 1255], "neg": 651, "nest": 375, "new": 1, "new_from_index": 1256, "next_batch": 141, "nodataerror": 111, "normal": [733, 1337, 1424], "norowsreturnederror": 112, "not_": [652, 1257], "nth": 838, "null": 86, "null_count": [277, 653, 927, 1258], "nullif": 1421, "numer": [375, 874, 1405], "object": 87, "octet_length": 1424, "od": 881, "offset": 1417, "offset_bi": [492, 1118], "ones": 839, "oper": [874, 994, 1405, 1430, 1431], "option": [206, 881], "or_": 654, "order": 1417, "ordinal_dai": [493, 1119], "other": 375, "outofboundserror": 113, "output": 881, "output_nam": 625, "over": 655, "pad_end": [734, 1338], "pad_start": [735, 1339], "panic": 376, "panicexcept": 114, "parametercollisionerror": 115, "parametr": [179, 180, 181, 182, 183, 184, 185, 186, 187, 1432], "parquet": [142, 881], "parquetfieldoverwrit": 142, "partit": [143, 144, 145, 881], "partition_bi": 278, "partitionbykei": 53, "partitionmaxs": 54, "partitionpart": 55, "pct_chang": [656, 1259], "peak_max": [657, 1260], "peak_min": [658, 1261], "performancewarn": 116, "pi": 1423, "pipe": [279, 659, 928], "pipe_with_schema": 929, "pivot": 280, "plot": [359, 1406], "plugin": [146, 148, 992], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 361, 362, 363, 364, 365, 366, 367, 368, 369, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1432], "polarserror": 117, "polarsinefficientmapwarn": 118, "polarswarn": 119, "pop": 626, "pow": [660, 1262, 1423], "prefix": 641, "prefix_field": 642, "product": [281, 661, 1263], "profil": [930, 1432], "provid": 1, "pyarrow": 881, "python": [880, 1429], "qcut": [662, 1264], "quantil": [282, 348, 663, 840, 931, 977, 1265], "quantile_cont": 1418, "quantile_disc": 1418, "quarter": [494, 1120], "queri": [879, 1429], "queryoptflag": 962, "radian": [664, 1426], "random": 879, "rank": [665, 1266], "read_avro": 149, "read_clipboard": 150, "read_csv": 151, "read_csv_batch": 152, "read_databas": 153, "read_database_uri": 154, "read_delta": 155, "read_excel": 156, "read_ipc": 157, "read_ipc_schema": 158, "read_ipc_stream": 159, "read_json": 160, "read_ndjson": 161, "read_od": 162, "read_parquet": 163, "read_parquet_metadata": 164, "read_parquet_schema": 165, "rechunk": [283, 666, 1267], "reduc": 841, "refer": 880, "regexp_lik": 1424, "regist": 1412, "register_dataframe_namespac": 59, "register_expr_namespac": 60, "register_glob": 1413, "register_io_sourc": 146, "register_lazyframe_namespac": 61, "register_mani": 1414, "register_plugin_funct": 148, "register_series_namespac": 62, "registr": 1, "reinterpret": [429, 667, 1046, 1268], "remot": 932, "remov": [284, 933], "renam": [285, 934, 1269], "rename_field": [763, 1368], "repeat": 842, "repeat_bi": [668, 1270], "replac": [495, 669, 736, 1121, 1271, 1340, 1424], "replace_al": [737, 1341], "replace_column": 286, "replace_mani": [738, 1342], "replace_strict": [670, 1272], "replace_time_zon": [496, 1122], "reshap": [671, 1273], "restore_default": 4, "revers": [287, 415, 592, 672, 739, 935, 1032, 1222, 1274, 1343, 1424], "right": 1424, "rle": [673, 1275], "rle_id": [674, 1276], "roll": [288, 675, 936], "rolling_corr": 843, "rolling_cov": 844, "rolling_kurtosi": [676, 1277], "rolling_map": [677, 1278], "rolling_max": [678, 1279], "rolling_max_bi": [679, 1280], "rolling_mean": [680, 1281], "rolling_mean_bi": [681, 1282], "rolling_median": [682, 1283], "rolling_median_bi": [683, 1284], "rolling_min": [684, 1285], "rolling_min_bi": [685, 1286], "rolling_quantil": [686, 1287], "rolling_quantile_bi": [687, 1288], "rolling_skew": [688, 1289], "rolling_std": [689, 1290], "rolling_std_bi": [690, 1291], "rolling_sum": [691, 1292], "rolling_sum_bi": [692, 1293], "rolling_var": [693, 1294], "rolling_var_bi": [694, 1295], "root_nam": 627, "round": [497, 695, 1123, 1296, 1423], "round_sig_fig": [696, 1297], "row": [289, 290], "row_index": 845, "rows_by_kei": 291, "rowserror": 120, "rtrim": 1424, "sampl": [292, 593, 697, 1223, 1298], "save": [5, 206], "save_to_fil": 6, "scan": 881, "scan_csv": 166, "scan_delta": 167, "scan_iceberg": 168, "scan_ipc": 169, "scan_ndjson": 170, "scan_parquet": 171, "scan_pyarrow_dataset": 172, "scan_tabl": 196, "scancastopt": 56, "scatter": 1299, "schema": [293, 937, 993, 1369], "schemaerror": 123, "schemafieldnotfounderror": 124, "search_sort": [698, 1300], "second": [498, 1124], "select": [294, 358, 846, 872, 938, 990, 1404, 1417], "select_seq": [295, 939], "selector": 994, "self_dtyp": 369, "seri": [186, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1401], "serial": [296, 357, 628, 940, 989], "set": [994, 1301, 1430], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_default_credential_provid": 10, "set_differ": [594, 1224], "set_engine_affin": 11, "set_float_precis": 12, "set_fmt_float": 13, "set_fmt_str_length": 14, "set_fmt_table_cell_list_len": 15, "set_intersect": [595, 1225], "set_profil": 187, "set_random_se": 173, "set_sort": [297, 699, 941, 1302], "set_streaming_chunk_s": 16, "set_symmetric_differ": [596, 1226], "set_tbl_cell_align": 17, "set_tbl_cell_numeric_align": 18, "set_tbl_col": 19, "set_tbl_column_data_type_inlin": 20, "set_tbl_dataframe_shape_below": 21, "set_tbl_format": 22, "set_tbl_hide_column_data_typ": 23, "set_tbl_hide_column_nam": 24, "set_tbl_hide_dataframe_shap": 25, "set_tbl_hide_dtype_separ": 26, "set_tbl_row": 27, "set_tbl_width_char": 28, "set_thousands_separ": 29, "set_trim_decimal_zero": 30, "set_union": [597, 1227], "set_verbos": 31, "shape": [298, 363, 1303], "shapeerror": 125, "shift": [299, 416, 598, 700, 942, 1033, 1228, 1304], "show": 1431, "show_graph": [629, 943], "show_vers": 174, "shrink_dtyp": [701, 1305], "shrink_to_fit": [300, 1306], "shuffl": [702, 1307], "sign": [703, 1308, 1423], "sin": [704, 1309, 1426], "sind": 1426, "sinh": [705, 1310], "sink_csv": 49, "sink_ipc": 50, "sink_ndjson": 51, "sink_parquet": 52, "size": [430, 1047], "skew": [706, 1311], "slice": [301, 599, 707, 740, 944, 1229, 1312, 1344], "sort": [302, 417, 600, 708, 945, 1034, 1230, 1313], "sort_bi": 709, "split": [741, 1345], "split_exact": [742, 1346], "split_part": 1424, "splitn": [743, 1347], "sql": [303, 847, 946, 1417, 1422, 1428, 1429], "sql_expr": 848, "sqlcontext": [1410, 1411, 1412, 1413, 1414, 1415, 1416, 1429], "sqlinterfaceerror": 121, "sqlsyntaxerror": 122, "sqrt": [710, 1314, 1423], "starts_with": [431, 448, 744, 1048, 1066, 1348, 1424], "state": [32, 206], "std": [304, 418, 601, 711, 849, 947, 1035, 1231, 1315], "stddev": 1418, "str": [712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364], "strategi": 1432, "strftime": [499, 1125, 1425], "string": [88, 375, 875, 1407, 1424], "string_to_arrai": 1424, "stringcach": [57, 879], "stringcachemismatcherror": 126, "strip_char": [745, 1349], "strip_chars_end": [746, 1350], "strip_chars_start": [747, 1351], "strip_prefix": [748, 1352], "strip_suffix": [749, 1353], "strpo": 1424, "strptime": [750, 1354, 1424], "struct": [89, 366, 367, 373, 761, 762, 763, 764, 765, 850, 876, 1365, 1366, 1367, 1368, 1369, 1370, 1408], "structfieldnotfounderror": 127, "style": 360, "sub": 766, "substr": 1424, "suffix": 643, "suffix_field": 644, "sum": [305, 349, 419, 602, 767, 851, 948, 978, 1036, 1232, 1371, 1418], "sum_horizont": [306, 852], "tabl": [1415, 1431], "tableinfo": [201, 202], "tabletyp": 203, "tail": [307, 350, 603, 751, 768, 853, 949, 979, 1233, 1355, 1372], "tan": [769, 1373, 1426], "tand": 1426, "tanh": [770, 1374], "tempor": [375, 877, 1409, 1425], "test": [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 1432], "thread_pool_s": 188, "threadpool_s": 189, "time": [90, 500, 854, 1126], "time_rang": [855, 856], "timestamp": [501, 1127, 1424], "to_arrai": [604, 1234], "to_arrow": [308, 1375], "to_dat": [752, 1356], "to_datetim": [753, 1357], "to_decim": [754, 1358], "to_dict": [309, 310], "to_dtype_expr": 361, "to_dummi": [311, 1376], "to_fram": 1377, "to_init_repr": [312, 1378], "to_integ": [755, 1359], "to_jax": [313, 1379], "to_list": [420, 1037, 1380], "to_loc": 1067, "to_lowercas": [645, 756, 1360], "to_numpi": [314, 1381], "to_panda": [315, 1382], "to_phys": [771, 1383], "to_seri": 316, "to_str": [502, 1128], "to_struct": [317, 421, 605, 1038, 1235], "to_tim": [757, 1361], "to_titlecas": [758, 1362], "to_torch": [318, 1384], "to_uppercas": [646, 759, 1363], "toomanyrowsreturnederror": 128, "top_k": [319, 772, 950, 1385], "top_k_bi": [773, 1386], "total_dai": [503, 1129], "total_hour": [504, 1130], "total_microsecond": [505, 1131], "total_millisecond": [506, 1132], "total_minut": [507, 1133], "total_nanosecond": [508, 1134], "total_second": [509, 1135], "transpos": 320, "tree_format": 630, "trigonometri": 1426, "truediv": 774, "truncat": [510, 1136, 1431], "try_cast": 1427, "type": [375, 1427], "uint16": 91, "uint32": 92, "uint64": 93, "uint8": 94, "undo_alias": 631, "union": 1430, "uniqu": [321, 422, 606, 775, 951, 1039, 1236, 1387], "unique_count": [776, 1388], "uniti": [197, 198, 199, 200, 201, 202, 203, 205], "unknown": 95, "unnest": [322, 764, 952, 1370, 1419, 1431], "unpivot": [323, 953], "unregist": 1416, "unstablewarn": 129, "unstack": 324, "unsuitablesqlerror": 130, "updat": [325, 954], "upper": 1424, "upper_bound": [777, 1389], "upsampl": 326, "us": 206, "uses_lexical_ord": 1068, "using_string_cach": 190, "utf8": 96, "value_count": [778, 1390], "var": [327, 423, 607, 779, 857, 955, 1040, 1237, 1391], "varianc": 1418, "vstack": 328, "warn": 376, "week": [511, 1137], "weekdai": [512, 1138], "when": 858, "where": [780, 1417], "width": [329, 364, 956], "window": 878, "with_column": [330, 957], "with_columns_seq": [331, 958], "with_context": 959, "with_field": 765, "with_row_count": [332, 960], "with_row_index": [333, 961], "with_time_unit": [513, 1139], "write_avro": 37, "write_clipboard": 38, "write_csv": 39, "write_databas": 40, "write_delta": 41, "write_excel": 42, "write_iceberg": 43, "write_ipc": 44, "write_ipc_stream": 45, "write_json": [46, 632], "write_ndjson": 47, "write_parquet": 48, "xor": 781, "year": [514, 1140], "zero": 859, "zfill": [760, 1364], "zip_with": 1392}})